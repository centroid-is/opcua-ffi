// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/minimal.dart';
import 'api/types/byte_string.dart';
import 'api/types/data_value.dart';
import 'api/types/date_time.dart';
import 'api/types/enums.dart';
import 'api/types/guid.dart';
import 'api/types/monitored_item.dart';
import 'api/types/monitored_item_create_request.dart';
import 'api/types/monitored_item_create_result.dart';
import 'api/types/node_id.dart';
import 'api/types/status_code.dart';
import 'api/types/string.dart';
import 'api/types/variant.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMinimalInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.8.0';

  @override
  int get rustContentHash => -1852381319;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'opcua_ffi',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiTypesByteStringByteStringAsBase64({required ByteString that});

  ByteString? crateApiTypesByteStringByteStringFromBase64(
      {required String data});

  bool crateApiTypesByteStringByteStringIsEmpty({required ByteString that});

  bool crateApiTypesByteStringByteStringIsNull({required ByteString that});

  bool crateApiTypesByteStringByteStringIsNullOrEmpty(
      {required ByteString that});

  ByteString crateApiTypesByteStringByteStringNull();

  ByteString crateApiTypesByteStringByteStringSubstring(
      {required ByteString that, required BigInt min, required BigInt max});

  ClientBuilder crateApiMinimalClientBuilderApplicationName(
      {required ClientBuilder that, required String applicationName});

  ClientBuilder crateApiMinimalClientBuilderApplicationUri(
      {required ClientBuilder that, required String applicationUri});

  ClientBuilder crateApiMinimalClientBuilderCertificatePath(
      {required ClientBuilder that, required String certificatePath});

  Client crateApiMinimalClientBuilderClient({required ClientBuilder that});

  ClientBuilder crateApiMinimalClientBuilderCreateSampleKeypair(
      {required ClientBuilder that, required bool createSampleKeypair});

  ClientBuilder crateApiMinimalClientBuilderDefaultEndpoint(
      {required ClientBuilder that, required String defaultEndpoint});

  ClientBuilder crateApiMinimalClientBuilderEndpoint(
      {required ClientBuilder that,
      required String endpointId,
      required ClientEndpoint endpoint});

  ClientBuilder crateApiMinimalClientBuilderEndpoints(
      {required ClientBuilder that,
      required List<(String, ClientEndpoint)> endpoints});

  ClientBuilder crateApiMinimalClientBuilderFromConfig({required String path});

  ClientBuilder crateApiMinimalClientBuilderIgnoreClockSkew(
      {required ClientBuilder that});

  bool crateApiMinimalClientBuilderIsValid({required ClientBuilder that});

  ClientBuilder crateApiMinimalClientBuilderKeepAliveInterval(
      {required ClientBuilder that, required Duration keepAliveInterval});

  ClientBuilder crateApiMinimalClientBuilderMaxArrayLength(
      {required ClientBuilder that, required BigInt maxArrayLength});

  ClientBuilder crateApiMinimalClientBuilderMaxByteStringLength(
      {required ClientBuilder that, required BigInt maxByteStringLength});

  ClientBuilder crateApiMinimalClientBuilderMaxChunkCount(
      {required ClientBuilder that, required BigInt maxChunkCount});

  ClientBuilder crateApiMinimalClientBuilderMaxChunkSize(
      {required ClientBuilder that, required BigInt maxChunkSize});

  ClientBuilder crateApiMinimalClientBuilderMaxIncomingChunkSize(
      {required ClientBuilder that, required BigInt maxIncomingChunkSize});

  ClientBuilder crateApiMinimalClientBuilderMaxInflightMessages(
      {required ClientBuilder that, required BigInt maxInflightMessages});

  ClientBuilder crateApiMinimalClientBuilderMaxInflightPublish(
      {required ClientBuilder that, required BigInt maxInflightPublish});

  ClientBuilder crateApiMinimalClientBuilderMaxMessageSize(
      {required ClientBuilder that, required BigInt maxMessageSize});

  ClientBuilder crateApiMinimalClientBuilderMaxStringLength(
      {required ClientBuilder that, required BigInt maxStringLength});

  ClientBuilder crateApiMinimalClientBuilderMinPublishInterval(
      {required ClientBuilder that, required Duration minPublishInterval});

  ClientBuilder crateApiMinimalClientBuilderNew();

  ClientBuilder crateApiMinimalClientBuilderPkiDir(
      {required ClientBuilder that, required String pkiDir});

  ClientBuilder crateApiMinimalClientBuilderPreferredLocales(
      {required ClientBuilder that, required List<String> preferredLocales});

  ClientBuilder crateApiMinimalClientBuilderPrivateKeyPath(
      {required ClientBuilder that, required String privateKeyPath});

  ClientBuilder crateApiMinimalClientBuilderProductUri(
      {required ClientBuilder that, required String productUri});

  ClientBuilder crateApiMinimalClientBuilderPublishTimeout(
      {required ClientBuilder that, required Duration publishTimeout});

  ClientBuilder crateApiMinimalClientBuilderRecreateMonitoredItemsChunk(
      {required ClientBuilder that,
      required BigInt recreateMonitoredItemsChunk});

  ClientBuilder crateApiMinimalClientBuilderRequestTimeout(
      {required ClientBuilder that, required Duration requestTimeout});

  ClientBuilder crateApiMinimalClientBuilderSessionName(
      {required ClientBuilder that, required String sessionName});

  ClientBuilder crateApiMinimalClientBuilderSessionRetryInitial(
      {required ClientBuilder that, required Duration sessionRetryInitial});

  ClientBuilder crateApiMinimalClientBuilderSessionRetryLimit(
      {required ClientBuilder that, required int sessionRetryLimit});

  ClientBuilder crateApiMinimalClientBuilderSessionRetryMax(
      {required ClientBuilder that, required Duration sessionRetryMax});

  ClientBuilder crateApiMinimalClientBuilderSessionTimeout(
      {required ClientBuilder that, required int sessionTimeout});

  ClientBuilder crateApiMinimalClientBuilderTrustServerCerts(
      {required ClientBuilder that, required bool trustServerCerts});

  ClientBuilder crateApiMinimalClientBuilderUserToken(
      {required ClientBuilder that,
      required String userTokenId,
      required ClientUserToken userToken});

  ClientBuilder crateApiMinimalClientBuilderVerifyServerCerts(
      {required ClientBuilder that, required bool verifyServerCerts});

  ClientEndpoint crateApiMinimalClientEndpointNew({required String url});

  bool crateApiMinimalClientUserTokenIsValid({required ClientUserToken that});

  ClientUserToken crateApiMinimalClientUserTokenUserPass(
      {required String user, required String password});

  ClientUserToken crateApiMinimalClientUserTokenX509(
      {required String user,
      required String certPath,
      required String privateKeyPath});

  Future<(Session, SessionEventLoop)> crateApiMinimalClientConnectToEndpointId(
      {required Client that, String? endpointId});

  DataChangeCallback crateApiMinimalDataChangeCallbackNew(
      {required FutureOr<void> Function(DataValue, MonitoredItem) dataValue});

  int crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetMonitoredItemId(
      {required MonitoredItemCreateResult that});

  int crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedQueueSize(
      {required MonitoredItemCreateResult that});

  double
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedSamplingInterval(
          {required MonitoredItemCreateResult that});

  StatusCode
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetStatusCode(
          {required MonitoredItemCreateResult that});

  void
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetMonitoredItemId(
          {required MonitoredItemCreateResult that,
          required int monitoredItemId});

  void
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedQueueSize(
          {required MonitoredItemCreateResult that,
          required int revisedQueueSize});

  void
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedSamplingInterval(
          {required MonitoredItemCreateResult that,
          required double revisedSamplingInterval});

  void
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetStatusCode(
          {required MonitoredItemCreateResult that,
          required StatusCode statusCode});

  int crateApiTypesMonitoredItemMonitoredItemClientHandle(
      {required MonitoredItem that});

  bool crateApiTypesMonitoredItemMonitoredItemDiscardOldest(
      {required MonitoredItem that});

  int crateApiTypesMonitoredItemMonitoredItemId({required MonitoredItem that});

  BigInt crateApiTypesMonitoredItemMonitoredItemQueueSize(
      {required MonitoredItem that});

  double crateApiTypesMonitoredItemMonitoredItemSamplingInterval(
      {required MonitoredItem that});

  bool crateApiTypesNodeIdNodeIdIsByteString({required NodeId that});

  bool crateApiTypesNodeIdNodeIdIsGuid({required NodeId that});

  bool crateApiTypesNodeIdNodeIdIsNull({required NodeId that});

  bool crateApiTypesNodeIdNodeIdIsNumeric({required NodeId that});

  bool crateApiTypesNodeIdNodeIdIsString({required NodeId that});

  NodeId crateApiTypesNodeIdNodeIdNew(
      {required int namespace, required Identifier value});

  NodeId crateApiTypesNodeIdNodeIdNextNumeric({required int namespace});

  NodeId crateApiTypesNodeIdNodeIdNull();

  NodeId crateApiTypesNodeIdNodeIdObjectsFolderId();

  NodeId crateApiTypesNodeIdNodeIdRootFolderId();

  MonitoredItemCreateRequest
      crateApiTypesNodeIdNodeIdToMonitoredItemCreateRequest(
          {required NodeId that});

  NodeId crateApiTypesNodeIdNodeIdTypesFolderId();

  NodeId crateApiTypesNodeIdNodeIdViewsFolderId();

  Future<StatusCode> crateApiMinimalSessionEventLoopRun(
      {required SessionEventLoop that});

  Future<JoinHandleStatusCode> crateApiMinimalSessionEventLoopSpawn(
      {required SessionEventLoop that});

  Future<List<MonitoredItemCreateResult>>
      crateApiMinimalSessionCreateMonitoredItems(
          {required Session that,
          required int subscriptionId,
          required TimestampsToReturn timestampsToReturn,
          required List<MonitoredItemCreateRequest> itemsToCreate});

  Future<int> crateApiMinimalSessionCreateSubscriptionDataChange(
      {required Session that,
      required Duration publishingInterval,
      required int lifetimeCount,
      required int maxKeepAliveCount,
      required int maxNotificationsPerPublish,
      required int priority,
      required bool publishingEnabled,
      required DataChangeCallback callback});

  Future<void> crateApiMinimalSessionDisconnect({required Session that});

  int crateApiMinimalSessionSessionId({required Session that});

  Future<bool> crateApiMinimalSessionWaitForConnection({required Session that});

  String crateApiTypesStatusCodeStatusCodeDescription(
      {required StatusCode that});

  StatusCode? crateApiTypesStatusCodeStatusCodeFromStr({required String s});

  StatusCode? crateApiTypesStatusCodeStatusCodeFromU32({required int code});

  String crateApiTypesStatusCodeStatusCodeName({required StatusCode that});

  DateTime crateApiTypesDateTimeUaDateTimeAsChrono({required UaDateTime that});

  PlatformInt64 crateApiTypesDateTimeUaDateTimeCheckedTicks(
      {required UaDateTime that});

  UaDateTime crateApiTypesDateTimeUaDateTimeEndtimes();

  PlatformInt64 crateApiTypesDateTimeUaDateTimeEndtimesTicks();

  UaDateTime crateApiTypesDateTimeUaDateTimeEpoch();

  bool crateApiTypesDateTimeUaDateTimeIsNull({required UaDateTime that});

  UaDateTime crateApiTypesDateTimeUaDateTimeNow();

  UaDateTime crateApiTypesDateTimeUaDateTimeNowWithOffset(
      {required Duration offset});

  UaDateTime crateApiTypesDateTimeUaDateTimeNull();

  PlatformInt64 crateApiTypesDateTimeUaDateTimeTicks(
      {required UaDateTime that});

  String crateApiTypesDateTimeUaDateTimeToRfc3339({required UaDateTime that});

  UaDateTime crateApiTypesDateTimeUaDateTimeYmd(
      {required int year, required int month, required int day});

  UaDateTime crateApiTypesDateTimeUaDateTimeYmdHms(
      {required int year,
      required int month,
      required int day,
      required int hour,
      required int minute,
      required int second});

  UaDateTime crateApiTypesDateTimeUaDateTimeYmdHmsNano(
      {required int year,
      required int month,
      required int day,
      required int hour,
      required int minute,
      required int second,
      required int nanos});

  U8Array16 crateApiTypesGuidUaGuidAsBytes({required UaGuid that});

  Future<UaGuid> crateApiTypesGuidUaGuidFromBytes({required U8Array16 bytes});

  UaGuid crateApiTypesGuidUaGuidNew();

  UaGuid crateApiTypesGuidUaGuidNull();

  bool crateApiTypesStringUaStringIsEmpty({required UaString that});

  bool crateApiTypesStringUaStringIsNull({required UaString that});

  PlatformInt64 crateApiTypesStringUaStringLen({required UaString that});

  UaString crateApiTypesStringUaStringNew({required String value});

  UaString crateApiTypesStringUaStringNull();

  void crateApiTypesStringUaStringSetValue(
      {required UaString that, String? value});

  UaString crateApiTypesStringUaStringSubstring(
      {required UaString that, required BigInt min, required BigInt max});

  String? crateApiTypesStringUaStringValue({required UaString that});

  Future<void> crateApiMinimalDatachangecallback(
      {required DataChangeCallback a});

  Future<void> crateApiTypesDateTimeDatetime({required UaDateTime a});

  Future<void> crateApiTypesMonitoredItemMonitoreditem(
      {required MonitoredItem a});

  Future<void>
      crateApiTypesMonitoredItemCreateRequestMonitoreditemcreaterequest(
          {required MonitoredItemCreateRequest a});

  Future<void> crateApiTypesEnumsTimestampstoreturn(
      {required TimestampsToReturn a});

  Future<void> crateApiTypesByteStringWrapbytestring({required ByteString a});

  Future<void> crateApiTypesDataValueWrapdatavalue({required DataValue a});

  Future<void> crateApiTypesGuidWrapguid({required UaGuid a});

  Future<void> crateApiTypesNodeIdWrapidentifier({required Identifier a});

  Future<void> crateApiTypesNodeIdWrapnodeid({required NodeId a});

  Future<void> crateApiTypesStatusCodeWrapstatuscode({required StatusCode a});

  Future<void> crateApiTypesStringWrapuastring({required UaString a});

  Future<void> crateApiTypesVariantWrapvariant({required Variant a});

  Future<void> crateApiTypesStringWrapxmlelement({required UaString a});

  Identifier crateApiTypesNodeIdIdentifierFrom({required int v});

  Future<void> crateApiMinimalInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ByteString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ByteString;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ByteStringPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Client;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Client;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ClientBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientEndpoint;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientEndpoint;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ClientEndpointPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientUserToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientUserToken;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ClientUserTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataChangeCallback;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataChangeCallback;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DataChangeCallbackPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinHandleStatusCode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinHandleStatusCode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_JoinHandleStatusCodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MonitoredItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MonitoredItem;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MonitoredItemPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MonitoredItemCreateRequest;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MonitoredItemCreateRequest;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MonitoredItemCreateRequestPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MonitoredItemCreateResult;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MonitoredItemCreateResult;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MonitoredItemCreateResultPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_NodeId;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_NodeId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NodeIdPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Session;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Session;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SessionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SessionEventLoop;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SessionEventLoop;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SessionEventLoopPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusCode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusCode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_StatusCodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UaDateTime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UaDateTime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UaDateTimePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_UaGuid;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_UaGuid;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UaGuidPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UaString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UaString;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UaStringPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiTypesByteStringByteStringAsBase64({required ByteString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringByteStringAsBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringByteStringAsBase64ConstMeta =>
      const TaskConstMeta(
        debugName: "ByteString_as_base64",
        argNames: ["that"],
      );

  @override
  ByteString? crateApiTypesByteStringByteStringFromBase64(
      {required String data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringByteStringFromBase64ConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringByteStringFromBase64ConstMeta =>
      const TaskConstMeta(
        debugName: "ByteString_from_base64",
        argNames: ["data"],
      );

  @override
  bool crateApiTypesByteStringByteStringIsEmpty({required ByteString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringByteStringIsEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringByteStringIsEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "ByteString_is_empty",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesByteStringByteStringIsNull({required ByteString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringByteStringIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringByteStringIsNullConstMeta =>
      const TaskConstMeta(
        debugName: "ByteString_is_null",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesByteStringByteStringIsNullOrEmpty(
      {required ByteString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringByteStringIsNullOrEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringByteStringIsNullOrEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "ByteString_is_null_or_empty",
        argNames: ["that"],
      );

  @override
  ByteString crateApiTypesByteStringByteStringNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringByteStringNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringByteStringNullConstMeta =>
      const TaskConstMeta(
        debugName: "ByteString_null",
        argNames: [],
      );

  @override
  ByteString crateApiTypesByteStringByteStringSubstring(
      {required ByteString that, required BigInt min, required BigInt max}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            that, serializer);
        sse_encode_usize(min, serializer);
        sse_encode_usize(max, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTypesByteStringByteStringSubstringConstMeta,
      argValues: [that, min, max],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringByteStringSubstringConstMeta =>
      const TaskConstMeta(
        debugName: "ByteString_substring",
        argNames: ["that", "min", "max"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderApplicationName(
      {required ClientBuilder that, required String applicationName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(applicationName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderApplicationNameConstMeta,
      argValues: [that, applicationName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderApplicationNameConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_application_name",
        argNames: ["that", "applicationName"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderApplicationUri(
      {required ClientBuilder that, required String applicationUri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(applicationUri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderApplicationUriConstMeta,
      argValues: [that, applicationUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderApplicationUriConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_application_uri",
        argNames: ["that", "applicationUri"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderCertificatePath(
      {required ClientBuilder that, required String certificatePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(certificatePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderCertificatePathConstMeta,
      argValues: [that, certificatePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderCertificatePathConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_certificate_path",
        argNames: ["that", "certificatePath"],
      );

  @override
  Client crateApiMinimalClientBuilderClient({required ClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalClientBuilderClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderClientConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_client",
        argNames: ["that"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderCreateSampleKeypair(
      {required ClientBuilder that, required bool createSampleKeypair}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_bool(createSampleKeypair, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderCreateSampleKeypairConstMeta,
      argValues: [that, createSampleKeypair],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderCreateSampleKeypairConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_create_sample_keypair",
        argNames: ["that", "createSampleKeypair"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderDefaultEndpoint(
      {required ClientBuilder that, required String defaultEndpoint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(defaultEndpoint, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderDefaultEndpointConstMeta,
      argValues: [that, defaultEndpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderDefaultEndpointConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_default_endpoint",
        argNames: ["that", "defaultEndpoint"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderEndpoint(
      {required ClientBuilder that,
      required String endpointId,
      required ClientEndpoint endpoint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(endpointId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
            endpoint, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderEndpointConstMeta,
      argValues: [that, endpointId, endpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderEndpointConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_endpoint",
        argNames: ["that", "endpointId", "endpoint"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderEndpoints(
      {required ClientBuilder that,
      required List<(String, ClientEndpoint)> endpoints}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
            endpoints, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderEndpointsConstMeta,
      argValues: [that, endpoints],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderEndpointsConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_endpoints",
        argNames: ["that", "endpoints"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderFromConfig({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalClientBuilderFromConfigConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderFromConfigConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_from_config",
        argNames: ["path"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderIgnoreClockSkew(
      {required ClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderIgnoreClockSkewConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderIgnoreClockSkewConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_ignore_clock_skew",
        argNames: ["that"],
      );

  @override
  bool crateApiMinimalClientBuilderIsValid({required ClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderIsValidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderIsValidConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_is_valid",
        argNames: ["that"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderKeepAliveInterval(
      {required ClientBuilder that, required Duration keepAliveInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(keepAliveInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderKeepAliveIntervalConstMeta,
      argValues: [that, keepAliveInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderKeepAliveIntervalConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_keep_alive_interval",
        argNames: ["that", "keepAliveInterval"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxArrayLength(
      {required ClientBuilder that, required BigInt maxArrayLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxArrayLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxArrayLengthConstMeta,
      argValues: [that, maxArrayLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMaxArrayLengthConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_max_array_length",
        argNames: ["that", "maxArrayLength"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxByteStringLength(
      {required ClientBuilder that, required BigInt maxByteStringLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxByteStringLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxByteStringLengthConstMeta,
      argValues: [that, maxByteStringLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMaxByteStringLengthConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_max_byte_string_length",
        argNames: ["that", "maxByteStringLength"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxChunkCount(
      {required ClientBuilder that, required BigInt maxChunkCount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxChunkCount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxChunkCountConstMeta,
      argValues: [that, maxChunkCount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMaxChunkCountConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_max_chunk_count",
        argNames: ["that", "maxChunkCount"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxChunkSize(
      {required ClientBuilder that, required BigInt maxChunkSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxChunkSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxChunkSizeConstMeta,
      argValues: [that, maxChunkSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMaxChunkSizeConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_max_chunk_size",
        argNames: ["that", "maxChunkSize"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxIncomingChunkSize(
      {required ClientBuilder that, required BigInt maxIncomingChunkSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxIncomingChunkSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxIncomingChunkSizeConstMeta,
      argValues: [that, maxIncomingChunkSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientBuilderMaxIncomingChunkSizeConstMeta =>
          const TaskConstMeta(
            debugName: "ClientBuilder_max_incoming_chunk_size",
            argNames: ["that", "maxIncomingChunkSize"],
          );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxInflightMessages(
      {required ClientBuilder that, required BigInt maxInflightMessages}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxInflightMessages, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxInflightMessagesConstMeta,
      argValues: [that, maxInflightMessages],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMaxInflightMessagesConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_max_inflight_messages",
        argNames: ["that", "maxInflightMessages"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxInflightPublish(
      {required ClientBuilder that, required BigInt maxInflightPublish}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxInflightPublish, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxInflightPublishConstMeta,
      argValues: [that, maxInflightPublish],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMaxInflightPublishConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_max_inflight_publish",
        argNames: ["that", "maxInflightPublish"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxMessageSize(
      {required ClientBuilder that, required BigInt maxMessageSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxMessageSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxMessageSizeConstMeta,
      argValues: [that, maxMessageSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMaxMessageSizeConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_max_message_size",
        argNames: ["that", "maxMessageSize"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMaxStringLength(
      {required ClientBuilder that, required BigInt maxStringLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(maxStringLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMaxStringLengthConstMeta,
      argValues: [that, maxStringLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMaxStringLengthConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_max_string_length",
        argNames: ["that", "maxStringLength"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderMinPublishInterval(
      {required ClientBuilder that, required Duration minPublishInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(minPublishInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderMinPublishIntervalConstMeta,
      argValues: [that, minPublishInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderMinPublishIntervalConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_min_publish_interval",
        argNames: ["that", "minPublishInterval"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderNewConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_new",
        argNames: [],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderPkiDir(
      {required ClientBuilder that, required String pkiDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(pkiDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderPkiDirConstMeta,
      argValues: [that, pkiDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderPkiDirConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_pki_dir",
        argNames: ["that", "pkiDir"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderPreferredLocales(
      {required ClientBuilder that, required List<String> preferredLocales}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_list_String(preferredLocales, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderPreferredLocalesConstMeta,
      argValues: [that, preferredLocales],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderPreferredLocalesConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_preferred_locales",
        argNames: ["that", "preferredLocales"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderPrivateKeyPath(
      {required ClientBuilder that, required String privateKeyPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(privateKeyPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderPrivateKeyPathConstMeta,
      argValues: [that, privateKeyPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderPrivateKeyPathConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_private_key_path",
        argNames: ["that", "privateKeyPath"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderProductUri(
      {required ClientBuilder that, required String productUri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(productUri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderProductUriConstMeta,
      argValues: [that, productUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderProductUriConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_product_uri",
        argNames: ["that", "productUri"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderPublishTimeout(
      {required ClientBuilder that, required Duration publishTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(publishTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderPublishTimeoutConstMeta,
      argValues: [that, publishTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderPublishTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_publish_timeout",
        argNames: ["that", "publishTimeout"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderRecreateMonitoredItemsChunk(
      {required ClientBuilder that,
      required BigInt recreateMonitoredItemsChunk}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_usize(recreateMonitoredItemsChunk, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientBuilderRecreateMonitoredItemsChunkConstMeta,
      argValues: [that, recreateMonitoredItemsChunk],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientBuilderRecreateMonitoredItemsChunkConstMeta =>
          const TaskConstMeta(
            debugName: "ClientBuilder_recreate_monitored_items_chunk",
            argNames: ["that", "recreateMonitoredItemsChunk"],
          );

  @override
  ClientBuilder crateApiMinimalClientBuilderRequestTimeout(
      {required ClientBuilder that, required Duration requestTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(requestTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderRequestTimeoutConstMeta,
      argValues: [that, requestTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderRequestTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_request_timeout",
        argNames: ["that", "requestTimeout"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderSessionName(
      {required ClientBuilder that, required String sessionName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(sessionName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderSessionNameConstMeta,
      argValues: [that, sessionName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderSessionNameConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_session_name",
        argNames: ["that", "sessionName"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderSessionRetryInitial(
      {required ClientBuilder that, required Duration sessionRetryInitial}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(sessionRetryInitial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderSessionRetryInitialConstMeta,
      argValues: [that, sessionRetryInitial],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderSessionRetryInitialConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_session_retry_initial",
        argNames: ["that", "sessionRetryInitial"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderSessionRetryLimit(
      {required ClientBuilder that, required int sessionRetryLimit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_i_32(sessionRetryLimit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderSessionRetryLimitConstMeta,
      argValues: [that, sessionRetryLimit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderSessionRetryLimitConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_session_retry_limit",
        argNames: ["that", "sessionRetryLimit"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderSessionRetryMax(
      {required ClientBuilder that, required Duration sessionRetryMax}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(sessionRetryMax, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderSessionRetryMaxConstMeta,
      argValues: [that, sessionRetryMax],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderSessionRetryMaxConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_session_retry_max",
        argNames: ["that", "sessionRetryMax"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderSessionTimeout(
      {required ClientBuilder that, required int sessionTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_u_32(sessionTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderSessionTimeoutConstMeta,
      argValues: [that, sessionTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderSessionTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_session_timeout",
        argNames: ["that", "sessionTimeout"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderTrustServerCerts(
      {required ClientBuilder that, required bool trustServerCerts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_bool(trustServerCerts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderTrustServerCertsConstMeta,
      argValues: [that, trustServerCerts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderTrustServerCertsConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_trust_server_certs",
        argNames: ["that", "trustServerCerts"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderUserToken(
      {required ClientBuilder that,
      required String userTokenId,
      required ClientUserToken userToken}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_String(userTokenId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
            userToken, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderUserTokenConstMeta,
      argValues: [that, userTokenId, userToken],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderUserTokenConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_user_token",
        argNames: ["that", "userTokenId", "userToken"],
      );

  @override
  ClientBuilder crateApiMinimalClientBuilderVerifyServerCerts(
      {required ClientBuilder that, required bool verifyServerCerts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that, serializer);
        sse_encode_bool(verifyServerCerts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientBuilderVerifyServerCertsConstMeta,
      argValues: [that, verifyServerCerts],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientBuilderVerifyServerCertsConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_verify_server_certs",
        argNames: ["that", "verifyServerCerts"],
      );

  @override
  ClientEndpoint crateApiMinimalClientEndpointNew({required String url}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientEndpointNewConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientEndpointNewConstMeta =>
      const TaskConstMeta(
        debugName: "ClientEndpoint_new",
        argNames: ["url"],
      );

  @override
  bool crateApiMinimalClientUserTokenIsValid({required ClientUserToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientUserTokenIsValidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientUserTokenIsValidConstMeta =>
      const TaskConstMeta(
        debugName: "ClientUserToken_is_valid",
        argNames: ["that"],
      );

  @override
  ClientUserToken crateApiMinimalClientUserTokenUserPass(
      {required String user, required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientUserTokenUserPassConstMeta,
      argValues: [user, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientUserTokenUserPassConstMeta =>
      const TaskConstMeta(
        debugName: "ClientUserToken_user_pass",
        argNames: ["user", "password"],
      );

  @override
  ClientUserToken crateApiMinimalClientUserTokenX509(
      {required String user,
      required String certPath,
      required String privateKeyPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        sse_encode_String(certPath, serializer);
        sse_encode_String(privateKeyPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientUserTokenX509ConstMeta,
      argValues: [user, certPath, privateKeyPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientUserTokenX509ConstMeta =>
      const TaskConstMeta(
        debugName: "ClientUserToken_x509",
        argNames: ["user", "certPath", "privateKeyPath"],
      );

  @override
  Future<(Session, SessionEventLoop)> crateApiMinimalClientConnectToEndpointId(
      {required Client that, String? endpointId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that, serializer);
        sse_encode_opt_String(endpointId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_session_event_loop,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalClientConnectToEndpointIdConstMeta,
      argValues: [that, endpointId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientConnectToEndpointIdConstMeta =>
      const TaskConstMeta(
        debugName: "Client_connect_to_endpoint_id",
        argNames: ["that", "endpointId"],
      );

  @override
  DataChangeCallback crateApiMinimalDataChangeCallbackNew(
      {required FutureOr<void> Function(DataValue, MonitoredItem) dataValue}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem_Output_unit_AnyhowException(
            dataValue, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalDataChangeCallbackNewConstMeta,
      argValues: [dataValue],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalDataChangeCallbackNewConstMeta =>
      const TaskConstMeta(
        debugName: "DataChangeCallback_new",
        argNames: ["dataValue"],
      );

  @override
  int crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetMonitoredItemId(
      {required MonitoredItemCreateResult that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetMonitoredItemIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetMonitoredItemIdConstMeta =>
          const TaskConstMeta(
            debugName:
                "MonitoredItemCreateResult_auto_accessor_get_monitored_item_id",
            argNames: ["that"],
          );

  @override
  int crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedQueueSize(
      {required MonitoredItemCreateResult that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedQueueSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedQueueSizeConstMeta =>
          const TaskConstMeta(
            debugName:
                "MonitoredItemCreateResult_auto_accessor_get_revised_queue_size",
            argNames: ["that"],
          );

  @override
  double
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedSamplingInterval(
          {required MonitoredItemCreateResult that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedSamplingIntervalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedSamplingIntervalConstMeta =>
          const TaskConstMeta(
            debugName:
                "MonitoredItemCreateResult_auto_accessor_get_revised_sampling_interval",
            argNames: ["that"],
          );

  @override
  StatusCode
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetStatusCode(
          {required MonitoredItemCreateResult that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetStatusCodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetStatusCodeConstMeta =>
          const TaskConstMeta(
            debugName:
                "MonitoredItemCreateResult_auto_accessor_get_status_code",
            argNames: ["that"],
          );

  @override
  void
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetMonitoredItemId(
          {required MonitoredItemCreateResult that,
          required int monitoredItemId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
            that, serializer);
        sse_encode_u_32(monitoredItemId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetMonitoredItemIdConstMeta,
      argValues: [that, monitoredItemId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetMonitoredItemIdConstMeta =>
          const TaskConstMeta(
            debugName:
                "MonitoredItemCreateResult_auto_accessor_set_monitored_item_id",
            argNames: ["that", "monitoredItemId"],
          );

  @override
  void
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedQueueSize(
          {required MonitoredItemCreateResult that,
          required int revisedQueueSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
            that, serializer);
        sse_encode_u_32(revisedQueueSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedQueueSizeConstMeta,
      argValues: [that, revisedQueueSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedQueueSizeConstMeta =>
          const TaskConstMeta(
            debugName:
                "MonitoredItemCreateResult_auto_accessor_set_revised_queue_size",
            argNames: ["that", "revisedQueueSize"],
          );

  @override
  void
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedSamplingInterval(
          {required MonitoredItemCreateResult that,
          required double revisedSamplingInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
            that, serializer);
        sse_encode_f_64(revisedSamplingInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedSamplingIntervalConstMeta,
      argValues: [that, revisedSamplingInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedSamplingIntervalConstMeta =>
          const TaskConstMeta(
            debugName:
                "MonitoredItemCreateResult_auto_accessor_set_revised_sampling_interval",
            argNames: ["that", "revisedSamplingInterval"],
          );

  @override
  void
      crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetStatusCode(
          {required MonitoredItemCreateResult that,
          required StatusCode statusCode}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
            statusCode, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetStatusCodeConstMeta,
      argValues: [that, statusCode],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetStatusCodeConstMeta =>
          const TaskConstMeta(
            debugName:
                "MonitoredItemCreateResult_auto_accessor_set_status_code",
            argNames: ["that", "statusCode"],
          );

  @override
  int crateApiTypesMonitoredItemMonitoredItemClientHandle(
      {required MonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesMonitoredItemMonitoredItemClientHandleConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemMonitoredItemClientHandleConstMeta =>
          const TaskConstMeta(
            debugName: "MonitoredItem_client_handle",
            argNames: ["that"],
          );

  @override
  bool crateApiTypesMonitoredItemMonitoredItemDiscardOldest(
      {required MonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesMonitoredItemMonitoredItemDiscardOldestConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemMonitoredItemDiscardOldestConstMeta =>
          const TaskConstMeta(
            debugName: "MonitoredItem_discard_oldest",
            argNames: ["that"],
          );

  @override
  int crateApiTypesMonitoredItemMonitoredItemId({required MonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesMonitoredItemMonitoredItemIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesMonitoredItemMonitoredItemIdConstMeta =>
      const TaskConstMeta(
        debugName: "MonitoredItem_id",
        argNames: ["that"],
      );

  @override
  BigInt crateApiTypesMonitoredItemMonitoredItemQueueSize(
      {required MonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesMonitoredItemMonitoredItemQueueSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemMonitoredItemQueueSizeConstMeta =>
          const TaskConstMeta(
            debugName: "MonitoredItem_queue_size",
            argNames: ["that"],
          );

  @override
  double crateApiTypesMonitoredItemMonitoredItemSamplingInterval(
      {required MonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemMonitoredItemSamplingIntervalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemMonitoredItemSamplingIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "MonitoredItem_sampling_interval",
            argNames: ["that"],
          );

  @override
  bool crateApiTypesNodeIdNodeIdIsByteString({required NodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdIsByteStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdIsByteStringConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_is_byte_string",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesNodeIdNodeIdIsGuid({required NodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdIsGuidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdIsGuidConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_is_guid",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesNodeIdNodeIdIsNull({required NodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdIsNullConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_is_null",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesNodeIdNodeIdIsNumeric({required NodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdIsNumericConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdIsNumericConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_is_numeric",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesNodeIdNodeIdIsString({required NodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdIsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdIsStringConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_is_string",
        argNames: ["that"],
      );

  @override
  NodeId crateApiTypesNodeIdNodeIdNew(
      {required int namespace, required Identifier value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(namespace, serializer);
        sse_encode_box_autoadd_identifier(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 70)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdNewConstMeta,
      argValues: [namespace, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdNewConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_new",
        argNames: ["namespace", "value"],
      );

  @override
  NodeId crateApiTypesNodeIdNodeIdNextNumeric({required int namespace}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(namespace, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 71)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdNextNumericConstMeta,
      argValues: [namespace],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdNextNumericConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_next_numeric",
        argNames: ["namespace"],
      );

  @override
  NodeId crateApiTypesNodeIdNodeIdNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdNullConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_null",
        argNames: [],
      );

  @override
  NodeId crateApiTypesNodeIdNodeIdObjectsFolderId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 73)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdObjectsFolderIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdObjectsFolderIdConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_objects_folder_id",
        argNames: [],
      );

  @override
  NodeId crateApiTypesNodeIdNodeIdRootFolderId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdRootFolderIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdRootFolderIdConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_root_folder_id",
        argNames: [],
      );

  @override
  MonitoredItemCreateRequest
      crateApiTypesNodeIdNodeIdToMonitoredItemCreateRequest(
          {required NodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 75)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesNodeIdNodeIdToMonitoredItemCreateRequestConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesNodeIdNodeIdToMonitoredItemCreateRequestConstMeta =>
          const TaskConstMeta(
            debugName: "NodeId_to_monitored_item_create_request",
            argNames: ["that"],
          );

  @override
  NodeId crateApiTypesNodeIdNodeIdTypesFolderId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 76)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdTypesFolderIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdTypesFolderIdConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_types_folder_id",
        argNames: [],
      );

  @override
  NodeId crateApiTypesNodeIdNodeIdViewsFolderId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdNodeIdViewsFolderIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdNodeIdViewsFolderIdConstMeta =>
      const TaskConstMeta(
        debugName: "NodeId_views_folder_id",
        argNames: [],
      );

  @override
  Future<StatusCode> crateApiMinimalSessionEventLoopRun(
      {required SessionEventLoop that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 78, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalSessionEventLoopRunConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalSessionEventLoopRunConstMeta =>
      const TaskConstMeta(
        debugName: "SessionEventLoop_run",
        argNames: ["that"],
      );

  @override
  Future<JoinHandleStatusCode> crateApiMinimalSessionEventLoopSpawn(
      {required SessionEventLoop that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 79, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalSessionEventLoopSpawnConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalSessionEventLoopSpawnConstMeta =>
      const TaskConstMeta(
        debugName: "SessionEventLoop_spawn",
        argNames: ["that"],
      );

  @override
  Future<List<MonitoredItemCreateResult>>
      crateApiMinimalSessionCreateMonitoredItems(
          {required Session that,
          required int subscriptionId,
          required TimestampsToReturn timestampsToReturn,
          required List<MonitoredItemCreateRequest> itemsToCreate}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            that, serializer);
        sse_encode_u_32(subscriptionId, serializer);
        sse_encode_timestamps_to_return(timestampsToReturn, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
            itemsToCreate, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 80, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode,
      ),
      constMeta: kCrateApiMinimalSessionCreateMonitoredItemsConstMeta,
      argValues: [that, subscriptionId, timestampsToReturn, itemsToCreate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalSessionCreateMonitoredItemsConstMeta =>
      const TaskConstMeta(
        debugName: "Session_create_monitored_items",
        argNames: [
          "that",
          "subscriptionId",
          "timestampsToReturn",
          "itemsToCreate"
        ],
      );

  @override
  Future<int> crateApiMinimalSessionCreateSubscriptionDataChange(
      {required Session that,
      required Duration publishingInterval,
      required int lifetimeCount,
      required int maxKeepAliveCount,
      required int maxNotificationsPerPublish,
      required int priority,
      required bool publishingEnabled,
      required DataChangeCallback callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            that, serializer);
        sse_encode_Chrono_Duration(publishingInterval, serializer);
        sse_encode_u_32(lifetimeCount, serializer);
        sse_encode_u_32(maxKeepAliveCount, serializer);
        sse_encode_u_32(maxNotificationsPerPublish, serializer);
        sse_encode_u_8(priority, serializer);
        sse_encode_bool(publishingEnabled, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode,
      ),
      constMeta: kCrateApiMinimalSessionCreateSubscriptionDataChangeConstMeta,
      argValues: [
        that,
        publishingInterval,
        lifetimeCount,
        maxKeepAliveCount,
        maxNotificationsPerPublish,
        priority,
        publishingEnabled,
        callback
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalSessionCreateSubscriptionDataChangeConstMeta =>
          const TaskConstMeta(
            debugName: "Session_create_subscription_data_change",
            argNames: [
              "that",
              "publishingInterval",
              "lifetimeCount",
              "maxKeepAliveCount",
              "maxNotificationsPerPublish",
              "priority",
              "publishingEnabled",
              "callback"
            ],
          );

  @override
  Future<void> crateApiMinimalSessionDisconnect({required Session that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 82, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode,
      ),
      constMeta: kCrateApiMinimalSessionDisconnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalSessionDisconnectConstMeta =>
      const TaskConstMeta(
        debugName: "Session_disconnect",
        argNames: ["that"],
      );

  @override
  int crateApiMinimalSessionSessionId({required Session that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 83)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalSessionSessionIdConstMeta =>
      const TaskConstMeta(
        debugName: "Session_session_id",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiMinimalSessionWaitForConnection(
      {required Session that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 84, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalSessionWaitForConnectionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalSessionWaitForConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "Session_wait_for_connection",
        argNames: ["that"],
      );

  @override
  String crateApiTypesStatusCodeStatusCodeDescription(
      {required StatusCode that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 85)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeStatusCodeDescriptionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeStatusCodeDescriptionConstMeta =>
      const TaskConstMeta(
        debugName: "StatusCode_description",
        argNames: ["that"],
      );

  @override
  StatusCode? crateApiTypesStatusCodeStatusCodeFromStr({required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 86)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeStatusCodeFromStrConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeStatusCodeFromStrConstMeta =>
      const TaskConstMeta(
        debugName: "StatusCode_from_str",
        argNames: ["s"],
      );

  @override
  StatusCode? crateApiTypesStatusCodeStatusCodeFromU32({required int code}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(code, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 87)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeStatusCodeFromU32ConstMeta,
      argValues: [code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeStatusCodeFromU32ConstMeta =>
      const TaskConstMeta(
        debugName: "StatusCode_from_u32",
        argNames: ["code"],
      );

  @override
  String crateApiTypesStatusCodeStatusCodeName({required StatusCode that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 88)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeStatusCodeNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeStatusCodeNameConstMeta =>
      const TaskConstMeta(
        debugName: "StatusCode_name",
        argNames: ["that"],
      );

  @override
  DateTime crateApiTypesDateTimeUaDateTimeAsChrono({required UaDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 89)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeAsChronoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeAsChronoConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_as_chrono",
        argNames: ["that"],
      );

  @override
  PlatformInt64 crateApiTypesDateTimeUaDateTimeCheckedTicks(
      {required UaDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 90)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeCheckedTicksConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeCheckedTicksConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_checked_ticks",
        argNames: ["that"],
      );

  @override
  UaDateTime crateApiTypesDateTimeUaDateTimeEndtimes() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 91)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeEndtimesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeEndtimesConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_endtimes",
        argNames: [],
      );

  @override
  PlatformInt64 crateApiTypesDateTimeUaDateTimeEndtimesTicks() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 92)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeEndtimesTicksConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeEndtimesTicksConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_endtimes_ticks",
        argNames: [],
      );

  @override
  UaDateTime crateApiTypesDateTimeUaDateTimeEpoch() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 93)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeEpochConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeEpochConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_epoch",
        argNames: [],
      );

  @override
  bool crateApiTypesDateTimeUaDateTimeIsNull({required UaDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 94)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeIsNullConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_is_null",
        argNames: ["that"],
      );

  @override
  UaDateTime crateApiTypesDateTimeUaDateTimeNow() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 95)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeNowConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeNowConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_now",
        argNames: [],
      );

  @override
  UaDateTime crateApiTypesDateTimeUaDateTimeNowWithOffset(
      {required Duration offset}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Duration(offset, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 96)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeNowWithOffsetConstMeta,
      argValues: [offset],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeNowWithOffsetConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_now_with_offset",
        argNames: ["offset"],
      );

  @override
  UaDateTime crateApiTypesDateTimeUaDateTimeNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 97)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeNullConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_null",
        argNames: [],
      );

  @override
  PlatformInt64 crateApiTypesDateTimeUaDateTimeTicks(
      {required UaDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 98)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeTicksConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeTicksConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_ticks",
        argNames: ["that"],
      );

  @override
  String crateApiTypesDateTimeUaDateTimeToRfc3339({required UaDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 99)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeToRfc3339ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeToRfc3339ConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_to_rfc3339",
        argNames: ["that"],
      );

  @override
  UaDateTime crateApiTypesDateTimeUaDateTimeYmd(
      {required int year, required int month, required int day}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(year, serializer);
        sse_encode_u_16(month, serializer);
        sse_encode_u_16(day, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 100)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeYmdConstMeta,
      argValues: [year, month, day],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeYmdConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_ymd",
        argNames: ["year", "month", "day"],
      );

  @override
  UaDateTime crateApiTypesDateTimeUaDateTimeYmdHms(
      {required int year,
      required int month,
      required int day,
      required int hour,
      required int minute,
      required int second}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(year, serializer);
        sse_encode_u_16(month, serializer);
        sse_encode_u_16(day, serializer);
        sse_encode_u_16(hour, serializer);
        sse_encode_u_16(minute, serializer);
        sse_encode_u_16(second, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 101)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeYmdHmsConstMeta,
      argValues: [year, month, day, hour, minute, second],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeYmdHmsConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_ymd_hms",
        argNames: ["year", "month", "day", "hour", "minute", "second"],
      );

  @override
  UaDateTime crateApiTypesDateTimeUaDateTimeYmdHmsNano(
      {required int year,
      required int month,
      required int day,
      required int hour,
      required int minute,
      required int second,
      required int nanos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(year, serializer);
        sse_encode_u_16(month, serializer);
        sse_encode_u_16(day, serializer);
        sse_encode_u_16(hour, serializer);
        sse_encode_u_16(minute, serializer);
        sse_encode_u_16(second, serializer);
        sse_encode_u_32(nanos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 102)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeUaDateTimeYmdHmsNanoConstMeta,
      argValues: [year, month, day, hour, minute, second, nanos],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeUaDateTimeYmdHmsNanoConstMeta =>
      const TaskConstMeta(
        debugName: "UaDateTime_ymd_hms_nano",
        argNames: ["year", "month", "day", "hour", "minute", "second", "nanos"],
      );

  @override
  U8Array16 crateApiTypesGuidUaGuidAsBytes({required UaGuid that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 103)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidUaGuidAsBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidUaGuidAsBytesConstMeta =>
      const TaskConstMeta(
        debugName: "UaGuid_as_bytes",
        argNames: ["that"],
      );

  @override
  Future<UaGuid> crateApiTypesGuidUaGuidFromBytes({required U8Array16 bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_16(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 104, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidUaGuidFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidUaGuidFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "UaGuid_from_bytes",
        argNames: ["bytes"],
      );

  @override
  UaGuid crateApiTypesGuidUaGuidNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 105)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidUaGuidNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidUaGuidNewConstMeta => const TaskConstMeta(
        debugName: "UaGuid_new",
        argNames: [],
      );

  @override
  UaGuid crateApiTypesGuidUaGuidNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 106)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidUaGuidNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidUaGuidNullConstMeta =>
      const TaskConstMeta(
        debugName: "UaGuid_null",
        argNames: [],
      );

  @override
  bool crateApiTypesStringUaStringIsEmpty({required UaString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 107)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringUaStringIsEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringUaStringIsEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "UaString_is_empty",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesStringUaStringIsNull({required UaString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 108)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringUaStringIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringUaStringIsNullConstMeta =>
      const TaskConstMeta(
        debugName: "UaString_is_null",
        argNames: ["that"],
      );

  @override
  PlatformInt64 crateApiTypesStringUaStringLen({required UaString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 109)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringUaStringLenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringUaStringLenConstMeta =>
      const TaskConstMeta(
        debugName: "UaString_len",
        argNames: ["that"],
      );

  @override
  UaString crateApiTypesStringUaStringNew({required String value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 110)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringUaStringNewConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringUaStringNewConstMeta =>
      const TaskConstMeta(
        debugName: "UaString_new",
        argNames: ["value"],
      );

  @override
  UaString crateApiTypesStringUaStringNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 111)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringUaStringNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringUaStringNullConstMeta =>
      const TaskConstMeta(
        debugName: "UaString_null",
        argNames: [],
      );

  @override
  void crateApiTypesStringUaStringSetValue(
      {required UaString that, String? value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            that, serializer);
        sse_encode_opt_String(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 112)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringUaStringSetValueConstMeta,
      argValues: [that, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringUaStringSetValueConstMeta =>
      const TaskConstMeta(
        debugName: "UaString_set_value(dart_style=value)",
        argNames: ["that", "value"],
      );

  @override
  UaString crateApiTypesStringUaStringSubstring(
      {required UaString that, required BigInt min, required BigInt max}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            that, serializer);
        sse_encode_usize(min, serializer);
        sse_encode_usize(max, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 113)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTypesStringUaStringSubstringConstMeta,
      argValues: [that, min, max],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringUaStringSubstringConstMeta =>
      const TaskConstMeta(
        debugName: "UaString_substring",
        argNames: ["that", "min", "max"],
      );

  @override
  String? crateApiTypesStringUaStringValue({required UaString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 114)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringUaStringValueConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringUaStringValueConstMeta =>
      const TaskConstMeta(
        debugName: "UaString_value",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiMinimalDatachangecallback(
      {required DataChangeCallback a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 115, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalDatachangecallbackConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalDatachangecallbackConstMeta =>
      const TaskConstMeta(
        debugName: "_datachangecallback",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesDateTimeDatetime({required UaDateTime a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 116, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeDatetimeConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeDatetimeConstMeta =>
      const TaskConstMeta(
        debugName: "_datetime",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesMonitoredItemMonitoreditem(
      {required MonitoredItem a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 117, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesMonitoredItemMonitoreditemConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesMonitoredItemMonitoreditemConstMeta =>
      const TaskConstMeta(
        debugName: "_monitoreditem",
        argNames: ["a"],
      );

  @override
  Future<void>
      crateApiTypesMonitoredItemCreateRequestMonitoreditemcreaterequest(
          {required MonitoredItemCreateRequest a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 118, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateRequestMonitoreditemcreaterequestConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateRequestMonitoreditemcreaterequestConstMeta =>
          const TaskConstMeta(
            debugName: "_monitoreditemcreaterequest",
            argNames: ["a"],
          );

  @override
  Future<void> crateApiTypesEnumsTimestampstoreturn(
      {required TimestampsToReturn a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_timestamps_to_return(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 119, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesEnumsTimestampstoreturnConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesEnumsTimestampstoreturnConstMeta =>
      const TaskConstMeta(
        debugName: "_timestampstoreturn",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesByteStringWrapbytestring({required ByteString a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 120, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringWrapbytestringConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringWrapbytestringConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapbytestring",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesDataValueWrapdatavalue({required DataValue a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_data_value(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 121, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDataValueWrapdatavalueConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDataValueWrapdatavalueConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapdatavalue",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesGuidWrapguid({required UaGuid a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 122, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidWrapguidConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidWrapguidConstMeta => const TaskConstMeta(
        debugName: "_wrapguid",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesNodeIdWrapidentifier({required Identifier a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_identifier(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 123, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapidentifierConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapidentifierConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapidentifier",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesNodeIdWrapnodeid({required NodeId a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 124, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapnodeidConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapnodeidConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapnodeid",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesStatusCodeWrapstatuscode({required StatusCode a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 125, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeWrapstatuscodeConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeWrapstatuscodeConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapstatuscode",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesStringWrapuastring({required UaString a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 126, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapuastringConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapuastringConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapuastring",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesVariantWrapvariant({required Variant a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_variant(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 127, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesVariantWrapvariantConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesVariantWrapvariantConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapvariant",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesStringWrapxmlelement({required UaString a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 128, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapxmlelementConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapxmlelementConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapxmlelement",
        argNames: ["a"],
      );

  @override
  Identifier crateApiTypesNodeIdIdentifierFrom({required int v}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(v, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 129)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_identifier,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdIdentifierFromConstMeta,
      argValues: [v],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdIdentifierFromConstMeta =>
      const TaskConstMeta(
        debugName: "identifier_from",
        argNames: ["v"],
      );

  @override
  Future<void> crateApiMinimalInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 130, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem_Output_unit_AnyhowException(
          FutureOr<void> Function(DataValue, MonitoredItem) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_data_value(rawArg0);
      final arg1 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
              rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ByteString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ByteString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Client => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Client => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientEndpoint => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientEndpoint => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientUserToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientUserToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataChangeCallback => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataChangeCallback => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinHandleStatusCode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinHandleStatusCode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MonitoredItem => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MonitoredItem => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MonitoredItemCreateRequest => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MonitoredItemCreateRequest => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MonitoredItemCreateResult => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MonitoredItemCreateResult => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NodeId => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NodeId => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Session => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Session => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SessionEventLoop => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SessionEventLoop => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StatusCode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StatusCode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UaDateTime => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UaDateTime => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UaGuid => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UaGuid => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UaString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UaString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ByteString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ByteStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientEndpoint
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientUserToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DataChangeCallback
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataChangeCallbackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinHandleStatusCode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleStatusCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MonitoredItem
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MonitoredItemCreateRequest
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemCreateRequestImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MonitoredItemCreateResult
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemCreateResultImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NodeId
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NodeIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Session
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionEventLoop
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionEventLoopImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StatusCode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaDateTime
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaGuid
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaGuidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MonitoredItemCreateResult
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemCreateResultImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  Session
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaString
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ByteString
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ByteStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientUserToken
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MonitoredItem
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MonitoredItemCreateResult
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemCreateResultImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NodeId
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NodeIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Session
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaDateTime
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaGuid
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaGuidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaString
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  FutureOr<void> Function(DataValue, MonitoredItem)
      dco_decode_DartFn_Inputs_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  ByteString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ByteStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientEndpoint
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientUserToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DataChangeCallback
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataChangeCallbackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinHandleStatusCode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleStatusCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MonitoredItem
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MonitoredItemCreateRequest
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemCreateRequestImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  MonitoredItemCreateResult
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MonitoredItemCreateResultImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  NodeId
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NodeIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Session
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionEventLoop
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionEventLoopImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  StatusCode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StatusCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaDateTime
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaGuid
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaGuidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UaString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UaStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ByteString
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
        raw);
  }

  @protected
  StatusCode
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
        raw);
  }

  @protected
  UaDateTime
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
        raw);
  }

  @protected
  DataValue dco_decode_box_autoadd_data_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_data_value(raw);
  }

  @protected
  Identifier dco_decode_box_autoadd_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_identifier(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Variant dco_decode_box_autoadd_variant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_variant(raw);
  }

  @protected
  DataValue dco_decode_data_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return DataValue(
      value: dco_decode_opt_box_autoadd_variant(arr[0]),
      status:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
              arr[1]),
      sourceTimestamp:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
              arr[2]),
      sourcePicoseconds: dco_decode_opt_box_autoadd_u_16(arr[3]),
      serverTimestamp:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
              arr[4]),
      serverPicoseconds: dco_decode_opt_box_autoadd_u_16(arr[5]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  int dco_decode_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Identifier dco_decode_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Identifier_Numeric(
          dco_decode_u_32(raw[1]),
        );
      case 1:
        return Identifier_String(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
              raw[1]),
        );
      case 2:
        return Identifier_Guid(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
              raw[1]),
        );
      case 3:
        return Identifier_ByteString(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<MonitoredItemCreateRequest>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest)
        .toList();
  }

  @protected
  List<MonitoredItemCreateResult>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, ClientEndpoint)>
      dco_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint)
        .toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ByteString?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            raw);
  }

  @protected
  StatusCode?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
            raw);
  }

  @protected
  UaDateTime?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_16(raw);
  }

  @protected
  Variant? dco_decode_opt_box_autoadd_variant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_variant(raw);
  }

  @protected
  (
    Session,
    SessionEventLoop
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_session_event_loop(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
          arr[1]),
    );
  }

  @protected
  (
    String,
    ClientEndpoint
  ) dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
          arr[1]),
    );
  }

  @protected
  TimestampsToReturn dco_decode_timestamps_to_return(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TimestampsToReturn.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array16 dco_decode_u_8_array_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array16(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Variant dco_decode_variant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Variant_Empty();
      case 1:
        return Variant_Boolean(
          dco_decode_bool(raw[1]),
        );
      case 2:
        return Variant_SByte(
          dco_decode_i_8(raw[1]),
        );
      case 3:
        return Variant_Byte(
          dco_decode_u_8(raw[1]),
        );
      case 4:
        return Variant_Int16(
          dco_decode_i_16(raw[1]),
        );
      case 5:
        return Variant_UInt16(
          dco_decode_u_16(raw[1]),
        );
      case 6:
        return Variant_Int32(
          dco_decode_i_32(raw[1]),
        );
      case 7:
        return Variant_UInt32(
          dco_decode_u_32(raw[1]),
        );
      case 8:
        return Variant_Int64(
          dco_decode_i_64(raw[1]),
        );
      case 9:
        return Variant_UInt64(
          dco_decode_u_64(raw[1]),
        );
      case 10:
        return Variant_Float(
          dco_decode_f_32(raw[1]),
        );
      case 11:
        return Variant_Double(
          dco_decode_f_64(raw[1]),
        );
      case 12:
        return Variant_String(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
              raw[1]),
        );
      case 13:
        return Variant_DateTime(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
              raw[1]),
        );
      case 14:
        return Variant_Guid(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
              raw[1]),
        );
      case 15:
        return Variant_StatusCode(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
              raw[1]),
        );
      case 16:
        return Variant_ByteString(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
              raw[1]),
        );
      case 17:
        return Variant_XmlElement(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ByteString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ByteStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Client
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientEndpoint
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientEndpointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientUserToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DataChangeCallback
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DataChangeCallbackImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinHandleStatusCode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleStatusCodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItem
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItemCreateRequest
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemCreateRequestImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItemCreateResult
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemCreateResultImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NodeId
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NodeIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Session
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SessionEventLoop
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionEventLoopImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusCode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusCodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaDateTime
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaDateTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaGuid
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaGuidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Client
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItemCreateResult
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemCreateResultImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Session
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaString
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ByteString
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ByteStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientUserToken
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItem
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItemCreateResult
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemCreateResultImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NodeId
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NodeIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Session
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaDateTime
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaDateTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaGuid
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaGuidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaString
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner.toInt());
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ByteString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ByteStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Client
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientEndpoint
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientEndpointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientUserToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DataChangeCallback
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DataChangeCallbackImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinHandleStatusCode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleStatusCodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItem
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItemCreateRequest
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemCreateRequestImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MonitoredItemCreateResult
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MonitoredItemCreateResultImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NodeId
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NodeIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Session
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SessionEventLoop
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionEventLoopImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StatusCode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return StatusCodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaDateTime
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaDateTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaGuid
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaGuidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UaString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UaStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ByteString
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
        deserializer));
  }

  @protected
  StatusCode
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
        deserializer));
  }

  @protected
  UaDateTime
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
        deserializer));
  }

  @protected
  DataValue sse_decode_box_autoadd_data_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_data_value(deserializer));
  }

  @protected
  Identifier sse_decode_box_autoadd_identifier(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_identifier(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_16(deserializer));
  }

  @protected
  Variant sse_decode_box_autoadd_variant(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_variant(deserializer));
  }

  @protected
  DataValue sse_decode_data_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_opt_box_autoadd_variant(deserializer);
    var var_status =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
            deserializer);
    var var_sourceTimestamp =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            deserializer);
    var var_sourcePicoseconds = sse_decode_opt_box_autoadd_u_16(deserializer);
    var var_serverTimestamp =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            deserializer);
    var var_serverPicoseconds = sse_decode_opt_box_autoadd_u_16(deserializer);
    return DataValue(
        value: var_value,
        status: var_status,
        sourceTimestamp: var_sourceTimestamp,
        sourcePicoseconds: var_sourcePicoseconds,
        serverTimestamp: var_serverTimestamp,
        serverPicoseconds: var_serverPicoseconds);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt8();
  }

  @protected
  Identifier sse_decode_identifier(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_u_32(deserializer);
        return Identifier_Numeric(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
                deserializer);
        return Identifier_String(var_field0);
      case 2:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
                deserializer);
        return Identifier_Guid(var_field0);
      case 3:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
                deserializer);
        return Identifier_ByteString(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<MonitoredItemCreateRequest>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MonitoredItemCreateRequest>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<MonitoredItemCreateResult>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MonitoredItemCreateResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, ClientEndpoint)>
      sse_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, ClientEndpoint)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
              deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ByteString?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  StatusCode?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  UaDateTime?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Variant? sse_decode_opt_box_autoadd_variant(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_variant(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (
    Session,
    SessionEventLoop
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_session_event_loop(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    String,
    ClientEndpoint
  ) sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  TimestampsToReturn sse_decode_timestamps_to_return(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TimestampsToReturn.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array16 sse_decode_u_8_array_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array16(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  Variant sse_decode_variant(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return Variant_Empty();
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return Variant_Boolean(var_field0);
      case 2:
        var var_field0 = sse_decode_i_8(deserializer);
        return Variant_SByte(var_field0);
      case 3:
        var var_field0 = sse_decode_u_8(deserializer);
        return Variant_Byte(var_field0);
      case 4:
        var var_field0 = sse_decode_i_16(deserializer);
        return Variant_Int16(var_field0);
      case 5:
        var var_field0 = sse_decode_u_16(deserializer);
        return Variant_UInt16(var_field0);
      case 6:
        var var_field0 = sse_decode_i_32(deserializer);
        return Variant_Int32(var_field0);
      case 7:
        var var_field0 = sse_decode_u_32(deserializer);
        return Variant_UInt32(var_field0);
      case 8:
        var var_field0 = sse_decode_i_64(deserializer);
        return Variant_Int64(var_field0);
      case 9:
        var var_field0 = sse_decode_u_64(deserializer);
        return Variant_UInt64(var_field0);
      case 10:
        var var_field0 = sse_decode_f_32(deserializer);
        return Variant_Float(var_field0);
      case 11:
        var var_field0 = sse_decode_f_64(deserializer);
        return Variant_Double(var_field0);
      case 12:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
                deserializer);
        return Variant_String(var_field0);
      case 13:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
                deserializer);
        return Variant_DateTime(var_field0);
      case 14:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
                deserializer);
        return Variant_Guid(var_field0);
      case 15:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
                deserializer);
        return Variant_StatusCode(var_field0);
      case 16:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
                deserializer);
        return Variant_ByteString(var_field0);
      case 17:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
                deserializer);
        return Variant_XmlElement(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          ByteString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ByteStringImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
          ClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientEndpointImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          ClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientUserTokenImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          DataChangeCallback self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DataChangeCallbackImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode(
          JoinHandleStatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinHandleStatusCodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          MonitoredItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          MonitoredItemCreateRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemCreateRequestImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          MonitoredItemCreateResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemCreateResultImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          NodeId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NodeIdImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          Session self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
          SessionEventLoop self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionEventLoopImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          StatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusCodeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          UaDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaDateTimeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          UaGuid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaGuidImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          UaString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaStringImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          MonitoredItemCreateResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemCreateResultImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          Session self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          UaString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaStringImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          ByteString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ByteStringImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          ClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientUserTokenImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          MonitoredItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          MonitoredItemCreateResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemCreateResultImpl)
            .frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          NodeId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NodeIdImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          Session self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          UaDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaDateTimeImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          UaGuid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaGuidImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          UaString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaStringImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.inMicroseconds), serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem_Output_unit_AnyhowException(
          FutureOr<void> Function(DataValue, MonitoredItem) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
        PlatformPointerUtil.ptrToPlatformInt64(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          ByteString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ByteStringImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
          Client self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
          ClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
          ClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientEndpointImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientUserToken(
          ClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientUserTokenImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          DataChangeCallback self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DataChangeCallbackImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleStatusCode(
          JoinHandleStatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinHandleStatusCodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItem(
          MonitoredItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          MonitoredItemCreateRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemCreateRequestImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          MonitoredItemCreateResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MonitoredItemCreateResultImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNodeId(
          NodeId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NodeIdImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
          Session self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
          SessionEventLoop self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionEventLoopImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          StatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as StatusCodeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          UaDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaDateTimeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
          UaGuid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaGuidImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
          UaString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UaStringImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          ByteString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          StatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          UaDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_data_value(
      DataValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_data_value(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_identifier(
      Identifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_identifier(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_variant(Variant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_variant(self, serializer);
  }

  @protected
  void sse_encode_data_value(DataValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_variant(self.value, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
        self.status, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
        self.sourceTimestamp, serializer);
    sse_encode_opt_box_autoadd_u_16(self.sourcePicoseconds, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
        self.serverTimestamp, serializer);
    sse_encode_opt_box_autoadd_u_16(self.serverPicoseconds, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt8(self);
  }

  @protected
  void sse_encode_identifier(Identifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Identifier_Numeric(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_u_32(field0, serializer);
      case Identifier_String(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            field0, serializer);
      case Identifier_Guid(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
            field0, serializer);
      case Identifier_ByteString(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          List<MonitoredItemCreateRequest> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateRequest(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          List<MonitoredItemCreateResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMonitoredItemCreateResult(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
          List<(String, ClientEndpoint)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
          item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          ByteString? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          StatusCode? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          UaDateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_variant(
      Variant? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_variant(self, serializer);
    }
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_session_event_loop(
          (Session, SessionEventLoop) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSession(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionEventLoop(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_client_endpoint(
          (String, ClientEndpoint) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientEndpoint(
        self.$2, serializer);
  }

  @protected
  void sse_encode_timestamps_to_return(
      TimestampsToReturn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_16(U8Array16 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_variant(Variant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Variant_Empty():
        sse_encode_i_32(0, serializer);
      case Variant_Boolean(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
      case Variant_SByte(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_i_8(field0, serializer);
      case Variant_Byte(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_u_8(field0, serializer);
      case Variant_Int16(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_i_16(field0, serializer);
      case Variant_UInt16(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_u_16(field0, serializer);
      case Variant_Int32(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_i_32(field0, serializer);
      case Variant_UInt32(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_u_32(field0, serializer);
      case Variant_Int64(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_i_64(field0, serializer);
      case Variant_UInt64(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_u_64(field0, serializer);
      case Variant_Float(field0: final field0):
        sse_encode_i_32(10, serializer);
        sse_encode_f_32(field0, serializer);
      case Variant_Double(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_f_64(field0, serializer);
      case Variant_String(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            field0, serializer);
      case Variant_DateTime(field0: final field0):
        sse_encode_i_32(13, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUADateTime(
            field0, serializer);
      case Variant_Guid(field0: final field0):
        sse_encode_i_32(14, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAGuid(
            field0, serializer);
      case Variant_StatusCode(field0: final field0):
        sse_encode_i_32(15, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerStatusCode(
            field0, serializer);
      case Variant_ByteString(field0: final field0):
        sse_encode_i_32(16, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerByteString(
            field0, serializer);
      case Variant_XmlElement(field0: final field0):
        sse_encode_i_32(17, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUAString(
            field0, serializer);
    }
  }
}

@sealed
class ByteStringImpl extends RustOpaque implements ByteString {
  // Not to be used by end users
  ByteStringImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ByteStringImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ByteString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ByteString,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ByteStringPtr,
  );

  /// Encodes the bytestring as a Base64 encoded string
  String asBase64() =>
      RustLib.instance.api.crateApiTypesByteStringByteStringAsBase64(
        that: this,
      );

  bool isEmpty() =>
      RustLib.instance.api.crateApiTypesByteStringByteStringIsEmpty(
        that: this,
      );

  /// Test if the string is null
  bool isNull() => RustLib.instance.api.crateApiTypesByteStringByteStringIsNull(
        that: this,
      );

  /// Test if the string is null or empty
  bool isNullOrEmpty() =>
      RustLib.instance.api.crateApiTypesByteStringByteStringIsNullOrEmpty(
        that: this,
      );

  /// This function is meant for use with NumericRange. It creates a substring from this string
  /// from min up to and inclusive of max. Note that min must have an index within the string
  /// but max is allowed to be beyond the end in which case the remainder of the string is
  /// returned (see docs for NumericRange).
  ByteString substring({required BigInt min, required BigInt max}) =>
      RustLib.instance.api.crateApiTypesByteStringByteStringSubstring(
          that: this, min: min, max: max);
}

@sealed
class ClientBuilderImpl extends RustOpaque implements ClientBuilder {
  // Not to be used by end users
  ClientBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ClientBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientBuilder,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientBuilderPtr,
  );

  /// Sets the application name.
  ClientBuilder applicationName(String applicationName) =>
      RustLib.instance.api.crateApiMinimalClientBuilderApplicationName(
          that: this, applicationName: applicationName);

  /// Sets the application uri.
  ClientBuilder applicationUri(String applicationUri) =>
      RustLib.instance.api.crateApiMinimalClientBuilderApplicationUri(
          that: this, applicationUri: applicationUri);

  /// Sets a custom client certificate path. The path is required to be provided as a partial
  /// path relative to the PKI directory. If set, this path will be used to read the client
  /// certificate from disk. The certificate can be in either the .der or .pem format.
  ClientBuilder certificatePath(String certificatePath) =>
      RustLib.instance.api.crateApiMinimalClientBuilderCertificatePath(
          that: this, certificatePath: certificatePath);

  /// Yields a [`Client`] from the values set by the builder. If the builder is not in a valid state
  /// it will return `None`.
  ///
  /// [`Client`]: client/struct.Client.html
  Client client() => RustLib.instance.api.crateApiMinimalClientBuilderClient(
        that: this,
      );

  /// Sets whether the client should generate its own key pair if there is none found in the pki
  /// directory.
  ClientBuilder createSampleKeypair(bool createSampleKeypair) =>
      RustLib.instance.api.crateApiMinimalClientBuilderCreateSampleKeypair(
          that: this, createSampleKeypair: createSampleKeypair);

  /// Sets the id of the default endpoint to connect to.
  ClientBuilder defaultEndpoint(String defaultEndpoint) =>
      RustLib.instance.api.crateApiMinimalClientBuilderDefaultEndpoint(
          that: this, defaultEndpoint: defaultEndpoint);

  /// Adds an endpoint to the list of endpoints the client knows of.
  ClientBuilder endpoint(
          {required String endpointId, required ClientEndpoint endpoint}) =>
      RustLib.instance.api.crateApiMinimalClientBuilderEndpoint(
          that: this, endpointId: endpointId, endpoint: endpoint);

  /// Adds multiple endpoints to the list of endpoints the client knows of.
  ClientBuilder endpoints(List<(String, ClientEndpoint)> endpoints) => RustLib
      .instance.api
      .crateApiMinimalClientBuilderEndpoints(that: this, endpoints: endpoints);

  /// Sets whether the client should ignore clock skew so the client can make a successful
  /// connection to the server, even when the client and server clocks are out of sync.
  ClientBuilder ignoreClockSkew() =>
      RustLib.instance.api.crateApiMinimalClientBuilderIgnoreClockSkew(
        that: this,
      );

  bool isValid() => RustLib.instance.api.crateApiMinimalClientBuilderIsValid(
        that: this,
      );

  /// Time between making simple Read requests to the server to check for liveness
  /// and avoid session timeouts.
  ClientBuilder keepAliveInterval(Duration keepAliveInterval) =>
      RustLib.instance.api.crateApiMinimalClientBuilderKeepAliveInterval(
          that: this, keepAliveInterval: keepAliveInterval);

  /// Maximum number of array elements. 0 actually means 0, i.e. no array permitted
  ClientBuilder maxArrayLength(BigInt maxArrayLength) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxArrayLength(
          that: this, maxArrayLength: maxArrayLength);

  /// Maximum length in bytes of a byte string. 0 actually means 0, i.e. no byte strings permitted.
  ClientBuilder maxByteStringLength(BigInt maxByteStringLength) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxByteStringLength(
          that: this, maxByteStringLength: maxByteStringLength);

  /// Sets the maximum number of chunks in an outgoing message. 0 means no limit.
  ClientBuilder maxChunkCount(BigInt maxChunkCount) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxChunkCount(
          that: this, maxChunkCount: maxChunkCount);

  /// Maximum size of each individual outgoing message chunk.
  ClientBuilder maxChunkSize(BigInt maxChunkSize) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxChunkSize(
          that: this, maxChunkSize: maxChunkSize);

  /// Maximum size of each incoming chunk.
  ClientBuilder maxIncomingChunkSize(BigInt maxIncomingChunkSize) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxIncomingChunkSize(
          that: this, maxIncomingChunkSize: maxIncomingChunkSize);

  /// Maximum number of inflight messages.
  ClientBuilder maxInflightMessages(BigInt maxInflightMessages) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxInflightMessages(
          that: this, maxInflightMessages: maxInflightMessages);

  /// Maximum number of pending publish requests.
  ClientBuilder maxInflightPublish(BigInt maxInflightPublish) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxInflightPublish(
          that: this, maxInflightPublish: maxInflightPublish);

  /// Sets the maximum outgoing message size in bytes. 0 means no limit.
  ClientBuilder maxMessageSize(BigInt maxMessageSize) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxMessageSize(
          that: this, maxMessageSize: maxMessageSize);

  /// Maximum length in bytes of a string. 0 actually means 0, i.e. no string permitted.
  ClientBuilder maxStringLength(BigInt maxStringLength) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMaxStringLength(
          that: this, maxStringLength: maxStringLength);

  /// Set the lowest allowed publishing interval by the client.
  /// The server may also enforce its own minimum.
  ClientBuilder minPublishInterval(Duration minPublishInterval) =>
      RustLib.instance.api.crateApiMinimalClientBuilderMinPublishInterval(
          that: this, minPublishInterval: minPublishInterval);

  /// Sets the pki directory where client's own key pair is stored and where `/trusted` and
  /// `/rejected` server certificates are stored.
  ClientBuilder pkiDir(String pkiDir) => RustLib.instance.api
      .crateApiMinimalClientBuilderPkiDir(that: this, pkiDir: pkiDir);

  /// Sets the preferred locales of the client. These are passed to the server during session
  /// creation to ensure localized strings are in the preferred language.
  ClientBuilder preferredLocales(List<String> preferredLocales) =>
      RustLib.instance.api.crateApiMinimalClientBuilderPreferredLocales(
          that: this, preferredLocales: preferredLocales);

  /// Sets a custom private key path. The path is required to be provided as a partial path
  /// relative to the PKI directory. If set, this path will be used to read the private key
  /// from disk.
  ClientBuilder privateKeyPath(String privateKeyPath) =>
      RustLib.instance.api.crateApiMinimalClientBuilderPrivateKeyPath(
          that: this, privateKeyPath: privateKeyPath);

  /// Sets the product uri.
  ClientBuilder productUri(String productUri) =>
      RustLib.instance.api.crateApiMinimalClientBuilderProductUri(
          that: this, productUri: productUri);

  /// Set the timeout on publish requests sent to the server.
  ClientBuilder publishTimeout(Duration publishTimeout) =>
      RustLib.instance.api.crateApiMinimalClientBuilderPublishTimeout(
          that: this, publishTimeout: publishTimeout);

  /// When a session is recreated on the server, the client will attempt to
  /// transfer monitored subscriptions from the old session to the new.
  /// This is the maximum number of monitored items to create per request.
  ClientBuilder recreateMonitoredItemsChunk(
          BigInt recreateMonitoredItemsChunk) =>
      RustLib.instance.api
          .crateApiMinimalClientBuilderRecreateMonitoredItemsChunk(
              that: this,
              recreateMonitoredItemsChunk: recreateMonitoredItemsChunk);

  /// Set the timeout on requests sent to the server.
  ClientBuilder requestTimeout(Duration requestTimeout) =>
      RustLib.instance.api.crateApiMinimalClientBuilderRequestTimeout(
          that: this, requestTimeout: requestTimeout);

  /// Session name - the default name to use for a new session
  ClientBuilder sessionName(String sessionName) =>
      RustLib.instance.api.crateApiMinimalClientBuilderSessionName(
          that: this, sessionName: sessionName);

  /// Initial time between retries when backing off on session reconnects.
  ClientBuilder sessionRetryInitial(Duration sessionRetryInitial) =>
      RustLib.instance.api.crateApiMinimalClientBuilderSessionRetryInitial(
          that: this, sessionRetryInitial: sessionRetryInitial);

  /// Sets the session retry limit.
  ///
  /// # Panics
  ///
  /// Panics if `session_retry_limit` is less -1.
  ClientBuilder sessionRetryLimit(int sessionRetryLimit) =>
      RustLib.instance.api.crateApiMinimalClientBuilderSessionRetryLimit(
          that: this, sessionRetryLimit: sessionRetryLimit);

  /// Maximum time between retries when backing off on session reconnects.
  ClientBuilder sessionRetryMax(Duration sessionRetryMax) =>
      RustLib.instance.api.crateApiMinimalClientBuilderSessionRetryMax(
          that: this, sessionRetryMax: sessionRetryMax);

  /// Sets the session timeout period, in milliseconds.
  ClientBuilder sessionTimeout(int sessionTimeout) =>
      RustLib.instance.api.crateApiMinimalClientBuilderSessionTimeout(
          that: this, sessionTimeout: sessionTimeout);

  /// Sets whether the client should automatically trust servers. If this is not set then
  /// the client will reject the server upon first connect and the server's certificate
  /// must be manually moved from pki's `/rejected` folder to the `/trusted` folder. If it is
  /// set, then the server cert will automatically be stored in the `/trusted` folder.
  ClientBuilder trustServerCerts(bool trustServerCerts) =>
      RustLib.instance.api.crateApiMinimalClientBuilderTrustServerCerts(
          that: this, trustServerCerts: trustServerCerts);

  /// Adds a user token to the list supported by the client.
  ClientBuilder userToken(String userTokenId, ClientUserToken userToken) =>
      RustLib.instance.api.crateApiMinimalClientBuilderUserToken(
          that: this, userTokenId: userTokenId, userToken: userToken);

  /// Sets whether the client should verify server certificates. Regardless of this setting,
  /// server certificates are always checked to see if they are trusted and have a valid key
  /// length. In addition (if `verify_server_certs` is unset or is set to `true`) it will
  /// verify the hostname, application uri and the not before / after values to ensure validity.
  ClientBuilder verifyServerCerts(bool verifyServerCerts) =>
      RustLib.instance.api.crateApiMinimalClientBuilderVerifyServerCerts(
          that: this, verifyServerCerts: verifyServerCerts);
}

@sealed
class ClientEndpointImpl extends RustOpaque implements ClientEndpoint {
  // Not to be used by end users
  ClientEndpointImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientEndpointImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ClientEndpoint,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientEndpoint,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientEndpointPtr,
  );
}

@sealed
class ClientImpl extends RustOpaque implements Client {
  // Not to be used by end users
  ClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Client,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Client,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientPtr,
  );

  /// Connects to a named endpoint that you have defined in the `ClientConfig`
  /// and creates a [`Session`] for that endpoint. Note that `GetEndpoints` is first
  /// called on the server and it is expected to support the endpoint you intend to connect to.
  ///
  /// # Returns
  ///
  /// * `Ok((Arc<AsyncSession>, SessionEventLoop))` - Session and event loop.
  /// * `Err(StatusCode)` - Request failed, [Status code](StatusCode) is the reason for failure.
  ///
  Future<(Session, SessionEventLoop)> connectToEndpointId(
          {String? endpointId}) =>
      RustLib.instance.api.crateApiMinimalClientConnectToEndpointId(
          that: this, endpointId: endpointId);
}

@sealed
class ClientUserTokenImpl extends RustOpaque implements ClientUserToken {
  // Not to be used by end users
  ClientUserTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientUserTokenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ClientUserToken,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientUserToken,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientUserTokenPtr,
  );

  bool isValid() => RustLib.instance.api.crateApiMinimalClientUserTokenIsValid(
        that: this,
      );
}

@sealed
class DataChangeCallbackImpl extends RustOpaque implements DataChangeCallback {
  // Not to be used by end users
  DataChangeCallbackImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DataChangeCallbackImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DataChangeCallback,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DataChangeCallback,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DataChangeCallbackPtr,
  );
}

@sealed
class JoinHandleStatusCodeImpl extends RustOpaque
    implements JoinHandleStatusCode {
  // Not to be used by end users
  JoinHandleStatusCodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JoinHandleStatusCodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_JoinHandleStatusCode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_JoinHandleStatusCode,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_JoinHandleStatusCodePtr,
  );
}

@sealed
class MonitoredItemCreateRequestImpl extends RustOpaque
    implements MonitoredItemCreateRequest {
  // Not to be used by end users
  MonitoredItemCreateRequestImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MonitoredItemCreateRequestImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_MonitoredItemCreateRequest,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_MonitoredItemCreateRequest,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MonitoredItemCreateRequestPtr,
  );
}

@sealed
class MonitoredItemCreateResultImpl extends RustOpaque
    implements MonitoredItemCreateResult {
  // Not to be used by end users
  MonitoredItemCreateResultImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MonitoredItemCreateResultImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_MonitoredItemCreateResult,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_MonitoredItemCreateResult,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_MonitoredItemCreateResultPtr,
  );

  int get monitoredItemId => RustLib.instance.api
          .crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetMonitoredItemId(
        that: this,
      );

  int get revisedQueueSize => RustLib.instance.api
          .crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedQueueSize(
        that: this,
      );

  double get revisedSamplingInterval => RustLib.instance.api
          .crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetRevisedSamplingInterval(
        that: this,
      );

  StatusCode get statusCode => RustLib.instance.api
          .crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorGetStatusCode(
        that: this,
      );

  set monitoredItemId(int monitoredItemId) => RustLib.instance.api
      .crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetMonitoredItemId(
          that: this, monitoredItemId: monitoredItemId);

  set revisedQueueSize(int revisedQueueSize) => RustLib.instance.api
      .crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedQueueSize(
          that: this, revisedQueueSize: revisedQueueSize);

  set revisedSamplingInterval(double revisedSamplingInterval) => RustLib
      .instance.api
      .crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetRevisedSamplingInterval(
          that: this, revisedSamplingInterval: revisedSamplingInterval);

  set statusCode(StatusCode statusCode) => RustLib.instance.api
      .crateApiTypesMonitoredItemCreateResultMonitoredItemCreateResultAutoAccessorSetStatusCode(
          that: this, statusCode: statusCode);
}

@sealed
class MonitoredItemImpl extends RustOpaque implements MonitoredItem {
  // Not to be used by end users
  MonitoredItemImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MonitoredItemImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MonitoredItem,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MonitoredItem,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MonitoredItemPtr,
  );

  /// Client assigned handle for the monitored item.
  int clientHandle() =>
      RustLib.instance.api.crateApiTypesMonitoredItemMonitoredItemClientHandle(
        that: this,
      );

  /// Whether the oldest values are discarded on queue overflow on the server.
  bool discardOldest() =>
      RustLib.instance.api.crateApiTypesMonitoredItemMonitoredItemDiscardOldest(
        that: this,
      );

  /// Server assigned ID of the monitored item.
  int id() => RustLib.instance.api.crateApiTypesMonitoredItemMonitoredItemId(
        that: this,
      );

  /// Queue size on the server.
  BigInt queueSize() =>
      RustLib.instance.api.crateApiTypesMonitoredItemMonitoredItemQueueSize(
        that: this,
      );

  /// Sampling interval.
  double samplingInterval() => RustLib.instance.api
          .crateApiTypesMonitoredItemMonitoredItemSamplingInterval(
        that: this,
      );
}

@sealed
class NodeIdImpl extends RustOpaque implements NodeId {
  // Not to be used by end users
  NodeIdImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NodeIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NodeId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NodeId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NodeIdPtr,
  );

  /// Test if the node id us a byte string
  bool isByteString() =>
      RustLib.instance.api.crateApiTypesNodeIdNodeIdIsByteString(
        that: this,
      );

  /// Test if the node id is a guid
  bool isGuid() => RustLib.instance.api.crateApiTypesNodeIdNodeIdIsGuid(
        that: this,
      );

  /// Test if the node id is null, i.e. 0 namespace and 0 identifier
  bool isNull() => RustLib.instance.api.crateApiTypesNodeIdNodeIdIsNull(
        that: this,
      );

  /// Test if the node id is numeric
  bool isNumeric() => RustLib.instance.api.crateApiTypesNodeIdNodeIdIsNumeric(
        that: this,
      );

  /// Test if the node id is a string
  bool isString() => RustLib.instance.api.crateApiTypesNodeIdNodeIdIsString(
        that: this,
      );

  MonitoredItemCreateRequest toMonitoredItemCreateRequest() =>
      RustLib.instance.api
          .crateApiTypesNodeIdNodeIdToMonitoredItemCreateRequest(
        that: this,
      );
}

@sealed
class SessionEventLoopImpl extends RustOpaque implements SessionEventLoop {
  // Not to be used by end users
  SessionEventLoopImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SessionEventLoopImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SessionEventLoop,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SessionEventLoop,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_SessionEventLoopPtr,
  );

  /// Convenience method for running the session event loop until completion,
  /// this method will return once the session is closed manually, or
  /// after it fails to reconnect.
  ///
  /// # Returns
  ///
  /// * `StatusCode` - [Status code](StatusCode) indicating how the session terminated.
  Future<StatusCode> run() =>
      RustLib.instance.api.crateApiMinimalSessionEventLoopRun(
        that: this,
      );

  /// Convenience method for running the session event loop until completion on a tokio task.
  /// This method will return a [`JoinHandle`](tokio::task::JoinHandle) that will terminate
  /// once the session is closed manually, or after it fails to reconnect.
  ///
  /// # Returns
  ///
  /// * `JoinHandle<StatusCode>` - Handle to a tokio task wrapping the event loop.
  Future<JoinHandleStatusCode> spawn() =>
      RustLib.instance.api.crateApiMinimalSessionEventLoopSpawn(
        that: this,
      );
}

@sealed
class SessionImpl extends RustOpaque implements Session {
  // Not to be used by end users
  SessionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Session,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Session,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SessionPtr,
  );

  /// Creates monitored items on a subscription by sending a [`CreateMonitoredItemsRequest`] to the server.
  ///
  /// See OPC UA Part 4 - Services 5.12.2 for complete description of the service and error responses.
  ///
  /// # Arguments
  ///
  /// * `subscription_id` - The Server-assigned identifier for the Subscription that will report Notifications for this MonitoredItem
  /// * `timestamps_to_return` - An enumeration that specifies the timestamp Attributes to be transmitted for each MonitoredItem.
  /// * `items_to_create` - A list of [`MonitoredItemCreateRequest`] to be created and assigned to the specified Subscription.
  ///
  /// # Returns
  ///
  /// * `Ok(Vec<MonitoredItemCreateResult>)` - A list of [`MonitoredItemCreateResult`] corresponding to the items to create.
  ///    The size and order of the list matches the size and order of the `items_to_create` request parameter.
  /// * `Err(StatusCode)` - Request failed, [Status code](StatusCode) is the reason for failure.
  ///
  Future<List<MonitoredItemCreateResult>> createMonitoredItems(
          {required int subscriptionId,
          required TimestampsToReturn timestampsToReturn,
          required List<MonitoredItemCreateRequest> itemsToCreate}) =>
      RustLib.instance.api.crateApiMinimalSessionCreateMonitoredItems(
          that: this,
          subscriptionId: subscriptionId,
          timestampsToReturn: timestampsToReturn,
          itemsToCreate: itemsToCreate);

  /// Send a message and wait for response, using the default configured timeout.
  ///
  /// In order to set a different timeout, call `send` on the inner channel instead.
  /// Create a subscription by sending a [`CreateSubscriptionRequest`] to the server.
  ///
  /// See OPC UA Part 4 - Services 5.13.2 for complete description of the service and error responses.
  ///
  /// # Arguments
  ///
  /// * `publishing_interval` - The requested publishing interval defines the cyclic rate that
  ///   the Subscription is being requested to return Notifications to the Client. This interval
  ///   is expressed in milliseconds. This interval is represented by the publishing timer in the
  ///   Subscription state table. The negotiated value for this parameter returned in the
  ///   response is used as the default sampling interval for MonitoredItems assigned to this
  ///   Subscription. If the requested value is 0 or negative, the server shall revise with the
  ///   fastest supported publishing interval in milliseconds.
  /// * `lifetime_count` - Requested lifetime count. The lifetime count shall be a minimum of
  ///   three times the keep keep-alive count. When the publishing timer has expired this
  ///   number of times without a Publish request being available to send a NotificationMessage,
  ///   then the Subscription shall be deleted by the Server.
  /// * `max_keep_alive_count` - Requested maximum keep-alive count. When the publishing timer has
  ///   expired this number of times without requiring any NotificationMessage to be sent, the
  ///   Subscription sends a keep-alive Message to the Client. The negotiated value for this
  ///   parameter is returned in the response. If the requested value is 0, the server shall
  ///   revise with the smallest supported keep-alive count.
  /// * `max_notifications_per_publish` - The maximum number of notifications that the Client
  ///   wishes to receive in a single Publish response. A value of zero indicates that there is
  ///   no limit. The number of notifications per Publish is the sum of monitoredItems in
  ///   the DataChangeNotification and events in the EventNotificationList.
  /// * `priority` - Indicates the relative priority of the Subscription. When more than one
  ///   Subscription needs to send Notifications, the Server should de-queue a Publish request
  ///   to the Subscription with the highest priority number. For Subscriptions with equal
  ///   priority the Server should de-queue Publish requests in a round-robin fashion.
  ///   A Client that does not require special priority settings should set this value to zero.
  /// * `publishing_enabled` - A boolean parameter with the following values - `true` publishing
  ///   is enabled for the Subscription, `false`, publishing is disabled for the Subscription.
  ///   The value of this parameter does not affect the value of the monitoring mode Attribute of
  ///   MonitoredItems.
  ///
  /// # Returns
  ///
  /// * `Ok(u32)` - identifier for new subscription
  /// * `Err(StatusCode)` - Request failed, [Status code](StatusCode) is the reason for failure.
  ///
  Future<int> createSubscriptionDataChange(
          {required Duration publishingInterval,
          required int lifetimeCount,
          required int maxKeepAliveCount,
          required int maxNotificationsPerPublish,
          required int priority,
          required bool publishingEnabled,
          required DataChangeCallback callback}) =>
      RustLib.instance.api.crateApiMinimalSessionCreateSubscriptionDataChange(
          that: this,
          publishingInterval: publishingInterval,
          lifetimeCount: lifetimeCount,
          maxKeepAliveCount: maxKeepAliveCount,
          maxNotificationsPerPublish: maxNotificationsPerPublish,
          priority: priority,
          publishingEnabled: publishingEnabled,
          callback: callback);

  /// Disconnect from the server and wait until disconnected.
  Future<void> disconnect() =>
      RustLib.instance.api.crateApiMinimalSessionDisconnect(
        that: this,
      );

  /// The internal ID of the session, used to keep track of multiple sessions in the same program.
  int sessionId() => RustLib.instance.api.crateApiMinimalSessionSessionId(
        that: this,
      );

  /// Convenience method to wait for a connection to the server.
  ///
  /// You should also monitor the session event loop. If it ends, this method will never return.
  Future<bool> waitForConnection() =>
      RustLib.instance.api.crateApiMinimalSessionWaitForConnection(
        that: this,
      );
}

@sealed
class StatusCodeImpl extends RustOpaque implements StatusCode {
  // Not to be used by end users
  StatusCodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StatusCodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_StatusCode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_StatusCode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_StatusCodePtr,
  );

  String description() =>
      RustLib.instance.api.crateApiTypesStatusCodeStatusCodeDescription(
        that: this,
      );

  String name() => RustLib.instance.api.crateApiTypesStatusCodeStatusCodeName(
        that: this,
      );
}

@sealed
class UaDateTimeImpl extends RustOpaque implements UaDateTime {
  // Not to be used by end users
  UaDateTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UaDateTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UaDateTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UaDateTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UaDateTimePtr,
  );

  /// Time as chrono
  DateTime asChrono() =>
      RustLib.instance.api.crateApiTypesDateTimeUaDateTimeAsChrono(
        that: this,
      );

  /// To checked ticks. Function returns 0 or MAX_INT64
  /// if date exceeds valid OPC UA range
  PlatformInt64 checkedTicks() =>
      RustLib.instance.api.crateApiTypesDateTimeUaDateTimeCheckedTicks(
        that: this,
      );

  /// Tests if the date time is null (i.e. equal to epoch)
  bool isNull() => RustLib.instance.api.crateApiTypesDateTimeUaDateTimeIsNull(
        that: this,
      );

  /// Returns the time in ticks, of 100 nanosecond intervals
  PlatformInt64 ticks() =>
      RustLib.instance.api.crateApiTypesDateTimeUaDateTimeTicks(
        that: this,
      );

  /// Returns an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00.
  String toRfc3339() =>
      RustLib.instance.api.crateApiTypesDateTimeUaDateTimeToRfc3339(
        that: this,
      );
}

@sealed
class UaGuidImpl extends RustOpaque implements UaGuid {
  // Not to be used by end users
  UaGuidImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UaGuidImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UaGuid,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UaGuid,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UaGuidPtr,
  );

  /// Returns the bytes of the Guid
  U8Array16 asBytes() => RustLib.instance.api.crateApiTypesGuidUaGuidAsBytes(
        that: this,
      );
}

@sealed
class UaStringImpl extends RustOpaque implements UaString {
  // Not to be used by end users
  UaStringImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UaStringImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UaString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UaString,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UaStringPtr,
  );

  /// Returns true if the string is null or empty, false otherwise
  bool isEmpty() => RustLib.instance.api.crateApiTypesStringUaStringIsEmpty(
        that: this,
      );

  /// Test if the string is null.
  bool isNull() => RustLib.instance.api.crateApiTypesStringUaStringIsNull(
        that: this,
      );

  /// Returns the length of the string in bytes or -1 for null.
  PlatformInt64 len() => RustLib.instance.api.crateApiTypesStringUaStringLen(
        that: this,
      );

  set value(String? value) => RustLib.instance.api
      .crateApiTypesStringUaStringSetValue(that: this, value: value);

  /// This function is meant for use with NumericRange. It creates a substring from this string
  /// from min up to and inclusive of max. Note that min must have an index within the string
  /// but max is allowed to be beyond the end in which case the remainder of the string is
  /// returned (see docs for NumericRange).
  UaString substring({required BigInt min, required BigInt max}) =>
      RustLib.instance.api
          .crateApiTypesStringUaStringSubstring(that: this, min: min, max: max);

  String? get value => RustLib.instance.api.crateApiTypesStringUaStringValue(
        that: this,
      );
}
