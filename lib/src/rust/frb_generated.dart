// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/minimal.dart';
import 'api/types/byte_string.dart';
import 'api/types/data_value.dart';
import 'api/types/date_time.dart';
import 'api/types/guid.dart';
import 'api/types/monitored_item.dart';
import 'api/types/monitored_item_create_request.dart';
import 'api/types/node_id.dart';
import 'api/types/status_code.dart';
import 'api/types/string.dart';
import 'api/types/variant.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMinimalInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.0';

  @override
  int get rustContentHash => 1182827594;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'opcua_ffi',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  DataChangeCallback crateApiMinimalDataChangeCallbackNew(
      {required FutureOr<void> Function(WrapDataValue, WrapMonitoredItem)
          dataValue});

  WrapClientBuilder crateApiMinimalWrapClientBuilderApplicationName(
      {required WrapClientBuilder that, required String applicationName});

  WrapClientBuilder crateApiMinimalWrapClientBuilderApplicationUri(
      {required WrapClientBuilder that, required String applicationUri});

  WrapClientBuilder crateApiMinimalWrapClientBuilderCertificatePath(
      {required WrapClientBuilder that, required String certificatePath});

  WrapClient crateApiMinimalWrapClientBuilderClient(
      {required WrapClientBuilder that});

  WrapClientBuilder crateApiMinimalWrapClientBuilderCreateSampleKeypair(
      {required WrapClientBuilder that, required bool createSampleKeypair});

  WrapClientBuilder crateApiMinimalWrapClientBuilderDefaultEndpoint(
      {required WrapClientBuilder that, required String defaultEndpoint});

  WrapClientBuilder crateApiMinimalWrapClientBuilderEndpoint(
      {required WrapClientBuilder that,
      required String endpointId,
      required WrapClientEndpoint endpoint});

  WrapClientBuilder crateApiMinimalWrapClientBuilderEndpoints(
      {required WrapClientBuilder that,
      required List<(String, WrapClientEndpoint)> endpoints});

  WrapClientBuilder crateApiMinimalWrapClientBuilderFromConfig(
      {required String path});

  WrapClientBuilder crateApiMinimalWrapClientBuilderIgnoreClockSkew(
      {required WrapClientBuilder that});

  bool crateApiMinimalWrapClientBuilderIsValid(
      {required WrapClientBuilder that});

  WrapClientBuilder crateApiMinimalWrapClientBuilderKeepAliveInterval(
      {required WrapClientBuilder that, required Duration keepAliveInterval});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxArrayLength(
      {required WrapClientBuilder that, required BigInt maxArrayLength});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxByteStringLength(
      {required WrapClientBuilder that, required BigInt maxByteStringLength});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxChunkCount(
      {required WrapClientBuilder that, required BigInt maxChunkCount});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxChunkSize(
      {required WrapClientBuilder that, required BigInt maxChunkSize});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxIncomingChunkSize(
      {required WrapClientBuilder that, required BigInt maxIncomingChunkSize});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxInflightMessages(
      {required WrapClientBuilder that, required BigInt maxInflightMessages});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxInflightPublish(
      {required WrapClientBuilder that, required BigInt maxInflightPublish});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxMessageSize(
      {required WrapClientBuilder that, required BigInt maxMessageSize});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxStringLength(
      {required WrapClientBuilder that, required BigInt maxStringLength});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMinPublishInterval(
      {required WrapClientBuilder that, required Duration minPublishInterval});

  WrapClientBuilder crateApiMinimalWrapClientBuilderNew();

  WrapClientBuilder crateApiMinimalWrapClientBuilderPkiDir(
      {required WrapClientBuilder that, required String pkiDir});

  WrapClientBuilder crateApiMinimalWrapClientBuilderPreferredLocales(
      {required WrapClientBuilder that,
      required List<String> preferredLocales});

  WrapClientBuilder crateApiMinimalWrapClientBuilderPrivateKeyPath(
      {required WrapClientBuilder that, required String privateKeyPath});

  WrapClientBuilder crateApiMinimalWrapClientBuilderProductUri(
      {required WrapClientBuilder that, required String productUri});

  WrapClientBuilder crateApiMinimalWrapClientBuilderPublishTimeout(
      {required WrapClientBuilder that, required Duration publishTimeout});

  WrapClientBuilder crateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunk(
      {required WrapClientBuilder that,
      required BigInt recreateMonitoredItemsChunk});

  WrapClientBuilder crateApiMinimalWrapClientBuilderRequestTimeout(
      {required WrapClientBuilder that, required Duration requestTimeout});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionName(
      {required WrapClientBuilder that, required String sessionName});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryInitial(
      {required WrapClientBuilder that, required Duration sessionRetryInitial});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryLimit(
      {required WrapClientBuilder that, required int sessionRetryLimit});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryMax(
      {required WrapClientBuilder that, required Duration sessionRetryMax});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionTimeout(
      {required WrapClientBuilder that, required int sessionTimeout});

  WrapClientBuilder crateApiMinimalWrapClientBuilderTrustServerCerts(
      {required WrapClientBuilder that, required bool trustServerCerts});

  WrapClientBuilder crateApiMinimalWrapClientBuilderUserToken(
      {required WrapClientBuilder that,
      required String userTokenId,
      required WrapClientUserToken userToken});

  WrapClientBuilder crateApiMinimalWrapClientBuilderVerifyServerCerts(
      {required WrapClientBuilder that, required bool verifyServerCerts});

  WrapClientEndpoint crateApiMinimalWrapClientEndpointNew(
      {required String url});

  bool crateApiMinimalWrapClientUserTokenIsValid(
      {required WrapClientUserToken that});

  WrapClientUserToken crateApiMinimalWrapClientUserTokenUserPass(
      {required String user, required String password});

  WrapClientUserToken crateApiMinimalWrapClientUserTokenX509(
      {required String user,
      required String certPath,
      required String privateKeyPath});

  Future<(WrapSession, WrapSessionEventLoop)>
      crateApiMinimalWrapClientConnectToEndpointId(
          {required WrapClient that, String? endpointId});

  Future<WrapStatusCode> crateApiMinimalWrapSessionEventLoopRun(
      {required WrapSessionEventLoop that});

  Future<JoinHandleWrapStatusCode> crateApiMinimalWrapSessionEventLoopSpawn(
      {required WrapSessionEventLoop that});

  Future<int> crateApiMinimalWrapSessionCreateSubscriptionDataChange(
      {required WrapSession that,
      required Duration publishingInterval,
      required int lifetimeCount,
      required int maxKeepAliveCount,
      required int maxNotificationsPerPublish,
      required int priority,
      required bool publishingEnabled,
      required DataChangeCallback callback});

  Future<void> crateApiMinimalWrapSessionDisconnect(
      {required WrapSession that});

  int crateApiMinimalWrapSessionSessionId({required WrapSession that});

  Future<bool> crateApiMinimalWrapSessionWaitForConnection(
      {required WrapSession that});

  Future<void> crateApiMinimalDatachangecallback(
      {required DataChangeCallback a});

  Future<void> crateApiMinimalInitApp();

  String crateApiTypesByteStringWrapByteStringAsBase64(
      {required WrapByteString that});

  WrapByteString? crateApiTypesByteStringWrapByteStringFromBase64(
      {required String data});

  bool crateApiTypesByteStringWrapByteStringIsEmpty(
      {required WrapByteString that});

  bool crateApiTypesByteStringWrapByteStringIsNull(
      {required WrapByteString that});

  bool crateApiTypesByteStringWrapByteStringIsNullOrEmpty(
      {required WrapByteString that});

  WrapByteString crateApiTypesByteStringWrapByteStringNull();

  WrapByteString crateApiTypesByteStringWrapByteStringSubstring(
      {required WrapByteString that, required BigInt min, required BigInt max});

  Future<void> crateApiTypesByteStringWrapbytestring(
      {required WrapByteString a});

  Future<void> crateApiTypesDataValueWrapdatavalue({required WrapDataValue a});

  DateTime crateApiTypesDateTimeWrapDateTimeAsChrono(
      {required WrapDateTime that});

  PlatformInt64 crateApiTypesDateTimeWrapDateTimeCheckedTicks(
      {required WrapDateTime that});

  WrapDateTime crateApiTypesDateTimeWrapDateTimeEndtimes();

  PlatformInt64 crateApiTypesDateTimeWrapDateTimeEndtimesTicks();

  WrapDateTime crateApiTypesDateTimeWrapDateTimeEpoch();

  bool crateApiTypesDateTimeWrapDateTimeIsNull({required WrapDateTime that});

  WrapDateTime crateApiTypesDateTimeWrapDateTimeNow();

  WrapDateTime crateApiTypesDateTimeWrapDateTimeNowWithOffset(
      {required Duration offset});

  WrapDateTime crateApiTypesDateTimeWrapDateTimeNull();

  PlatformInt64 crateApiTypesDateTimeWrapDateTimeTicks(
      {required WrapDateTime that});

  String crateApiTypesDateTimeWrapDateTimeToRfc3339(
      {required WrapDateTime that});

  WrapDateTime crateApiTypesDateTimeWrapDateTimeYmd(
      {required int year, required int month, required int day});

  WrapDateTime crateApiTypesDateTimeWrapDateTimeYmdHms(
      {required int year,
      required int month,
      required int day,
      required int hour,
      required int minute,
      required int second});

  WrapDateTime crateApiTypesDateTimeWrapDateTimeYmdHmsNano(
      {required int year,
      required int month,
      required int day,
      required int hour,
      required int minute,
      required int second,
      required int nanos});

  Future<void> crateApiTypesDateTimeWrapdatetime({required WrapDateTime a});

  U8Array16 crateApiTypesGuidWrapGuidAsBytes({required WrapGuid that});

  Future<WrapGuid> crateApiTypesGuidWrapGuidFromBytes(
      {required U8Array16 bytes});

  WrapGuid crateApiTypesGuidWrapGuidNew();

  WrapGuid crateApiTypesGuidWrapGuidNull();

  Future<void> crateApiTypesGuidWrapguid({required WrapGuid a});

  int crateApiTypesMonitoredItemWrapMonitoredItemClientHandle(
      {required WrapMonitoredItem that});

  bool crateApiTypesMonitoredItemWrapMonitoredItemDiscardOldest(
      {required WrapMonitoredItem that});

  int crateApiTypesMonitoredItemWrapMonitoredItemId(
      {required WrapMonitoredItem that});

  BigInt crateApiTypesMonitoredItemWrapMonitoredItemQueueSize(
      {required WrapMonitoredItem that});

  double crateApiTypesMonitoredItemWrapMonitoredItemSamplingInterval(
      {required WrapMonitoredItem that});

  Future<void> crateApiTypesMonitoredItemMonitoreditem(
      {required WrapMonitoredItem a});

  Future<void>
      crateApiTypesMonitoredItemCreateRequestWrapmonitoreditemcreaterequest(
          {required WrapMonitoredItemCreateRequest a});

  bool crateApiTypesNodeIdWrapNodeIdIsByteString({required WrapNodeId that});

  bool crateApiTypesNodeIdWrapNodeIdIsGuid({required WrapNodeId that});

  bool crateApiTypesNodeIdWrapNodeIdIsNull({required WrapNodeId that});

  bool crateApiTypesNodeIdWrapNodeIdIsNumeric({required WrapNodeId that});

  bool crateApiTypesNodeIdWrapNodeIdIsString({required WrapNodeId that});

  WrapNodeId crateApiTypesNodeIdWrapNodeIdNextNumeric({required int namespace});

  WrapNodeId crateApiTypesNodeIdWrapNodeIdNull();

  WrapNodeId crateApiTypesNodeIdWrapNodeIdObjectsFolderId();

  WrapNodeId crateApiTypesNodeIdWrapNodeIdRootFolderId();

  WrapNodeId crateApiTypesNodeIdWrapNodeIdTypesFolderId();

  WrapNodeId crateApiTypesNodeIdWrapNodeIdViewsFolderId();

  Future<void> crateApiTypesNodeIdWrapidentifier({required WrapIdentifier a});

  Future<void> crateApiTypesNodeIdWrapnodeid({required WrapNodeId a});

  WrapIdentifier crateApiTypesNodeIdWrapIdentifierFrom({required int v});

  String crateApiTypesStatusCodeWrapStatusCodeDescription(
      {required WrapStatusCode that});

  WrapStatusCode? crateApiTypesStatusCodeWrapStatusCodeFromStr(
      {required String s});

  WrapStatusCode? crateApiTypesStatusCodeWrapStatusCodeFromU32(
      {required int code});

  String crateApiTypesStatusCodeWrapStatusCodeName(
      {required WrapStatusCode that});

  Future<void> crateApiTypesStatusCodeWrapstatuscode(
      {required WrapStatusCode a});

  bool crateApiTypesStringWrapUaStringIsEmpty({required WrapUaString that});

  bool crateApiTypesStringWrapUaStringIsNull({required WrapUaString that});

  PlatformInt64 crateApiTypesStringWrapUaStringLen(
      {required WrapUaString that});

  WrapUaString crateApiTypesStringWrapUaStringNull();

  void crateApiTypesStringWrapUaStringSetValue(
      {required WrapUaString that, String? value});

  WrapUaString crateApiTypesStringWrapUaStringSubstring(
      {required WrapUaString that, required BigInt min, required BigInt max});

  String? crateApiTypesStringWrapUaStringValue({required WrapUaString that});

  Future<void> crateApiTypesStringWrapuastring({required WrapUaString a});

  Future<void> crateApiTypesStringWrapxmlelement({required WrapUaString a});

  Future<void> crateApiTypesVariantWrapvariant({required WrapVariant a});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxWrapDateTime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxWrapDateTime;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxWrapDateTimePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxWrapGuid;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxWrapGuid;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BoxWrapGuidPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataChangeCallback;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataChangeCallback;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DataChangeCallbackPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinHandleWrapStatusCode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinHandleWrapStatusCode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_JoinHandleWrapStatusCodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapByteString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapByteString;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapByteStringPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WrapClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapClientBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientEndpoint;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientEndpoint;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapClientEndpointPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientUserToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientUserToken;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapClientUserTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapDateTime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapDateTime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WrapDateTimePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapGuid;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapGuid;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WrapGuidPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapMonitoredItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapMonitoredItem;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapMonitoredItemPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapMonitoredItemCreateRequest;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapMonitoredItemCreateRequest;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapMonitoredItemCreateRequestPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapNodeId;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapNodeId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WrapNodeIdPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WrapSessionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapSessionEventLoop;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapSessionEventLoop;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapSessionEventLoopPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapStatusCode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapStatusCode;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapStatusCodePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapUaString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapUaString;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WrapUaStringPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  DataChangeCallback crateApiMinimalDataChangeCallbackNew(
      {required FutureOr<void> Function(WrapDataValue, WrapMonitoredItem)
          dataValue}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_wrap_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem_Output_unit_AnyhowException(
            dataValue, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalDataChangeCallbackNewConstMeta,
      argValues: [dataValue],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalDataChangeCallbackNewConstMeta =>
      const TaskConstMeta(
        debugName: "DataChangeCallback_new",
        argNames: ["dataValue"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderApplicationName(
      {required WrapClientBuilder that, required String applicationName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(applicationName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderApplicationNameConstMeta,
      argValues: [that, applicationName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderApplicationNameConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_application_name",
        argNames: ["that", "applicationName"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderApplicationUri(
      {required WrapClientBuilder that, required String applicationUri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(applicationUri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderApplicationUriConstMeta,
      argValues: [that, applicationUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderApplicationUriConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_application_uri",
        argNames: ["that", "applicationUri"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderCertificatePath(
      {required WrapClientBuilder that, required String certificatePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(certificatePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderCertificatePathConstMeta,
      argValues: [that, certificatePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderCertificatePathConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_certificate_path",
        argNames: ["that", "certificatePath"],
      );

  @override
  WrapClient crateApiMinimalWrapClientBuilderClient(
      {required WrapClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderClientConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_client",
        argNames: ["that"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderCreateSampleKeypair(
      {required WrapClientBuilder that, required bool createSampleKeypair}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_bool(createSampleKeypair, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderCreateSampleKeypairConstMeta,
      argValues: [that, createSampleKeypair],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderCreateSampleKeypairConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_create_sample_keypair",
            argNames: ["that", "createSampleKeypair"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderDefaultEndpoint(
      {required WrapClientBuilder that, required String defaultEndpoint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(defaultEndpoint, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderDefaultEndpointConstMeta,
      argValues: [that, defaultEndpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderDefaultEndpointConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_default_endpoint",
        argNames: ["that", "defaultEndpoint"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderEndpoint(
      {required WrapClientBuilder that,
      required String endpointId,
      required WrapClientEndpoint endpoint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(endpointId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
            endpoint, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderEndpointConstMeta,
      argValues: [that, endpointId, endpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderEndpointConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_endpoint",
        argNames: ["that", "endpointId", "endpoint"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderEndpoints(
      {required WrapClientBuilder that,
      required List<(String, WrapClientEndpoint)> endpoints}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
            endpoints, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderEndpointsConstMeta,
      argValues: [that, endpoints],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderEndpointsConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_endpoints",
        argNames: ["that", "endpoints"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderFromConfig(
      {required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderFromConfigConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderFromConfigConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_from_config",
        argNames: ["path"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderIgnoreClockSkew(
      {required WrapClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderIgnoreClockSkewConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderIgnoreClockSkewConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_ignore_clock_skew",
        argNames: ["that"],
      );

  @override
  bool crateApiMinimalWrapClientBuilderIsValid(
      {required WrapClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderIsValidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderIsValidConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_is_valid",
        argNames: ["that"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderKeepAliveInterval(
      {required WrapClientBuilder that, required Duration keepAliveInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(keepAliveInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderKeepAliveIntervalConstMeta,
      argValues: [that, keepAliveInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderKeepAliveIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_keep_alive_interval",
            argNames: ["that", "keepAliveInterval"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxArrayLength(
      {required WrapClientBuilder that, required BigInt maxArrayLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxArrayLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxArrayLengthConstMeta,
      argValues: [that, maxArrayLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxArrayLengthConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_array_length",
        argNames: ["that", "maxArrayLength"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxByteStringLength(
      {required WrapClientBuilder that, required BigInt maxByteStringLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxByteStringLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxByteStringLengthConstMeta,
      argValues: [that, maxByteStringLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMaxByteStringLengthConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_max_byte_string_length",
            argNames: ["that", "maxByteStringLength"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxChunkCount(
      {required WrapClientBuilder that, required BigInt maxChunkCount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxChunkCount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxChunkCountConstMeta,
      argValues: [that, maxChunkCount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxChunkCountConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_chunk_count",
        argNames: ["that", "maxChunkCount"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxChunkSize(
      {required WrapClientBuilder that, required BigInt maxChunkSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxChunkSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxChunkSizeConstMeta,
      argValues: [that, maxChunkSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxChunkSizeConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_chunk_size",
        argNames: ["that", "maxChunkSize"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxIncomingChunkSize(
      {required WrapClientBuilder that, required BigInt maxIncomingChunkSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxIncomingChunkSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxIncomingChunkSizeConstMeta,
      argValues: [that, maxIncomingChunkSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMaxIncomingChunkSizeConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_max_incoming_chunk_size",
            argNames: ["that", "maxIncomingChunkSize"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxInflightMessages(
      {required WrapClientBuilder that, required BigInt maxInflightMessages}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxInflightMessages, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxInflightMessagesConstMeta,
      argValues: [that, maxInflightMessages],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMaxInflightMessagesConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_max_inflight_messages",
            argNames: ["that", "maxInflightMessages"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxInflightPublish(
      {required WrapClientBuilder that, required BigInt maxInflightPublish}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxInflightPublish, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxInflightPublishConstMeta,
      argValues: [that, maxInflightPublish],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMaxInflightPublishConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_max_inflight_publish",
            argNames: ["that", "maxInflightPublish"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxMessageSize(
      {required WrapClientBuilder that, required BigInt maxMessageSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxMessageSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxMessageSizeConstMeta,
      argValues: [that, maxMessageSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxMessageSizeConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_message_size",
        argNames: ["that", "maxMessageSize"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxStringLength(
      {required WrapClientBuilder that, required BigInt maxStringLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxStringLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxStringLengthConstMeta,
      argValues: [that, maxStringLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxStringLengthConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_string_length",
        argNames: ["that", "maxStringLength"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMinPublishInterval(
      {required WrapClientBuilder that, required Duration minPublishInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(minPublishInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMinPublishIntervalConstMeta,
      argValues: [that, minPublishInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMinPublishIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_min_publish_interval",
            argNames: ["that", "minPublishInterval"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderNewConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_new",
        argNames: [],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderPkiDir(
      {required WrapClientBuilder that, required String pkiDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(pkiDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderPkiDirConstMeta,
      argValues: [that, pkiDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderPkiDirConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_pki_dir",
        argNames: ["that", "pkiDir"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderPreferredLocales(
      {required WrapClientBuilder that,
      required List<String> preferredLocales}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_list_String(preferredLocales, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderPreferredLocalesConstMeta,
      argValues: [that, preferredLocales],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderPreferredLocalesConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_preferred_locales",
            argNames: ["that", "preferredLocales"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderPrivateKeyPath(
      {required WrapClientBuilder that, required String privateKeyPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(privateKeyPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderPrivateKeyPathConstMeta,
      argValues: [that, privateKeyPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderPrivateKeyPathConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_private_key_path",
        argNames: ["that", "privateKeyPath"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderProductUri(
      {required WrapClientBuilder that, required String productUri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(productUri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderProductUriConstMeta,
      argValues: [that, productUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderProductUriConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_product_uri",
        argNames: ["that", "productUri"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderPublishTimeout(
      {required WrapClientBuilder that, required Duration publishTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(publishTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderPublishTimeoutConstMeta,
      argValues: [that, publishTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderPublishTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_publish_timeout",
        argNames: ["that", "publishTimeout"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunk(
      {required WrapClientBuilder that,
      required BigInt recreateMonitoredItemsChunk}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(recreateMonitoredItemsChunk, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunkConstMeta,
      argValues: [that, recreateMonitoredItemsChunk],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunkConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_recreate_monitored_items_chunk",
            argNames: ["that", "recreateMonitoredItemsChunk"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderRequestTimeout(
      {required WrapClientBuilder that, required Duration requestTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(requestTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderRequestTimeoutConstMeta,
      argValues: [that, requestTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderRequestTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_request_timeout",
        argNames: ["that", "requestTimeout"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionName(
      {required WrapClientBuilder that, required String sessionName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(sessionName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionNameConstMeta,
      argValues: [that, sessionName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderSessionNameConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_session_name",
        argNames: ["that", "sessionName"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryInitial(
      {required WrapClientBuilder that,
      required Duration sessionRetryInitial}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(sessionRetryInitial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionRetryInitialConstMeta,
      argValues: [that, sessionRetryInitial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderSessionRetryInitialConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_session_retry_initial",
            argNames: ["that", "sessionRetryInitial"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryLimit(
      {required WrapClientBuilder that, required int sessionRetryLimit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_i_32(sessionRetryLimit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionRetryLimitConstMeta,
      argValues: [that, sessionRetryLimit],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderSessionRetryLimitConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_session_retry_limit",
            argNames: ["that", "sessionRetryLimit"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryMax(
      {required WrapClientBuilder that, required Duration sessionRetryMax}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(sessionRetryMax, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionRetryMaxConstMeta,
      argValues: [that, sessionRetryMax],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderSessionRetryMaxConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_session_retry_max",
        argNames: ["that", "sessionRetryMax"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionTimeout(
      {required WrapClientBuilder that, required int sessionTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_u_32(sessionTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionTimeoutConstMeta,
      argValues: [that, sessionTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderSessionTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_session_timeout",
        argNames: ["that", "sessionTimeout"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderTrustServerCerts(
      {required WrapClientBuilder that, required bool trustServerCerts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_bool(trustServerCerts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderTrustServerCertsConstMeta,
      argValues: [that, trustServerCerts],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderTrustServerCertsConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_trust_server_certs",
            argNames: ["that", "trustServerCerts"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderUserToken(
      {required WrapClientBuilder that,
      required String userTokenId,
      required WrapClientUserToken userToken}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(userTokenId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
            userToken, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderUserTokenConstMeta,
      argValues: [that, userTokenId, userToken],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderUserTokenConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_user_token",
        argNames: ["that", "userTokenId", "userToken"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderVerifyServerCerts(
      {required WrapClientBuilder that, required bool verifyServerCerts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_bool(verifyServerCerts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderVerifyServerCertsConstMeta,
      argValues: [that, verifyServerCerts],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderVerifyServerCertsConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_verify_server_certs",
            argNames: ["that", "verifyServerCerts"],
          );

  @override
  WrapClientEndpoint crateApiMinimalWrapClientEndpointNew(
      {required String url}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientEndpointNewConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientEndpointNewConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientEndpoint_new",
        argNames: ["url"],
      );

  @override
  bool crateApiMinimalWrapClientUserTokenIsValid(
      {required WrapClientUserToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientUserTokenIsValidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientUserTokenIsValidConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientUserToken_is_valid",
        argNames: ["that"],
      );

  @override
  WrapClientUserToken crateApiMinimalWrapClientUserTokenUserPass(
      {required String user, required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientUserTokenUserPassConstMeta,
      argValues: [user, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientUserTokenUserPassConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientUserToken_user_pass",
        argNames: ["user", "password"],
      );

  @override
  WrapClientUserToken crateApiMinimalWrapClientUserTokenX509(
      {required String user,
      required String certPath,
      required String privateKeyPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        sse_encode_String(certPath, serializer);
        sse_encode_String(privateKeyPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientUserTokenX509ConstMeta,
      argValues: [user, certPath, privateKeyPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientUserTokenX509ConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientUserToken_x509",
        argNames: ["user", "certPath", "privateKeyPath"],
      );

  @override
  Future<(WrapSession, WrapSessionEventLoop)>
      crateApiMinimalWrapClientConnectToEndpointId(
          {required WrapClient that, String? endpointId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
            that, serializer);
        sse_encode_opt_String(endpointId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_event_loop,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalWrapClientConnectToEndpointIdConstMeta,
      argValues: [that, endpointId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientConnectToEndpointIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClient_connect_to_endpoint_id",
        argNames: ["that", "endpointId"],
      );

  @override
  Future<WrapStatusCode> crateApiMinimalWrapSessionEventLoopRun(
      {required WrapSessionEventLoop that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapSessionEventLoopRunConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionEventLoopRunConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSessionEventLoop_run",
        argNames: ["that"],
      );

  @override
  Future<JoinHandleWrapStatusCode> crateApiMinimalWrapSessionEventLoopSpawn(
      {required WrapSessionEventLoop that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapSessionEventLoopSpawnConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionEventLoopSpawnConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSessionEventLoop_spawn",
        argNames: ["that"],
      );

  @override
  Future<int> crateApiMinimalWrapSessionCreateSubscriptionDataChange(
      {required WrapSession that,
      required Duration publishingInterval,
      required int lifetimeCount,
      required int maxKeepAliveCount,
      required int maxNotificationsPerPublish,
      required int priority,
      required bool publishingEnabled,
      required DataChangeCallback callback}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            that, serializer);
        sse_encode_Chrono_Duration(publishingInterval, serializer);
        sse_encode_u_32(lifetimeCount, serializer);
        sse_encode_u_32(maxKeepAliveCount, serializer);
        sse_encode_u_32(maxNotificationsPerPublish, serializer);
        sse_encode_u_8(priority, serializer);
        sse_encode_bool(publishingEnabled, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode,
      ),
      constMeta:
          kCrateApiMinimalWrapSessionCreateSubscriptionDataChangeConstMeta,
      argValues: [
        that,
        publishingInterval,
        lifetimeCount,
        maxKeepAliveCount,
        maxNotificationsPerPublish,
        priority,
        publishingEnabled,
        callback
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapSessionCreateSubscriptionDataChangeConstMeta =>
          const TaskConstMeta(
            debugName: "WrapSession_create_subscription_data_change",
            argNames: [
              "that",
              "publishingInterval",
              "lifetimeCount",
              "maxKeepAliveCount",
              "maxNotificationsPerPublish",
              "priority",
              "publishingEnabled",
              "callback"
            ],
          );

  @override
  Future<void> crateApiMinimalWrapSessionDisconnect(
      {required WrapSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode,
      ),
      constMeta: kCrateApiMinimalWrapSessionDisconnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionDisconnectConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSession_disconnect",
        argNames: ["that"],
      );

  @override
  int crateApiMinimalWrapSessionSessionId({required WrapSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionSessionIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSession_session_id",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiMinimalWrapSessionWaitForConnection(
      {required WrapSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapSessionWaitForConnectionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionWaitForConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSession_wait_for_connection",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiMinimalDatachangecallback(
      {required DataChangeCallback a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalDatachangecallbackConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalDatachangecallbackConstMeta =>
      const TaskConstMeta(
        debugName: "_datachangecallback",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiMinimalInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  String crateApiTypesByteStringWrapByteStringAsBase64(
      {required WrapByteString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringWrapByteStringAsBase64ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringWrapByteStringAsBase64ConstMeta =>
      const TaskConstMeta(
        debugName: "WrapByteString_as_base64",
        argNames: ["that"],
      );

  @override
  WrapByteString? crateApiTypesByteStringWrapByteStringFromBase64(
      {required String data}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringWrapByteStringFromBase64ConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringWrapByteStringFromBase64ConstMeta =>
      const TaskConstMeta(
        debugName: "WrapByteString_from_base64",
        argNames: ["data"],
      );

  @override
  bool crateApiTypesByteStringWrapByteStringIsEmpty(
      {required WrapByteString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringWrapByteStringIsEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringWrapByteStringIsEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "WrapByteString_is_empty",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesByteStringWrapByteStringIsNull(
      {required WrapByteString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringWrapByteStringIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringWrapByteStringIsNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapByteString_is_null",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesByteStringWrapByteStringIsNullOrEmpty(
      {required WrapByteString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringWrapByteStringIsNullOrEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesByteStringWrapByteStringIsNullOrEmptyConstMeta =>
          const TaskConstMeta(
            debugName: "WrapByteString_is_null_or_empty",
            argNames: ["that"],
          );

  @override
  WrapByteString crateApiTypesByteStringWrapByteStringNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringWrapByteStringNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringWrapByteStringNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapByteString_null",
        argNames: [],
      );

  @override
  WrapByteString crateApiTypesByteStringWrapByteStringSubstring(
      {required WrapByteString that,
      required BigInt min,
      required BigInt max}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            that, serializer);
        sse_encode_usize(min, serializer);
        sse_encode_usize(max, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTypesByteStringWrapByteStringSubstringConstMeta,
      argValues: [that, min, max],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringWrapByteStringSubstringConstMeta =>
      const TaskConstMeta(
        debugName: "WrapByteString_substring",
        argNames: ["that", "min", "max"],
      );

  @override
  Future<void> crateApiTypesByteStringWrapbytestring(
      {required WrapByteString a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesByteStringWrapbytestringConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesByteStringWrapbytestringConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapbytestring",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesDataValueWrapdatavalue({required WrapDataValue a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_wrap_data_value(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDataValueWrapdatavalueConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDataValueWrapdatavalueConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapdatavalue",
        argNames: ["a"],
      );

  @override
  DateTime crateApiTypesDateTimeWrapDateTimeAsChrono(
      {required WrapDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Utc,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeAsChronoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeAsChronoConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_as_chrono",
        argNames: ["that"],
      );

  @override
  PlatformInt64 crateApiTypesDateTimeWrapDateTimeCheckedTicks(
      {required WrapDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeCheckedTicksConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeCheckedTicksConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_checked_ticks",
        argNames: ["that"],
      );

  @override
  WrapDateTime crateApiTypesDateTimeWrapDateTimeEndtimes() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeEndtimesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeEndtimesConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_endtimes",
        argNames: [],
      );

  @override
  PlatformInt64 crateApiTypesDateTimeWrapDateTimeEndtimesTicks() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeEndtimesTicksConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeEndtimesTicksConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_endtimes_ticks",
        argNames: [],
      );

  @override
  WrapDateTime crateApiTypesDateTimeWrapDateTimeEpoch() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 66)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeEpochConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeEpochConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_epoch",
        argNames: [],
      );

  @override
  bool crateApiTypesDateTimeWrapDateTimeIsNull({required WrapDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 67)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeIsNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_is_null",
        argNames: ["that"],
      );

  @override
  WrapDateTime crateApiTypesDateTimeWrapDateTimeNow() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 68)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeNowConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeNowConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_now",
        argNames: [],
      );

  @override
  WrapDateTime crateApiTypesDateTimeWrapDateTimeNowWithOffset(
      {required Duration offset}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Chrono_Duration(offset, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 69)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeNowWithOffsetConstMeta,
      argValues: [offset],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeNowWithOffsetConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_now_with_offset",
        argNames: ["offset"],
      );

  @override
  WrapDateTime crateApiTypesDateTimeWrapDateTimeNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 70)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_null",
        argNames: [],
      );

  @override
  PlatformInt64 crateApiTypesDateTimeWrapDateTimeTicks(
      {required WrapDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 71)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeTicksConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeTicksConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_ticks",
        argNames: ["that"],
      );

  @override
  String crateApiTypesDateTimeWrapDateTimeToRfc3339(
      {required WrapDateTime that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 72)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeToRfc3339ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeToRfc3339ConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_to_rfc3339",
        argNames: ["that"],
      );

  @override
  WrapDateTime crateApiTypesDateTimeWrapDateTimeYmd(
      {required int year, required int month, required int day}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(year, serializer);
        sse_encode_u_16(month, serializer);
        sse_encode_u_16(day, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 73)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeYmdConstMeta,
      argValues: [year, month, day],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeYmdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_ymd",
        argNames: ["year", "month", "day"],
      );

  @override
  WrapDateTime crateApiTypesDateTimeWrapDateTimeYmdHms(
      {required int year,
      required int month,
      required int day,
      required int hour,
      required int minute,
      required int second}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(year, serializer);
        sse_encode_u_16(month, serializer);
        sse_encode_u_16(day, serializer);
        sse_encode_u_16(hour, serializer);
        sse_encode_u_16(minute, serializer);
        sse_encode_u_16(second, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 74)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeYmdHmsConstMeta,
      argValues: [year, month, day, hour, minute, second],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeYmdHmsConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_ymd_hms",
        argNames: ["year", "month", "day", "hour", "minute", "second"],
      );

  @override
  WrapDateTime crateApiTypesDateTimeWrapDateTimeYmdHmsNano(
      {required int year,
      required int month,
      required int day,
      required int hour,
      required int minute,
      required int second,
      required int nanos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(year, serializer);
        sse_encode_u_16(month, serializer);
        sse_encode_u_16(day, serializer);
        sse_encode_u_16(hour, serializer);
        sse_encode_u_16(minute, serializer);
        sse_encode_u_16(second, serializer);
        sse_encode_u_32(nanos, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 75)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapDateTimeYmdHmsNanoConstMeta,
      argValues: [year, month, day, hour, minute, second, nanos],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapDateTimeYmdHmsNanoConstMeta =>
      const TaskConstMeta(
        debugName: "WrapDateTime_ymd_hms_nano",
        argNames: ["year", "month", "day", "hour", "minute", "second", "nanos"],
      );

  @override
  Future<void> crateApiTypesDateTimeWrapdatetime({required WrapDateTime a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 76, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesDateTimeWrapdatetimeConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesDateTimeWrapdatetimeConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapdatetime",
        argNames: ["a"],
      );

  @override
  U8Array16 crateApiTypesGuidWrapGuidAsBytes({required WrapGuid that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 77)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_16,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidWrapGuidAsBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidWrapGuidAsBytesConstMeta =>
      const TaskConstMeta(
        debugName: "WrapGuid_as_bytes",
        argNames: ["that"],
      );

  @override
  Future<WrapGuid> crateApiTypesGuidWrapGuidFromBytes(
      {required U8Array16 bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_16(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 78, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidWrapGuidFromBytesConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidWrapGuidFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "WrapGuid_from_bytes",
        argNames: ["bytes"],
      );

  @override
  WrapGuid crateApiTypesGuidWrapGuidNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 79)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidWrapGuidNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidWrapGuidNewConstMeta =>
      const TaskConstMeta(
        debugName: "WrapGuid_new",
        argNames: [],
      );

  @override
  WrapGuid crateApiTypesGuidWrapGuidNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 80)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidWrapGuidNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidWrapGuidNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapGuid_null",
        argNames: [],
      );

  @override
  Future<void> crateApiTypesGuidWrapguid({required WrapGuid a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesGuidWrapguidConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesGuidWrapguidConstMeta => const TaskConstMeta(
        debugName: "_wrapguid",
        argNames: ["a"],
      );

  @override
  int crateApiTypesMonitoredItemWrapMonitoredItemClientHandle(
      {required WrapMonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 82)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemWrapMonitoredItemClientHandleConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemWrapMonitoredItemClientHandleConstMeta =>
          const TaskConstMeta(
            debugName: "WrapMonitoredItem_client_handle",
            argNames: ["that"],
          );

  @override
  bool crateApiTypesMonitoredItemWrapMonitoredItemDiscardOldest(
      {required WrapMonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 83)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemWrapMonitoredItemDiscardOldestConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemWrapMonitoredItemDiscardOldestConstMeta =>
          const TaskConstMeta(
            debugName: "WrapMonitoredItem_discard_oldest",
            argNames: ["that"],
          );

  @override
  int crateApiTypesMonitoredItemWrapMonitoredItemId(
      {required WrapMonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 84)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesMonitoredItemWrapMonitoredItemIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesMonitoredItemWrapMonitoredItemIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapMonitoredItem_id",
        argNames: ["that"],
      );

  @override
  BigInt crateApiTypesMonitoredItemWrapMonitoredItemQueueSize(
      {required WrapMonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 85)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesMonitoredItemWrapMonitoredItemQueueSizeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemWrapMonitoredItemQueueSizeConstMeta =>
          const TaskConstMeta(
            debugName: "WrapMonitoredItem_queue_size",
            argNames: ["that"],
          );

  @override
  double crateApiTypesMonitoredItemWrapMonitoredItemSamplingInterval(
      {required WrapMonitoredItem that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 86)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemWrapMonitoredItemSamplingIntervalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemWrapMonitoredItemSamplingIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "WrapMonitoredItem_sampling_interval",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiTypesMonitoredItemMonitoreditem(
      {required WrapMonitoredItem a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 87, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesMonitoredItemMonitoreditemConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesMonitoredItemMonitoreditemConstMeta =>
      const TaskConstMeta(
        debugName: "_monitoreditem",
        argNames: ["a"],
      );

  @override
  Future<void>
      crateApiTypesMonitoredItemCreateRequestWrapmonitoreditemcreaterequest(
          {required WrapMonitoredItemCreateRequest a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 88, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiTypesMonitoredItemCreateRequestWrapmonitoreditemcreaterequestConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesMonitoredItemCreateRequestWrapmonitoreditemcreaterequestConstMeta =>
          const TaskConstMeta(
            debugName: "_wrapmonitoreditemcreaterequest",
            argNames: ["a"],
          );

  @override
  bool crateApiTypesNodeIdWrapNodeIdIsByteString({required WrapNodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 89)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdIsByteStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdIsByteStringConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_is_byte_string",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesNodeIdWrapNodeIdIsGuid({required WrapNodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 90)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdIsGuidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdIsGuidConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_is_guid",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesNodeIdWrapNodeIdIsNull({required WrapNodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 91)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdIsNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_is_null",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesNodeIdWrapNodeIdIsNumeric({required WrapNodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 92)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdIsNumericConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdIsNumericConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_is_numeric",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesNodeIdWrapNodeIdIsString({required WrapNodeId that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 93)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdIsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdIsStringConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_is_string",
        argNames: ["that"],
      );

  @override
  WrapNodeId crateApiTypesNodeIdWrapNodeIdNextNumeric(
      {required int namespace}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(namespace, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 94)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdNextNumericConstMeta,
      argValues: [namespace],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdNextNumericConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_next_numeric",
        argNames: ["namespace"],
      );

  @override
  WrapNodeId crateApiTypesNodeIdWrapNodeIdNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 95)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_null",
        argNames: [],
      );

  @override
  WrapNodeId crateApiTypesNodeIdWrapNodeIdObjectsFolderId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 96)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdObjectsFolderIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdObjectsFolderIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_objects_folder_id",
        argNames: [],
      );

  @override
  WrapNodeId crateApiTypesNodeIdWrapNodeIdRootFolderId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 97)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdRootFolderIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdRootFolderIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_root_folder_id",
        argNames: [],
      );

  @override
  WrapNodeId crateApiTypesNodeIdWrapNodeIdTypesFolderId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 98)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdTypesFolderIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdTypesFolderIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_types_folder_id",
        argNames: [],
      );

  @override
  WrapNodeId crateApiTypesNodeIdWrapNodeIdViewsFolderId() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 99)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapNodeIdViewsFolderIdConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapNodeIdViewsFolderIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapNodeId_views_folder_id",
        argNames: [],
      );

  @override
  Future<void> crateApiTypesNodeIdWrapidentifier({required WrapIdentifier a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_wrap_identifier(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 100, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapidentifierConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapidentifierConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapidentifier",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesNodeIdWrapnodeid({required WrapNodeId a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 101, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapnodeidConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapnodeidConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapnodeid",
        argNames: ["a"],
      );

  @override
  WrapIdentifier crateApiTypesNodeIdWrapIdentifierFrom({required int v}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(v, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 102)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_wrap_identifier,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesNodeIdWrapIdentifierFromConstMeta,
      argValues: [v],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesNodeIdWrapIdentifierFromConstMeta =>
      const TaskConstMeta(
        debugName: "wrap_identifier_from",
        argNames: ["v"],
      );

  @override
  String crateApiTypesStatusCodeWrapStatusCodeDescription(
      {required WrapStatusCode that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 103)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeWrapStatusCodeDescriptionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiTypesStatusCodeWrapStatusCodeDescriptionConstMeta =>
          const TaskConstMeta(
            debugName: "WrapStatusCode_description",
            argNames: ["that"],
          );

  @override
  WrapStatusCode? crateApiTypesStatusCodeWrapStatusCodeFromStr(
      {required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 104)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeWrapStatusCodeFromStrConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeWrapStatusCodeFromStrConstMeta =>
      const TaskConstMeta(
        debugName: "WrapStatusCode_from_str",
        argNames: ["s"],
      );

  @override
  WrapStatusCode? crateApiTypesStatusCodeWrapStatusCodeFromU32(
      {required int code}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(code, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 105)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeWrapStatusCodeFromU32ConstMeta,
      argValues: [code],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeWrapStatusCodeFromU32ConstMeta =>
      const TaskConstMeta(
        debugName: "WrapStatusCode_from_u32",
        argNames: ["code"],
      );

  @override
  String crateApiTypesStatusCodeWrapStatusCodeName(
      {required WrapStatusCode that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 106)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeWrapStatusCodeNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeWrapStatusCodeNameConstMeta =>
      const TaskConstMeta(
        debugName: "WrapStatusCode_name",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiTypesStatusCodeWrapstatuscode(
      {required WrapStatusCode a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 107, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStatusCodeWrapstatuscodeConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStatusCodeWrapstatuscodeConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapstatuscode",
        argNames: ["a"],
      );

  @override
  bool crateApiTypesStringWrapUaStringIsEmpty({required WrapUaString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 108)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapUaStringIsEmptyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapUaStringIsEmptyConstMeta =>
      const TaskConstMeta(
        debugName: "WrapUaString_is_empty",
        argNames: ["that"],
      );

  @override
  bool crateApiTypesStringWrapUaStringIsNull({required WrapUaString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 109)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapUaStringIsNullConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapUaStringIsNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapUaString_is_null",
        argNames: ["that"],
      );

  @override
  PlatformInt64 crateApiTypesStringWrapUaStringLen(
      {required WrapUaString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 110)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapUaStringLenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapUaStringLenConstMeta =>
      const TaskConstMeta(
        debugName: "WrapUaString_len",
        argNames: ["that"],
      );

  @override
  WrapUaString crateApiTypesStringWrapUaStringNull() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 111)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapUaStringNullConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapUaStringNullConstMeta =>
      const TaskConstMeta(
        debugName: "WrapUaString_null",
        argNames: [],
      );

  @override
  void crateApiTypesStringWrapUaStringSetValue(
      {required WrapUaString that, String? value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            that, serializer);
        sse_encode_opt_String(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 112)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapUaStringSetValueConstMeta,
      argValues: [that, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapUaStringSetValueConstMeta =>
      const TaskConstMeta(
        debugName: "WrapUaString_set_value",
        argNames: ["that", "value"],
      );

  @override
  WrapUaString crateApiTypesStringWrapUaStringSubstring(
      {required WrapUaString that, required BigInt min, required BigInt max}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            that, serializer);
        sse_encode_usize(min, serializer);
        sse_encode_usize(max, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 113)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiTypesStringWrapUaStringSubstringConstMeta,
      argValues: [that, min, max],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapUaStringSubstringConstMeta =>
      const TaskConstMeta(
        debugName: "WrapUaString_substring",
        argNames: ["that", "min", "max"],
      );

  @override
  String? crateApiTypesStringWrapUaStringValue({required WrapUaString that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 114)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapUaStringValueConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapUaStringValueConstMeta =>
      const TaskConstMeta(
        debugName: "WrapUaString_value",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiTypesStringWrapuastring({required WrapUaString a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 115, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapuastringConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapuastringConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapuastring",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesStringWrapxmlelement({required WrapUaString a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 116, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesStringWrapxmlelementConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesStringWrapxmlelementConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapxmlelement",
        argNames: ["a"],
      );

  @override
  Future<void> crateApiTypesVariantWrapvariant({required WrapVariant a}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_wrap_variant(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 117, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTypesVariantWrapvariantConstMeta,
      argValues: [a],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTypesVariantWrapvariantConstMeta =>
      const TaskConstMeta(
        debugName: "_wrapvariant",
        argNames: ["a"],
      );

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_wrap_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem_Output_unit_AnyhowException(
          FutureOr<void> Function(WrapDataValue, WrapMonitoredItem) raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_wrap_data_value(rawArg0);
      final arg1 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
              rawArg1);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0, arg1));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxWrapDateTime => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxWrapDateTime => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxWrapGuid => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxWrapGuid => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataChangeCallback => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataChangeCallback => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinHandleWrapStatusCode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinHandleWrapStatusCode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapByteString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapByteString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientEndpoint => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientEndpoint => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientUserToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientUserToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapDateTime => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapDateTime => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapGuid => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapGuid => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapMonitoredItem => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapMonitoredItem => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapMonitoredItemCreateRequest => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapMonitoredItemCreateRequest => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapNodeId => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapNodeId => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapSession => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapSession => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapSessionEventLoop => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapSessionEventLoop => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapStatusCode => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapStatusCode => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapUaString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapUaString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  BoxWrapDateTime
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxWrapDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxWrapGuid
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxWrapGuidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DataChangeCallback
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataChangeCallbackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinHandleWrapStatusCode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleWrapStatusCodeImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  WrapByteString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapByteStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientEndpoint
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientUserToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapDateTime
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapGuid
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapGuidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapMonitoredItem
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapMonitoredItemImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapMonitoredItemCreateRequest
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapMonitoredItemCreateRequestImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  WrapNodeId
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapNodeIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSession
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSessionEventLoop
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionEventLoopImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapStatusCode
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapStatusCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapUaString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapUaStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSession
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapUaString
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapUaStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapByteString
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapByteStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientUserToken
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapDateTime
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapGuid
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapGuidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapMonitoredItem
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapMonitoredItemImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapNodeId
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapNodeIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSession
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapUaString
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapUaStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  FutureOr<void> Function(WrapDataValue, WrapMonitoredItem)
      dco_decode_DartFn_Inputs_wrap_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  BoxWrapDateTime
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxWrapDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxWrapGuid
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxWrapGuidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DataChangeCallback
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataChangeCallbackImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinHandleWrapStatusCode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleWrapStatusCodeImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  WrapByteString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapByteStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientEndpoint
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientUserToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapDateTime
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapDateTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapGuid
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapGuidImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapMonitoredItem
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapMonitoredItemImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapMonitoredItemCreateRequest
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapMonitoredItemCreateRequestImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  WrapNodeId
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapNodeIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSession
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSessionEventLoop
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionEventLoopImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapStatusCode
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapStatusCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapUaString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapUaStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  WrapByteString
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
        raw);
  }

  @protected
  WrapDateTime
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
        raw);
  }

  @protected
  WrapStatusCode
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
        raw);
  }

  @protected
  int dco_decode_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  WrapDataValue dco_decode_box_autoadd_wrap_data_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_wrap_data_value(raw);
  }

  @protected
  WrapIdentifier dco_decode_box_autoadd_wrap_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_wrap_identifier(raw);
  }

  @protected
  WrapVariant dco_decode_box_autoadd_wrap_variant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_wrap_variant(raw);
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  int dco_decode_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, WrapClientEndpoint)>
      dco_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint)
        .toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  WrapByteString?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            raw);
  }

  @protected
  WrapDateTime?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            raw);
  }

  @protected
  WrapStatusCode?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
            raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_16(raw);
  }

  @protected
  WrapVariant? dco_decode_opt_box_autoadd_wrap_variant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_wrap_variant(raw);
  }

  @protected
  (
    WrapSession,
    WrapSessionEventLoop
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_event_loop(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          arr[1]),
    );
  }

  @protected
  (
    String,
    WrapClientEndpoint
  ) dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array16 dco_decode_u_8_array_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array16(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WrapDataValue dco_decode_wrap_data_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return WrapDataValue(
      value: dco_decode_opt_box_autoadd_wrap_variant(arr[0]),
      status:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
              arr[1]),
      sourceTimestamp:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
              arr[2]),
      sourcePicoseconds: dco_decode_opt_box_autoadd_u_16(arr[3]),
      serverTimestamp:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
              arr[4]),
      serverPicoseconds: dco_decode_opt_box_autoadd_u_16(arr[5]),
    );
  }

  @protected
  WrapIdentifier dco_decode_wrap_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return WrapIdentifier_Numeric(
          dco_decode_u_32(raw[1]),
        );
      case 1:
        return WrapIdentifier_String(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
              raw[1]),
        );
      case 2:
        return WrapIdentifier_Guid(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
              raw[1]),
        );
      case 3:
        return WrapIdentifier_ByteString(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  WrapVariant dco_decode_wrap_variant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return WrapVariant_Empty();
      case 1:
        return WrapVariant_Boolean(
          dco_decode_bool(raw[1]),
        );
      case 2:
        return WrapVariant_SByte(
          dco_decode_i_8(raw[1]),
        );
      case 3:
        return WrapVariant_Byte(
          dco_decode_u_8(raw[1]),
        );
      case 4:
        return WrapVariant_Int16(
          dco_decode_i_16(raw[1]),
        );
      case 5:
        return WrapVariant_UInt16(
          dco_decode_u_16(raw[1]),
        );
      case 6:
        return WrapVariant_Int32(
          dco_decode_i_32(raw[1]),
        );
      case 7:
        return WrapVariant_UInt32(
          dco_decode_u_32(raw[1]),
        );
      case 8:
        return WrapVariant_Int64(
          dco_decode_i_64(raw[1]),
        );
      case 9:
        return WrapVariant_UInt64(
          dco_decode_u_64(raw[1]),
        );
      case 10:
        return WrapVariant_Float(
          dco_decode_f_32(raw[1]),
        );
      case 11:
        return WrapVariant_Double(
          dco_decode_f_64(raw[1]),
        );
      case 12:
        return WrapVariant_String(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
              raw[1]),
        );
      case 13:
        return WrapVariant_DateTime(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
              raw[1]),
        );
      case 14:
        return WrapVariant_Guid(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
              raw[1]),
        );
      case 15:
        return WrapVariant_StatusCode(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
              raw[1]),
        );
      case 16:
        return WrapVariant_ByteString(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
              raw[1]),
        );
      case 17:
        return WrapVariant_XmlElement(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  BoxWrapDateTime
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxWrapDateTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxWrapGuid
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxWrapGuidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DataChangeCallback
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DataChangeCallbackImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinHandleWrapStatusCode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleWrapStatusCodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapByteString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapByteStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientEndpoint
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientEndpointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientUserToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapDateTime
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapDateTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapGuid
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapGuidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapMonitoredItem
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapMonitoredItemImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapMonitoredItemCreateRequest
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapMonitoredItemCreateRequestImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapNodeId
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapNodeIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSession
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSessionEventLoop
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionEventLoopImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapStatusCode
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapStatusCodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapUaString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapUaStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSession
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapUaString
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapUaStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapByteString
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapByteStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientUserToken
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapDateTime
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapDateTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapGuid
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapGuidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapMonitoredItem
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapMonitoredItemImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapNodeId
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapNodeIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSession
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapUaString
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapUaStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner.toInt());
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_isize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  BoxWrapDateTime
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxWrapDateTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxWrapGuid
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxWrapGuidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DataChangeCallback
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DataChangeCallbackImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  JoinHandleWrapStatusCode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleWrapStatusCodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapByteString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapByteStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientEndpoint
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientEndpointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientUserToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapDateTime
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapDateTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapGuid
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapGuidImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapMonitoredItem
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapMonitoredItemImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapMonitoredItemCreateRequest
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapMonitoredItemCreateRequestImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapNodeId
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapNodeIdImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSession
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSessionEventLoop
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionEventLoopImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapStatusCode
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapStatusCodeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapUaString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapUaStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  WrapByteString
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
        deserializer));
  }

  @protected
  WrapDateTime
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
        deserializer));
  }

  @protected
  WrapStatusCode
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
        deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_16(deserializer));
  }

  @protected
  WrapDataValue sse_decode_box_autoadd_wrap_data_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_wrap_data_value(deserializer));
  }

  @protected
  WrapIdentifier sse_decode_box_autoadd_wrap_identifier(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_wrap_identifier(deserializer));
  }

  @protected
  WrapVariant sse_decode_box_autoadd_wrap_variant(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_wrap_variant(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt8();
  }

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, WrapClientEndpoint)>
      sse_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, WrapClientEndpoint)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
              deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WrapByteString?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  WrapDateTime?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  WrapStatusCode?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WrapVariant? sse_decode_opt_box_autoadd_wrap_variant(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_wrap_variant(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (
    WrapSession,
    WrapSessionEventLoop
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_event_loop(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    String,
    WrapClientEndpoint
  ) sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array16 sse_decode_u_8_array_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array16(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WrapDataValue sse_decode_wrap_data_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_opt_box_autoadd_wrap_variant(deserializer);
    var var_status =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
            deserializer);
    var var_sourceTimestamp =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            deserializer);
    var var_sourcePicoseconds = sse_decode_opt_box_autoadd_u_16(deserializer);
    var var_serverTimestamp =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
            deserializer);
    var var_serverPicoseconds = sse_decode_opt_box_autoadd_u_16(deserializer);
    return WrapDataValue(
        value: var_value,
        status: var_status,
        sourceTimestamp: var_sourceTimestamp,
        sourcePicoseconds: var_sourcePicoseconds,
        serverTimestamp: var_serverTimestamp,
        serverPicoseconds: var_serverPicoseconds);
  }

  @protected
  WrapIdentifier sse_decode_wrap_identifier(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_u_32(deserializer);
        return WrapIdentifier_Numeric(var_field0);
      case 1:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
                deserializer);
        return WrapIdentifier_String(var_field0);
      case 2:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
                deserializer);
        return WrapIdentifier_Guid(var_field0);
      case 3:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
                deserializer);
        return WrapIdentifier_ByteString(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  WrapVariant sse_decode_wrap_variant(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return WrapVariant_Empty();
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return WrapVariant_Boolean(var_field0);
      case 2:
        var var_field0 = sse_decode_i_8(deserializer);
        return WrapVariant_SByte(var_field0);
      case 3:
        var var_field0 = sse_decode_u_8(deserializer);
        return WrapVariant_Byte(var_field0);
      case 4:
        var var_field0 = sse_decode_i_16(deserializer);
        return WrapVariant_Int16(var_field0);
      case 5:
        var var_field0 = sse_decode_u_16(deserializer);
        return WrapVariant_UInt16(var_field0);
      case 6:
        var var_field0 = sse_decode_i_32(deserializer);
        return WrapVariant_Int32(var_field0);
      case 7:
        var var_field0 = sse_decode_u_32(deserializer);
        return WrapVariant_UInt32(var_field0);
      case 8:
        var var_field0 = sse_decode_i_64(deserializer);
        return WrapVariant_Int64(var_field0);
      case 9:
        var var_field0 = sse_decode_u_64(deserializer);
        return WrapVariant_UInt64(var_field0);
      case 10:
        var var_field0 = sse_decode_f_32(deserializer);
        return WrapVariant_Float(var_field0);
      case 11:
        var var_field0 = sse_decode_f_64(deserializer);
        return WrapVariant_Double(var_field0);
      case 12:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
                deserializer);
        return WrapVariant_String(var_field0);
      case 13:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
                deserializer);
        return WrapVariant_DateTime(var_field0);
      case 14:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
                deserializer);
        return WrapVariant_Guid(var_field0);
      case 15:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
                deserializer);
        return WrapVariant_StatusCode(var_field0);
      case 16:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
                deserializer);
        return WrapVariant_ByteString(var_field0);
      case 17:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
                deserializer);
        return WrapVariant_XmlElement(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
          BoxWrapDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxWrapDateTimeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
          BoxWrapGuid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxWrapGuidImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          DataChangeCallback self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DataChangeCallbackImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode(
          JoinHandleWrapStatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinHandleWrapStatusCodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          WrapByteString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapByteStringImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          WrapClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          WrapClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          WrapClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientEndpointImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          WrapClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientUserTokenImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          WrapDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapDateTimeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          WrapGuid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapGuidImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          WrapMonitoredItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapMonitoredItemImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest(
          WrapMonitoredItemCreateRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapMonitoredItemCreateRequestImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          WrapNodeId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapNodeIdImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          WrapSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          WrapSessionEventLoop self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionEventLoopImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          WrapStatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapStatusCodeImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          WrapUaString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapUaStringImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          WrapClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          WrapSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          WrapUaString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapUaStringImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          WrapByteString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapByteStringImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          WrapClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientBuilderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          WrapClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientUserTokenImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          WrapDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapDateTimeImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          WrapGuid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapGuidImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          WrapMonitoredItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapMonitoredItemImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          WrapNodeId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapNodeIdImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          WrapSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          WrapUaString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapUaStringImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.inMicroseconds), serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_wrap_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem_Output_unit_AnyhowException(
          FutureOr<void> Function(WrapDataValue, WrapMonitoredItem) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_wrap_data_value_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem_Output_unit_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_isize(
        PlatformPointerUtil.ptrToPlatformInt64(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
          BoxWrapDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxWrapDateTimeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
          BoxWrapGuid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxWrapGuidImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataChangeCallback(
          DataChangeCallback self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DataChangeCallbackImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleWrapStatusCode(
          JoinHandleWrapStatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinHandleWrapStatusCodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          WrapByteString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapByteStringImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          WrapClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          WrapClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          WrapClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientEndpointImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          WrapClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientUserTokenImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          WrapDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapDateTimeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
          WrapGuid self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapGuidImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItem(
          WrapMonitoredItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapMonitoredItemImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapMonitoredItemCreateRequest(
          WrapMonitoredItemCreateRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapMonitoredItemCreateRequestImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapNodeId(
          WrapNodeId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapNodeIdImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          WrapSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          WrapSessionEventLoop self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionEventLoopImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          WrapStatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapStatusCodeImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
          WrapUaString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapUaStringImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          WrapByteString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          WrapDateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
        self, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          WrapStatusCode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_wrap_data_value(
      WrapDataValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_wrap_data_value(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_wrap_identifier(
      WrapIdentifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_wrap_identifier(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_wrap_variant(
      WrapVariant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_wrap_variant(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt8(self);
  }

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          List<(String, WrapClientEndpoint)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          WrapByteString? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          WrapDateTime? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
          self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          WrapStatusCode? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_wrap_variant(
      WrapVariant? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_wrap_variant(self, serializer);
    }
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_event_loop(
          (WrapSession, WrapSessionEventLoop) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          (String, WrapClientEndpoint) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
        self.$2, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_16(U8Array16 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_wrap_data_value(
      WrapDataValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_wrap_variant(self.value, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
        self.status, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
        self.sourceTimestamp, serializer);
    sse_encode_opt_box_autoadd_u_16(self.sourcePicoseconds, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapDateTime(
        self.serverTimestamp, serializer);
    sse_encode_opt_box_autoadd_u_16(self.serverPicoseconds, serializer);
  }

  @protected
  void sse_encode_wrap_identifier(
      WrapIdentifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case WrapIdentifier_Numeric(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_u_32(field0, serializer);
      case WrapIdentifier_String(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            field0, serializer);
      case WrapIdentifier_Guid(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapGuid(
            field0, serializer);
      case WrapIdentifier_ByteString(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_wrap_variant(WrapVariant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case WrapVariant_Empty():
        sse_encode_i_32(0, serializer);
      case WrapVariant_Boolean(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
      case WrapVariant_SByte(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_i_8(field0, serializer);
      case WrapVariant_Byte(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_u_8(field0, serializer);
      case WrapVariant_Int16(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_i_16(field0, serializer);
      case WrapVariant_UInt16(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_u_16(field0, serializer);
      case WrapVariant_Int32(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_i_32(field0, serializer);
      case WrapVariant_UInt32(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_u_32(field0, serializer);
      case WrapVariant_Int64(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_i_64(field0, serializer);
      case WrapVariant_UInt64(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_u_64(field0, serializer);
      case WrapVariant_Float(field0: final field0):
        sse_encode_i_32(10, serializer);
        sse_encode_f_32(field0, serializer);
      case WrapVariant_Double(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_f_64(field0, serializer);
      case WrapVariant_String(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            field0, serializer);
      case WrapVariant_DateTime(field0: final field0):
        sse_encode_i_32(13, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapDateTime(
            field0, serializer);
      case WrapVariant_Guid(field0: final field0):
        sse_encode_i_32(14, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxWrapGuid(
            field0, serializer);
      case WrapVariant_StatusCode(field0: final field0):
        sse_encode_i_32(15, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapStatusCode(
            field0, serializer);
      case WrapVariant_ByteString(field0: final field0):
        sse_encode_i_32(16, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapByteString(
            field0, serializer);
      case WrapVariant_XmlElement(field0: final field0):
        sse_encode_i_32(17, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapUAString(
            field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }
}

@sealed
class BoxWrapDateTimeImpl extends RustOpaque implements BoxWrapDateTime {
  // Not to be used by end users
  BoxWrapDateTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxWrapDateTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BoxWrapDateTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxWrapDateTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxWrapDateTimePtr,
  );
}

@sealed
class BoxWrapGuidImpl extends RustOpaque implements BoxWrapGuid {
  // Not to be used by end users
  BoxWrapGuidImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxWrapGuidImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BoxWrapGuid,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxWrapGuid,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxWrapGuidPtr,
  );
}

@sealed
class DataChangeCallbackImpl extends RustOpaque implements DataChangeCallback {
  // Not to be used by end users
  DataChangeCallbackImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DataChangeCallbackImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DataChangeCallback,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DataChangeCallback,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DataChangeCallbackPtr,
  );
}

@sealed
class JoinHandleWrapStatusCodeImpl extends RustOpaque
    implements JoinHandleWrapStatusCode {
  // Not to be used by end users
  JoinHandleWrapStatusCodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JoinHandleWrapStatusCodeImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_JoinHandleWrapStatusCode,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_JoinHandleWrapStatusCode,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_JoinHandleWrapStatusCodePtr,
  );
}

@sealed
class WrapByteStringImpl extends RustOpaque implements WrapByteString {
  // Not to be used by end users
  WrapByteStringImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapByteStringImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapByteString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapByteString,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapByteStringPtr,
  );

  /// Encodes the bytestring as a Base64 encoded string
  String asBase64() =>
      RustLib.instance.api.crateApiTypesByteStringWrapByteStringAsBase64(
        that: this,
      );

  bool isEmpty() =>
      RustLib.instance.api.crateApiTypesByteStringWrapByteStringIsEmpty(
        that: this,
      );

  /// Test if the string is null
  bool isNull() =>
      RustLib.instance.api.crateApiTypesByteStringWrapByteStringIsNull(
        that: this,
      );

  /// Test if the string is null or empty
  bool isNullOrEmpty() =>
      RustLib.instance.api.crateApiTypesByteStringWrapByteStringIsNullOrEmpty(
        that: this,
      );

  /// This function is meant for use with NumericRange. It creates a substring from this string
  /// from min up to and inclusive of max. Note that min must have an index within the string
  /// but max is allowed to be beyond the end in which case the remainder of the string is
  /// returned (see docs for NumericRange).
  WrapByteString substring({required BigInt min, required BigInt max}) =>
      RustLib.instance.api.crateApiTypesByteStringWrapByteStringSubstring(
          that: this, min: min, max: max);
}

@sealed
class WrapClientBuilderImpl extends RustOpaque implements WrapClientBuilder {
  // Not to be used by end users
  WrapClientBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapClientBuilderImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapClientBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapClientBuilder,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapClientBuilderPtr,
  );

  /// Sets the application name.
  WrapClientBuilder applicationName(String applicationName) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderApplicationName(
          that: this, applicationName: applicationName);

  /// Sets the application uri.
  WrapClientBuilder applicationUri(String applicationUri) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderApplicationUri(
          that: this, applicationUri: applicationUri);

  /// Sets a custom client certificate path. The path is required to be provided as a partial
  /// path relative to the PKI directory. If set, this path will be used to read the client
  /// certificate from disk. The certificate can be in either the .der or .pem format.
  WrapClientBuilder certificatePath(String certificatePath) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderCertificatePath(
          that: this, certificatePath: certificatePath);

  /// Yields a [`Client`] from the values set by the builder. If the builder is not in a valid state
  /// it will return `None`.
  ///
  /// [`Client`]: client/struct.Client.html
  WrapClient client() =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderClient(
        that: this,
      );

  /// Sets whether the client should generate its own key pair if there is none found in the pki
  /// directory.
  WrapClientBuilder createSampleKeypair(bool createSampleKeypair) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderCreateSampleKeypair(
          that: this, createSampleKeypair: createSampleKeypair);

  /// Sets the id of the default endpoint to connect to.
  WrapClientBuilder defaultEndpoint(String defaultEndpoint) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderDefaultEndpoint(
          that: this, defaultEndpoint: defaultEndpoint);

  /// Adds an endpoint to the list of endpoints the client knows of.
  WrapClientBuilder endpoint(
          {required String endpointId, required WrapClientEndpoint endpoint}) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderEndpoint(
          that: this, endpointId: endpointId, endpoint: endpoint);

  /// Adds multiple endpoints to the list of endpoints the client knows of.
  WrapClientBuilder endpoints(List<(String, WrapClientEndpoint)> endpoints) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderEndpoints(
          that: this, endpoints: endpoints);

  /// Sets whether the client should ignore clock skew so the client can make a successful
  /// connection to the server, even when the client and server clocks are out of sync.
  WrapClientBuilder ignoreClockSkew() =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderIgnoreClockSkew(
        that: this,
      );

  bool isValid() =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderIsValid(
        that: this,
      );

  /// Time between making simple Read requests to the server to check for liveness
  /// and avoid session timeouts.
  WrapClientBuilder keepAliveInterval(Duration keepAliveInterval) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderKeepAliveInterval(
          that: this, keepAliveInterval: keepAliveInterval);

  /// Maximum number of array elements. 0 actually means 0, i.e. no array permitted
  WrapClientBuilder maxArrayLength(BigInt maxArrayLength) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxArrayLength(
          that: this, maxArrayLength: maxArrayLength);

  /// Maximum length in bytes of a byte string. 0 actually means 0, i.e. no byte strings permitted.
  WrapClientBuilder maxByteStringLength(BigInt maxByteStringLength) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxByteStringLength(
          that: this, maxByteStringLength: maxByteStringLength);

  /// Sets the maximum number of chunks in an outgoing message. 0 means no limit.
  WrapClientBuilder maxChunkCount(BigInt maxChunkCount) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxChunkCount(
          that: this, maxChunkCount: maxChunkCount);

  /// Maximum size of each individual outgoing message chunk.
  WrapClientBuilder maxChunkSize(BigInt maxChunkSize) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxChunkSize(
          that: this, maxChunkSize: maxChunkSize);

  /// Maximum size of each incoming chunk.
  WrapClientBuilder maxIncomingChunkSize(BigInt maxIncomingChunkSize) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxIncomingChunkSize(
          that: this, maxIncomingChunkSize: maxIncomingChunkSize);

  /// Maximum number of inflight messages.
  WrapClientBuilder maxInflightMessages(BigInt maxInflightMessages) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxInflightMessages(
          that: this, maxInflightMessages: maxInflightMessages);

  /// Maximum number of pending publish requests.
  WrapClientBuilder maxInflightPublish(BigInt maxInflightPublish) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxInflightPublish(
          that: this, maxInflightPublish: maxInflightPublish);

  /// Sets the maximum outgoing message size in bytes. 0 means no limit.
  WrapClientBuilder maxMessageSize(BigInt maxMessageSize) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxMessageSize(
          that: this, maxMessageSize: maxMessageSize);

  /// Maximum length in bytes of a string. 0 actually means 0, i.e. no string permitted.
  WrapClientBuilder maxStringLength(BigInt maxStringLength) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxStringLength(
          that: this, maxStringLength: maxStringLength);

  /// Set the lowest allowed publishing interval by the client.
  /// The server may also enforce its own minimum.
  WrapClientBuilder minPublishInterval(Duration minPublishInterval) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMinPublishInterval(
          that: this, minPublishInterval: minPublishInterval);

  /// Sets the pki directory where client's own key pair is stored and where `/trusted` and
  /// `/rejected` server certificates are stored.
  WrapClientBuilder pkiDir(String pkiDir) => RustLib.instance.api
      .crateApiMinimalWrapClientBuilderPkiDir(that: this, pkiDir: pkiDir);

  /// Sets the preferred locales of the client. These are passed to the server during session
  /// creation to ensure localized strings are in the preferred language.
  WrapClientBuilder preferredLocales(List<String> preferredLocales) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderPreferredLocales(
          that: this, preferredLocales: preferredLocales);

  /// Sets a custom private key path. The path is required to be provided as a partial path
  /// relative to the PKI directory. If set, this path will be used to read the private key
  /// from disk.
  WrapClientBuilder privateKeyPath(String privateKeyPath) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderPrivateKeyPath(
          that: this, privateKeyPath: privateKeyPath);

  /// Sets the product uri.
  WrapClientBuilder productUri(String productUri) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderProductUri(
          that: this, productUri: productUri);

  /// Set the timeout on publish requests sent to the server.
  WrapClientBuilder publishTimeout(Duration publishTimeout) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderPublishTimeout(
          that: this, publishTimeout: publishTimeout);

  /// When a session is recreated on the server, the client will attempt to
  /// transfer monitored subscriptions from the old session to the new.
  /// This is the maximum number of monitored items to create per request.
  WrapClientBuilder recreateMonitoredItemsChunk(
          BigInt recreateMonitoredItemsChunk) =>
      RustLib.instance.api
          .crateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunk(
              that: this,
              recreateMonitoredItemsChunk: recreateMonitoredItemsChunk);

  /// Set the timeout on requests sent to the server.
  WrapClientBuilder requestTimeout(Duration requestTimeout) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderRequestTimeout(
          that: this, requestTimeout: requestTimeout);

  /// Session name - the default name to use for a new session
  WrapClientBuilder sessionName(String sessionName) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionName(
          that: this, sessionName: sessionName);

  /// Initial time between retries when backing off on session reconnects.
  WrapClientBuilder sessionRetryInitial(Duration sessionRetryInitial) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionRetryInitial(
          that: this, sessionRetryInitial: sessionRetryInitial);

  /// Sets the session retry limit.
  ///
  /// # Panics
  ///
  /// Panics if `session_retry_limit` is less -1.
  WrapClientBuilder sessionRetryLimit(int sessionRetryLimit) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionRetryLimit(
          that: this, sessionRetryLimit: sessionRetryLimit);

  /// Maximum time between retries when backing off on session reconnects.
  WrapClientBuilder sessionRetryMax(Duration sessionRetryMax) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionRetryMax(
          that: this, sessionRetryMax: sessionRetryMax);

  /// Sets the session timeout period, in milliseconds.
  WrapClientBuilder sessionTimeout(int sessionTimeout) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionTimeout(
          that: this, sessionTimeout: sessionTimeout);

  /// Sets whether the client should automatically trust servers. If this is not set then
  /// the client will reject the server upon first connect and the server's certificate
  /// must be manually moved from pki's `/rejected` folder to the `/trusted` folder. If it is
  /// set, then the server cert will automatically be stored in the `/trusted` folder.
  WrapClientBuilder trustServerCerts(bool trustServerCerts) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderTrustServerCerts(
          that: this, trustServerCerts: trustServerCerts);

  /// Adds a user token to the list supported by the client.
  WrapClientBuilder userToken(
          String userTokenId, WrapClientUserToken userToken) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderUserToken(
          that: this, userTokenId: userTokenId, userToken: userToken);

  /// Sets whether the client should verify server certificates. Regardless of this setting,
  /// server certificates are always checked to see if they are trusted and have a valid key
  /// length. In addition (if `verify_server_certs` is unset or is set to `true`) it will
  /// verify the hostname, application uri and the not before / after values to ensure validity.
  WrapClientBuilder verifyServerCerts(bool verifyServerCerts) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderVerifyServerCerts(
          that: this, verifyServerCerts: verifyServerCerts);
}

@sealed
class WrapClientEndpointImpl extends RustOpaque implements WrapClientEndpoint {
  // Not to be used by end users
  WrapClientEndpointImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapClientEndpointImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapClientEndpoint,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapClientEndpoint,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapClientEndpointPtr,
  );
}

@sealed
class WrapClientImpl extends RustOpaque implements WrapClient {
  // Not to be used by end users
  WrapClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapClientPtr,
  );

  /// Connects to a named endpoint that you have defined in the `ClientConfig`
  /// and creates a [`Session`] for that endpoint. Note that `GetEndpoints` is first
  /// called on the server and it is expected to support the endpoint you intend to connect to.
  ///
  /// # Returns
  ///
  /// * `Ok((Arc<AsyncSession>, SessionEventLoop))` - Session and event loop.
  /// * `Err(StatusCode)` - Request failed, [Status code](StatusCode) is the reason for failure.
  ///
  Future<(WrapSession, WrapSessionEventLoop)> connectToEndpointId(
          {String? endpointId}) =>
      RustLib.instance.api.crateApiMinimalWrapClientConnectToEndpointId(
          that: this, endpointId: endpointId);
}

@sealed
class WrapClientUserTokenImpl extends RustOpaque
    implements WrapClientUserToken {
  // Not to be used by end users
  WrapClientUserTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapClientUserTokenImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_WrapClientUserToken,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapClientUserToken,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapClientUserTokenPtr,
  );

  bool isValid() =>
      RustLib.instance.api.crateApiMinimalWrapClientUserTokenIsValid(
        that: this,
      );
}

@sealed
class WrapDateTimeImpl extends RustOpaque implements WrapDateTime {
  // Not to be used by end users
  WrapDateTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapDateTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapDateTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapDateTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapDateTimePtr,
  );

  /// Time as chrono
  DateTime asChrono() =>
      RustLib.instance.api.crateApiTypesDateTimeWrapDateTimeAsChrono(
        that: this,
      );

  /// To checked ticks. Function returns 0 or MAX_INT64
  /// if date exceeds valid OPC UA range
  PlatformInt64 checkedTicks() =>
      RustLib.instance.api.crateApiTypesDateTimeWrapDateTimeCheckedTicks(
        that: this,
      );

  /// Tests if the date time is null (i.e. equal to epoch)
  bool isNull() => RustLib.instance.api.crateApiTypesDateTimeWrapDateTimeIsNull(
        that: this,
      );

  /// Returns the time in ticks, of 100 nanosecond intervals
  PlatformInt64 ticks() =>
      RustLib.instance.api.crateApiTypesDateTimeWrapDateTimeTicks(
        that: this,
      );

  /// Returns an RFC 3339 and ISO 8601 date and time string such as 1996-12-19T16:39:57-08:00.
  String toRfc3339() =>
      RustLib.instance.api.crateApiTypesDateTimeWrapDateTimeToRfc3339(
        that: this,
      );
}

@sealed
class WrapGuidImpl extends RustOpaque implements WrapGuid {
  // Not to be used by end users
  WrapGuidImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapGuidImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapGuid,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapGuid,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapGuidPtr,
  );

  /// Returns the bytes of the Guid
  U8Array16 asBytes() => RustLib.instance.api.crateApiTypesGuidWrapGuidAsBytes(
        that: this,
      );
}

@sealed
class WrapMonitoredItemCreateRequestImpl extends RustOpaque
    implements WrapMonitoredItemCreateRequest {
  // Not to be used by end users
  WrapMonitoredItemCreateRequestImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapMonitoredItemCreateRequestImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_WrapMonitoredItemCreateRequest,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_WrapMonitoredItemCreateRequest,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_WrapMonitoredItemCreateRequestPtr,
  );
}

@sealed
class WrapMonitoredItemImpl extends RustOpaque implements WrapMonitoredItem {
  // Not to be used by end users
  WrapMonitoredItemImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapMonitoredItemImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapMonitoredItem,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapMonitoredItem,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapMonitoredItemPtr,
  );

  /// Client assigned handle for the monitored item.
  int clientHandle() => RustLib.instance.api
          .crateApiTypesMonitoredItemWrapMonitoredItemClientHandle(
        that: this,
      );

  /// Whether the oldest values are discarded on queue overflow on the server.
  bool discardOldest() => RustLib.instance.api
          .crateApiTypesMonitoredItemWrapMonitoredItemDiscardOldest(
        that: this,
      );

  /// Server assigned ID of the monitored item.
  int id() =>
      RustLib.instance.api.crateApiTypesMonitoredItemWrapMonitoredItemId(
        that: this,
      );

  /// Queue size on the server.
  BigInt queueSize() =>
      RustLib.instance.api.crateApiTypesMonitoredItemWrapMonitoredItemQueueSize(
        that: this,
      );

  /// Sampling interval.
  double samplingInterval() => RustLib.instance.api
          .crateApiTypesMonitoredItemWrapMonitoredItemSamplingInterval(
        that: this,
      );
}

@sealed
class WrapNodeIdImpl extends RustOpaque implements WrapNodeId {
  // Not to be used by end users
  WrapNodeIdImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapNodeIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapNodeId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapNodeId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapNodeIdPtr,
  );

  /// Test if the node id us a byte string
  bool isByteString() =>
      RustLib.instance.api.crateApiTypesNodeIdWrapNodeIdIsByteString(
        that: this,
      );

  /// Test if the node id is a guid
  bool isGuid() => RustLib.instance.api.crateApiTypesNodeIdWrapNodeIdIsGuid(
        that: this,
      );

  /// Test if the node id is null, i.e. 0 namespace and 0 identifier
  bool isNull() => RustLib.instance.api.crateApiTypesNodeIdWrapNodeIdIsNull(
        that: this,
      );

  /// Test if the node id is numeric
  bool isNumeric() =>
      RustLib.instance.api.crateApiTypesNodeIdWrapNodeIdIsNumeric(
        that: this,
      );

  /// Test if the node id is a string
  bool isString() => RustLib.instance.api.crateApiTypesNodeIdWrapNodeIdIsString(
        that: this,
      );
}

@sealed
class WrapSessionEventLoopImpl extends RustOpaque
    implements WrapSessionEventLoop {
  // Not to be used by end users
  WrapSessionEventLoopImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapSessionEventLoopImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_WrapSessionEventLoop,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapSessionEventLoop,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapSessionEventLoopPtr,
  );

  /// Convenience method for running the session event loop until completion,
  /// this method will return once the session is closed manually, or
  /// after it fails to reconnect.
  ///
  /// # Returns
  ///
  /// * `StatusCode` - [Status code](StatusCode) indicating how the session terminated.
  Future<WrapStatusCode> run() =>
      RustLib.instance.api.crateApiMinimalWrapSessionEventLoopRun(
        that: this,
      );

  /// Convenience method for running the session event loop until completion on a tokio task.
  /// This method will return a [`JoinHandle`](tokio::task::JoinHandle) that will terminate
  /// once the session is closed manually, or after it fails to reconnect.
  ///
  /// # Returns
  ///
  /// * `JoinHandle<StatusCode>` - Handle to a tokio task wrapping the event loop.
  Future<JoinHandleWrapStatusCode> spawn() =>
      RustLib.instance.api.crateApiMinimalWrapSessionEventLoopSpawn(
        that: this,
      );
}

@sealed
class WrapSessionImpl extends RustOpaque implements WrapSession {
  // Not to be used by end users
  WrapSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapSession,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapSession,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapSessionPtr,
  );

  /// Send a message and wait for response, using the default configured timeout.
  ///
  /// In order to set a different timeout, call `send` on the inner channel instead.
  /// Create a subscription by sending a [`CreateSubscriptionRequest`] to the server.
  ///
  /// See OPC UA Part 4 - Services 5.13.2 for complete description of the service and error responses.
  ///
  /// # Arguments
  ///
  /// * `publishing_interval` - The requested publishing interval defines the cyclic rate that
  ///   the Subscription is being requested to return Notifications to the Client. This interval
  ///   is expressed in milliseconds. This interval is represented by the publishing timer in the
  ///   Subscription state table. The negotiated value for this parameter returned in the
  ///   response is used as the default sampling interval for MonitoredItems assigned to this
  ///   Subscription. If the requested value is 0 or negative, the server shall revise with the
  ///   fastest supported publishing interval in milliseconds.
  /// * `lifetime_count` - Requested lifetime count. The lifetime count shall be a minimum of
  ///   three times the keep keep-alive count. When the publishing timer has expired this
  ///   number of times without a Publish request being available to send a NotificationMessage,
  ///   then the Subscription shall be deleted by the Server.
  /// * `max_keep_alive_count` - Requested maximum keep-alive count. When the publishing timer has
  ///   expired this number of times without requiring any NotificationMessage to be sent, the
  ///   Subscription sends a keep-alive Message to the Client. The negotiated value for this
  ///   parameter is returned in the response. If the requested value is 0, the server shall
  ///   revise with the smallest supported keep-alive count.
  /// * `max_notifications_per_publish` - The maximum number of notifications that the Client
  ///   wishes to receive in a single Publish response. A value of zero indicates that there is
  ///   no limit. The number of notifications per Publish is the sum of monitoredItems in
  ///   the DataChangeNotification and events in the EventNotificationList.
  /// * `priority` - Indicates the relative priority of the Subscription. When more than one
  ///   Subscription needs to send Notifications, the Server should de-queue a Publish request
  ///   to the Subscription with the highest priority number. For Subscriptions with equal
  ///   priority the Server should de-queue Publish requests in a round-robin fashion.
  ///   A Client that does not require special priority settings should set this value to zero.
  /// * `publishing_enabled` - A boolean parameter with the following values - `true` publishing
  ///   is enabled for the Subscription, `false`, publishing is disabled for the Subscription.
  ///   The value of this parameter does not affect the value of the monitoring mode Attribute of
  ///   MonitoredItems.
  ///
  /// # Returns
  ///
  /// * `Ok(u32)` - identifier for new subscription
  /// * `Err(StatusCode)` - Request failed, [Status code](StatusCode) is the reason for failure.
  ///
  Future<int> createSubscriptionDataChange(
          {required Duration publishingInterval,
          required int lifetimeCount,
          required int maxKeepAliveCount,
          required int maxNotificationsPerPublish,
          required int priority,
          required bool publishingEnabled,
          required DataChangeCallback callback}) =>
      RustLib.instance.api
          .crateApiMinimalWrapSessionCreateSubscriptionDataChange(
              that: this,
              publishingInterval: publishingInterval,
              lifetimeCount: lifetimeCount,
              maxKeepAliveCount: maxKeepAliveCount,
              maxNotificationsPerPublish: maxNotificationsPerPublish,
              priority: priority,
              publishingEnabled: publishingEnabled,
              callback: callback);

  /// Disconnect from the server and wait until disconnected.
  Future<void> disconnect() =>
      RustLib.instance.api.crateApiMinimalWrapSessionDisconnect(
        that: this,
      );

  /// The internal ID of the session, used to keep track of multiple sessions in the same program.
  int sessionId() => RustLib.instance.api.crateApiMinimalWrapSessionSessionId(
        that: this,
      );

  /// Convenience method to wait for a connection to the server.
  ///
  /// You should also monitor the session event loop. If it ends, this method will never return.
  Future<bool> waitForConnection() =>
      RustLib.instance.api.crateApiMinimalWrapSessionWaitForConnection(
        that: this,
      );
}

@sealed
class WrapStatusCodeImpl extends RustOpaque implements WrapStatusCode {
  // Not to be used by end users
  WrapStatusCodeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapStatusCodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapStatusCode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapStatusCode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapStatusCodePtr,
  );

  String description() =>
      RustLib.instance.api.crateApiTypesStatusCodeWrapStatusCodeDescription(
        that: this,
      );

  String name() =>
      RustLib.instance.api.crateApiTypesStatusCodeWrapStatusCodeName(
        that: this,
      );
}

@sealed
class WrapUaStringImpl extends RustOpaque implements WrapUaString {
  // Not to be used by end users
  WrapUaStringImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapUaStringImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapUaString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapUaString,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapUaStringPtr,
  );

  /// Returns true if the string is null or empty, false otherwise
  bool isEmpty() => RustLib.instance.api.crateApiTypesStringWrapUaStringIsEmpty(
        that: this,
      );

  /// Test if the string is null.
  bool isNull() => RustLib.instance.api.crateApiTypesStringWrapUaStringIsNull(
        that: this,
      );

  /// Returns the length of the string in bytes or -1 for null.
  PlatformInt64 len() =>
      RustLib.instance.api.crateApiTypesStringWrapUaStringLen(
        that: this,
      );

  set value(String? value) => RustLib.instance.api
      .crateApiTypesStringWrapUaStringSetValue(that: this, value: value);

  /// This function is meant for use with NumericRange. It creates a substring from this string
  /// from min up to and inclusive of max. Note that min must have an index within the string
  /// but max is allowed to be beyond the end in which case the remainder of the string is
  /// returned (see docs for NumericRange).
  WrapUaString substring({required BigInt min, required BigInt max}) => RustLib
      .instance.api
      .crateApiTypesStringWrapUaStringSubstring(that: this, min: min, max: max);

  String? get value =>
      RustLib.instance.api.crateApiTypesStringWrapUaStringValue(
        that: this,
      );
}
