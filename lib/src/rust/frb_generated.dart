// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/minimal.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMinimalInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.0';

  @override
  int get rustContentHash => 1782470989;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'opcua_ffi',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiMinimalClientConfigAutoAccessorGetApplicationName(
      {required ClientConfig that});

  String crateApiMinimalClientConfigAutoAccessorGetApplicationUri(
      {required ClientConfig that});

  PathBuf? crateApiMinimalClientConfigAutoAccessorGetCertificatePath(
      {required ClientConfig that});

  bool crateApiMinimalClientConfigAutoAccessorGetCreateSampleKeypair(
      {required ClientConfig that});

  DecodingOptions crateApiMinimalClientConfigAutoAccessorGetDecodingOptions(
      {required ClientConfig that});

  String crateApiMinimalClientConfigAutoAccessorGetDefaultEndpoint(
      {required ClientConfig that});

  BTreeMapStringClientEndpoint
      crateApiMinimalClientConfigAutoAccessorGetEndpoints(
          {required ClientConfig that});

  Duration crateApiMinimalClientConfigAutoAccessorGetKeepAliveInterval(
      {required ClientConfig that});

  BigInt crateApiMinimalClientConfigAutoAccessorGetMaxInflightPublish(
      {required ClientConfig that});

  Duration crateApiMinimalClientConfigAutoAccessorGetMinPublishInterval(
      {required ClientConfig that});

  Performance crateApiMinimalClientConfigAutoAccessorGetPerformance(
      {required ClientConfig that});

  PathBuf crateApiMinimalClientConfigAutoAccessorGetPkiDir(
      {required ClientConfig that});

  List<String> crateApiMinimalClientConfigAutoAccessorGetPreferredLocales(
      {required ClientConfig that});

  PathBuf? crateApiMinimalClientConfigAutoAccessorGetPrivateKeyPath(
      {required ClientConfig that});

  String crateApiMinimalClientConfigAutoAccessorGetProductUri(
      {required ClientConfig that});

  Duration crateApiMinimalClientConfigAutoAccessorGetPublishTimeout(
      {required ClientConfig that});

  Duration crateApiMinimalClientConfigAutoAccessorGetRequestTimeout(
      {required ClientConfig that});

  String crateApiMinimalClientConfigAutoAccessorGetSessionName(
      {required ClientConfig that});

  Duration crateApiMinimalClientConfigAutoAccessorGetSessionRetryInitial(
      {required ClientConfig that});

  int crateApiMinimalClientConfigAutoAccessorGetSessionRetryLimit(
      {required ClientConfig that});

  Duration crateApiMinimalClientConfigAutoAccessorGetSessionRetryMax(
      {required ClientConfig that});

  int crateApiMinimalClientConfigAutoAccessorGetSessionTimeout(
      {required ClientConfig that});

  bool crateApiMinimalClientConfigAutoAccessorGetTrustServerCerts(
      {required ClientConfig that});

  BTreeMapStringClientUserToken
      crateApiMinimalClientConfigAutoAccessorGetUserTokens(
          {required ClientConfig that});

  bool crateApiMinimalClientConfigAutoAccessorGetVerifyServerCerts(
      {required ClientConfig that});

  void crateApiMinimalClientConfigAutoAccessorSetApplicationName(
      {required ClientConfig that, required String applicationName});

  void crateApiMinimalClientConfigAutoAccessorSetApplicationUri(
      {required ClientConfig that, required String applicationUri});

  void crateApiMinimalClientConfigAutoAccessorSetCertificatePath(
      {required ClientConfig that, PathBuf? certificatePath});

  void crateApiMinimalClientConfigAutoAccessorSetCreateSampleKeypair(
      {required ClientConfig that, required bool createSampleKeypair});

  void crateApiMinimalClientConfigAutoAccessorSetDecodingOptions(
      {required ClientConfig that, required DecodingOptions decodingOptions});

  void crateApiMinimalClientConfigAutoAccessorSetDefaultEndpoint(
      {required ClientConfig that, required String defaultEndpoint});

  void crateApiMinimalClientConfigAutoAccessorSetEndpoints(
      {required ClientConfig that,
      required BTreeMapStringClientEndpoint endpoints});

  void crateApiMinimalClientConfigAutoAccessorSetKeepAliveInterval(
      {required ClientConfig that, required Duration keepAliveInterval});

  void crateApiMinimalClientConfigAutoAccessorSetMaxInflightPublish(
      {required ClientConfig that, required BigInt maxInflightPublish});

  void crateApiMinimalClientConfigAutoAccessorSetMinPublishInterval(
      {required ClientConfig that, required Duration minPublishInterval});

  void crateApiMinimalClientConfigAutoAccessorSetPerformance(
      {required ClientConfig that, required Performance performance});

  void crateApiMinimalClientConfigAutoAccessorSetPkiDir(
      {required ClientConfig that, required PathBuf pkiDir});

  void crateApiMinimalClientConfigAutoAccessorSetPreferredLocales(
      {required ClientConfig that, required List<String> preferredLocales});

  void crateApiMinimalClientConfigAutoAccessorSetPrivateKeyPath(
      {required ClientConfig that, PathBuf? privateKeyPath});

  void crateApiMinimalClientConfigAutoAccessorSetProductUri(
      {required ClientConfig that, required String productUri});

  void crateApiMinimalClientConfigAutoAccessorSetPublishTimeout(
      {required ClientConfig that, required Duration publishTimeout});

  void crateApiMinimalClientConfigAutoAccessorSetRequestTimeout(
      {required ClientConfig that, required Duration requestTimeout});

  void crateApiMinimalClientConfigAutoAccessorSetSessionName(
      {required ClientConfig that, required String sessionName});

  void crateApiMinimalClientConfigAutoAccessorSetSessionRetryInitial(
      {required ClientConfig that, required Duration sessionRetryInitial});

  void crateApiMinimalClientConfigAutoAccessorSetSessionRetryLimit(
      {required ClientConfig that, required int sessionRetryLimit});

  void crateApiMinimalClientConfigAutoAccessorSetSessionRetryMax(
      {required ClientConfig that, required Duration sessionRetryMax});

  void crateApiMinimalClientConfigAutoAccessorSetSessionTimeout(
      {required ClientConfig that, required int sessionTimeout});

  void crateApiMinimalClientConfigAutoAccessorSetTrustServerCerts(
      {required ClientConfig that, required bool trustServerCerts});

  void crateApiMinimalClientConfigAutoAccessorSetUserTokens(
      {required ClientConfig that,
      required BTreeMapStringClientUserToken userTokens});

  void crateApiMinimalClientConfigAutoAccessorSetVerifyServerCerts(
      {required ClientConfig that, required bool verifyServerCerts});

  Future<ClientEndpoint> crateApiMinimalClientEndpointNew(
      {required String url});

  Future<SecurityPolicy> crateApiMinimalClientEndpointSecurityPolicy(
      {required ClientEndpoint that});

  Future<bool> crateApiMinimalClientUserTokenIsValid(
      {required ClientUserToken that});

  Future<ClientUserToken> crateApiMinimalClientUserTokenUserPass(
      {required String user, required String password});

  Future<void> crateApiMinimalInitApp();

  Future<int> crateApiMinimalMinimalAdder({required int a, required int b});

  Future<void> crateApiMinimalTestme({required ClientConfig config});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BTreeMapStringClientEndpoint;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BTreeMapStringClientEndpoint;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BTreeMapStringClientEndpointPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BTreeMapStringClientUserToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BTreeMapStringClientUserToken;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BTreeMapStringClientUserTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientConfigPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DecodingOptions;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DecodingOptions;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DecodingOptionsPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PathBuf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PathBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PathBufPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Performance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Performance;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PerformancePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiMinimalClientConfigAutoAccessorGetApplicationName(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetApplicationNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetApplicationNameConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_application_name",
            argNames: ["that"],
          );

  @override
  String crateApiMinimalClientConfigAutoAccessorGetApplicationUri(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetApplicationUriConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetApplicationUriConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_application_uri",
            argNames: ["that"],
          );

  @override
  PathBuf? crateApiMinimalClientConfigAutoAccessorGetCertificatePath(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetCertificatePathConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetCertificatePathConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_certificate_path",
            argNames: ["that"],
          );

  @override
  bool crateApiMinimalClientConfigAutoAccessorGetCreateSampleKeypair(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetCreateSampleKeypairConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetCreateSampleKeypairConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_create_sample_keypair",
            argNames: ["that"],
          );

  @override
  DecodingOptions crateApiMinimalClientConfigAutoAccessorGetDecodingOptions(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetDecodingOptionsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetDecodingOptionsConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_decoding_options",
            argNames: ["that"],
          );

  @override
  String crateApiMinimalClientConfigAutoAccessorGetDefaultEndpoint(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetDefaultEndpointConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetDefaultEndpointConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_default_endpoint",
            argNames: ["that"],
          );

  @override
  BTreeMapStringClientEndpoint
      crateApiMinimalClientConfigAutoAccessorGetEndpoints(
          {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientConfigAutoAccessorGetEndpointsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetEndpointsConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_endpoints",
            argNames: ["that"],
          );

  @override
  Duration crateApiMinimalClientConfigAutoAccessorGetKeepAliveInterval(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetKeepAliveIntervalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetKeepAliveIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_keep_alive_interval",
            argNames: ["that"],
          );

  @override
  BigInt crateApiMinimalClientConfigAutoAccessorGetMaxInflightPublish(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetMaxInflightPublishConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetMaxInflightPublishConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_max_inflight_publish",
            argNames: ["that"],
          );

  @override
  Duration crateApiMinimalClientConfigAutoAccessorGetMinPublishInterval(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetMinPublishIntervalConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetMinPublishIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_min_publish_interval",
            argNames: ["that"],
          );

  @override
  Performance crateApiMinimalClientConfigAutoAccessorGetPerformance(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetPerformanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetPerformanceConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_performance",
            argNames: ["that"],
          );

  @override
  PathBuf crateApiMinimalClientConfigAutoAccessorGetPkiDir(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientConfigAutoAccessorGetPkiDirConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetPkiDirConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_pki_dir",
            argNames: ["that"],
          );

  @override
  List<String> crateApiMinimalClientConfigAutoAccessorGetPreferredLocales(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetPreferredLocalesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetPreferredLocalesConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_preferred_locales",
            argNames: ["that"],
          );

  @override
  PathBuf? crateApiMinimalClientConfigAutoAccessorGetPrivateKeyPath(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetPrivateKeyPathConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetPrivateKeyPathConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_private_key_path",
            argNames: ["that"],
          );

  @override
  String crateApiMinimalClientConfigAutoAccessorGetProductUri(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientConfigAutoAccessorGetProductUriConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetProductUriConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_product_uri",
            argNames: ["that"],
          );

  @override
  Duration crateApiMinimalClientConfigAutoAccessorGetPublishTimeout(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetPublishTimeoutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetPublishTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_publish_timeout",
            argNames: ["that"],
          );

  @override
  Duration crateApiMinimalClientConfigAutoAccessorGetRequestTimeout(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetRequestTimeoutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetRequestTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_request_timeout",
            argNames: ["that"],
          );

  @override
  String crateApiMinimalClientConfigAutoAccessorGetSessionName(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetSessionNameConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetSessionNameConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_session_name",
            argNames: ["that"],
          );

  @override
  Duration crateApiMinimalClientConfigAutoAccessorGetSessionRetryInitial(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetSessionRetryInitialConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetSessionRetryInitialConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_session_retry_initial",
            argNames: ["that"],
          );

  @override
  int crateApiMinimalClientConfigAutoAccessorGetSessionRetryLimit(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetSessionRetryLimitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetSessionRetryLimitConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_session_retry_limit",
            argNames: ["that"],
          );

  @override
  Duration crateApiMinimalClientConfigAutoAccessorGetSessionRetryMax(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Chrono_Duration,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetSessionRetryMaxConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetSessionRetryMaxConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_session_retry_max",
            argNames: ["that"],
          );

  @override
  int crateApiMinimalClientConfigAutoAccessorGetSessionTimeout(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetSessionTimeoutConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetSessionTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_session_timeout",
            argNames: ["that"],
          );

  @override
  bool crateApiMinimalClientConfigAutoAccessorGetTrustServerCerts(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetTrustServerCertsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetTrustServerCertsConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_trust_server_certs",
            argNames: ["that"],
          );

  @override
  BTreeMapStringClientUserToken
      crateApiMinimalClientConfigAutoAccessorGetUserTokens(
          {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientConfigAutoAccessorGetUserTokensConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetUserTokensConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_user_tokens",
            argNames: ["that"],
          );

  @override
  bool crateApiMinimalClientConfigAutoAccessorGetVerifyServerCerts(
      {required ClientConfig that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorGetVerifyServerCertsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorGetVerifyServerCertsConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_get_verify_server_certs",
            argNames: ["that"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetApplicationName(
      {required ClientConfig that, required String applicationName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_String(applicationName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetApplicationNameConstMeta,
      argValues: [that, applicationName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetApplicationNameConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_application_name",
            argNames: ["that", "applicationName"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetApplicationUri(
      {required ClientConfig that, required String applicationUri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_String(applicationUri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetApplicationUriConstMeta,
      argValues: [that, applicationUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetApplicationUriConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_application_uri",
            argNames: ["that", "applicationUri"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetCertificatePath(
      {required ClientConfig that, PathBuf? certificatePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            certificatePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetCertificatePathConstMeta,
      argValues: [that, certificatePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetCertificatePathConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_certificate_path",
            argNames: ["that", "certificatePath"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetCreateSampleKeypair(
      {required ClientConfig that, required bool createSampleKeypair}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_bool(createSampleKeypair, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetCreateSampleKeypairConstMeta,
      argValues: [that, createSampleKeypair],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetCreateSampleKeypairConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_create_sample_keypair",
            argNames: ["that", "createSampleKeypair"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetDecodingOptions(
      {required ClientConfig that, required DecodingOptions decodingOptions}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions(
            decodingOptions, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetDecodingOptionsConstMeta,
      argValues: [that, decodingOptions],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetDecodingOptionsConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_decoding_options",
            argNames: ["that", "decodingOptions"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetDefaultEndpoint(
      {required ClientConfig that, required String defaultEndpoint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_String(defaultEndpoint, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetDefaultEndpointConstMeta,
      argValues: [that, defaultEndpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetDefaultEndpointConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_default_endpoint",
            argNames: ["that", "defaultEndpoint"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetEndpoints(
      {required ClientConfig that,
      required BTreeMapStringClientEndpoint endpoints}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint(
            endpoints, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientConfigAutoAccessorSetEndpointsConstMeta,
      argValues: [that, endpoints],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetEndpointsConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_endpoints",
            argNames: ["that", "endpoints"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetKeepAliveInterval(
      {required ClientConfig that, required Duration keepAliveInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Chrono_Duration(keepAliveInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetKeepAliveIntervalConstMeta,
      argValues: [that, keepAliveInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetKeepAliveIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_keep_alive_interval",
            argNames: ["that", "keepAliveInterval"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetMaxInflightPublish(
      {required ClientConfig that, required BigInt maxInflightPublish}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_usize(maxInflightPublish, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetMaxInflightPublishConstMeta,
      argValues: [that, maxInflightPublish],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetMaxInflightPublishConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_max_inflight_publish",
            argNames: ["that", "maxInflightPublish"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetMinPublishInterval(
      {required ClientConfig that, required Duration minPublishInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Chrono_Duration(minPublishInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetMinPublishIntervalConstMeta,
      argValues: [that, minPublishInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetMinPublishIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_min_publish_interval",
            argNames: ["that", "minPublishInterval"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetPerformance(
      {required ClientConfig that, required Performance performance}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance(
            performance, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetPerformanceConstMeta,
      argValues: [that, performance],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetPerformanceConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_performance",
            argNames: ["that", "performance"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetPkiDir(
      {required ClientConfig that, required PathBuf pkiDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            pkiDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientConfigAutoAccessorSetPkiDirConstMeta,
      argValues: [that, pkiDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetPkiDirConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_pki_dir",
            argNames: ["that", "pkiDir"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetPreferredLocales(
      {required ClientConfig that, required List<String> preferredLocales}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_list_String(preferredLocales, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetPreferredLocalesConstMeta,
      argValues: [that, preferredLocales],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetPreferredLocalesConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_preferred_locales",
            argNames: ["that", "preferredLocales"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetPrivateKeyPath(
      {required ClientConfig that, PathBuf? privateKeyPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            privateKeyPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetPrivateKeyPathConstMeta,
      argValues: [that, privateKeyPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetPrivateKeyPathConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_private_key_path",
            argNames: ["that", "privateKeyPath"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetProductUri(
      {required ClientConfig that, required String productUri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_String(productUri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientConfigAutoAccessorSetProductUriConstMeta,
      argValues: [that, productUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetProductUriConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_product_uri",
            argNames: ["that", "productUri"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetPublishTimeout(
      {required ClientConfig that, required Duration publishTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Chrono_Duration(publishTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetPublishTimeoutConstMeta,
      argValues: [that, publishTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetPublishTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_publish_timeout",
            argNames: ["that", "publishTimeout"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetRequestTimeout(
      {required ClientConfig that, required Duration requestTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Chrono_Duration(requestTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetRequestTimeoutConstMeta,
      argValues: [that, requestTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetRequestTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_request_timeout",
            argNames: ["that", "requestTimeout"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetSessionName(
      {required ClientConfig that, required String sessionName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_String(sessionName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetSessionNameConstMeta,
      argValues: [that, sessionName],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetSessionNameConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_session_name",
            argNames: ["that", "sessionName"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetSessionRetryInitial(
      {required ClientConfig that, required Duration sessionRetryInitial}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Chrono_Duration(sessionRetryInitial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetSessionRetryInitialConstMeta,
      argValues: [that, sessionRetryInitial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetSessionRetryInitialConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_session_retry_initial",
            argNames: ["that", "sessionRetryInitial"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetSessionRetryLimit(
      {required ClientConfig that, required int sessionRetryLimit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_i_32(sessionRetryLimit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetSessionRetryLimitConstMeta,
      argValues: [that, sessionRetryLimit],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetSessionRetryLimitConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_session_retry_limit",
            argNames: ["that", "sessionRetryLimit"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetSessionRetryMax(
      {required ClientConfig that, required Duration sessionRetryMax}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Chrono_Duration(sessionRetryMax, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetSessionRetryMaxConstMeta,
      argValues: [that, sessionRetryMax],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetSessionRetryMaxConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_session_retry_max",
            argNames: ["that", "sessionRetryMax"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetSessionTimeout(
      {required ClientConfig that, required int sessionTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_u_32(sessionTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetSessionTimeoutConstMeta,
      argValues: [that, sessionTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetSessionTimeoutConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_session_timeout",
            argNames: ["that", "sessionTimeout"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetTrustServerCerts(
      {required ClientConfig that, required bool trustServerCerts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_bool(trustServerCerts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetTrustServerCertsConstMeta,
      argValues: [that, trustServerCerts],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetTrustServerCertsConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_trust_server_certs",
            argNames: ["that", "trustServerCerts"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetUserTokens(
      {required ClientConfig that,
      required BTreeMapStringClientUserToken userTokens}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken(
            userTokens, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientConfigAutoAccessorSetUserTokensConstMeta,
      argValues: [that, userTokens],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetUserTokensConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_user_tokens",
            argNames: ["that", "userTokens"],
          );

  @override
  void crateApiMinimalClientConfigAutoAccessorSetVerifyServerCerts(
      {required ClientConfig that, required bool verifyServerCerts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            that, serializer);
        sse_encode_bool(verifyServerCerts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalClientConfigAutoAccessorSetVerifyServerCertsConstMeta,
      argValues: [that, verifyServerCerts],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalClientConfigAutoAccessorSetVerifyServerCertsConstMeta =>
          const TaskConstMeta(
            debugName: "ClientConfig_auto_accessor_set_verify_server_certs",
            argNames: ["that", "verifyServerCerts"],
          );

  @override
  Future<ClientEndpoint> crateApiMinimalClientEndpointNew(
      {required String url}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_client_endpoint,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientEndpointNewConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientEndpointNewConstMeta =>
      const TaskConstMeta(
        debugName: "client_endpoint_new",
        argNames: ["url"],
      );

  @override
  Future<SecurityPolicy> crateApiMinimalClientEndpointSecurityPolicy(
      {required ClientEndpoint that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_client_endpoint(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_security_policy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientEndpointSecurityPolicyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientEndpointSecurityPolicyConstMeta =>
      const TaskConstMeta(
        debugName: "client_endpoint_security_policy",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiMinimalClientUserTokenIsValid(
      {required ClientUserToken that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_client_user_token(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientUserTokenIsValidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientUserTokenIsValidConstMeta =>
      const TaskConstMeta(
        debugName: "client_user_token_is_valid",
        argNames: ["that"],
      );

  @override
  Future<ClientUserToken> crateApiMinimalClientUserTokenUserPass(
      {required String user, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 54, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_client_user_token,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalClientUserTokenUserPassConstMeta,
      argValues: [user, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalClientUserTokenUserPassConstMeta =>
      const TaskConstMeta(
        debugName: "client_user_token_user_pass",
        argNames: ["user", "password"],
      );

  @override
  Future<void> crateApiMinimalInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<int> crateApiMinimalMinimalAdder({required int a, required int b}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalMinimalAdderConstMeta,
      argValues: [a, b],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalMinimalAdderConstMeta =>
      const TaskConstMeta(
        debugName: "minimal_adder",
        argNames: ["a", "b"],
      );

  @override
  Future<void> crateApiMinimalTestme({required ClientConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalTestmeConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalTestmeConstMeta => const TaskConstMeta(
        debugName: "testme",
        argNames: ["config"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BTreeMapStringClientEndpoint => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BTreeMapStringClientEndpoint => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BTreeMapStringClientUserToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BTreeMapStringClientUserToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ClientConfig => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ClientConfig => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DecodingOptions => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DecodingOptions => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PathBuf => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PathBuf => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Performance => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Performance => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance;

  @protected
  BTreeMapStringClientEndpoint
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BTreeMapStringClientEndpointImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BTreeMapStringClientUserToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BTreeMapStringClientUserTokenImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ClientConfig
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DecodingOptions
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DecodingOptionsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Performance
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PerformanceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientConfig
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientConfig
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  BTreeMapStringClientEndpoint
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BTreeMapStringClientEndpointImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  BTreeMapStringClientUserToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BTreeMapStringClientUserTokenImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  ClientConfig
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DecodingOptions
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DecodingOptionsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Performance
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PerformanceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PathBuf
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        raw);
  }

  @protected
  ClientEndpoint dco_decode_box_autoadd_client_endpoint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_client_endpoint(raw);
  }

  @protected
  ClientUserToken dco_decode_box_autoadd_client_user_token(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_client_user_token(raw);
  }

  @protected
  ClientEndpoint dco_decode_client_endpoint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ClientEndpoint(
      url: dco_decode_String(arr[0]),
      securityPolicy: dco_decode_String(arr[1]),
      securityMode: dco_decode_String(arr[2]),
      userTokenId: dco_decode_String(arr[3]),
    );
  }

  @protected
  ClientUserToken dco_decode_client_user_token(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ClientUserToken(
      user: dco_decode_String(arr[0]),
      password: dco_decode_opt_String(arr[1]),
      certPath: dco_decode_opt_String(arr[2]),
      privateKeyPath: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PathBuf?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            raw);
  }

  @protected
  SecurityPolicy dco_decode_security_policy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SecurityPolicy.values[raw as int];
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  BTreeMapStringClientEndpoint
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BTreeMapStringClientEndpointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BTreeMapStringClientUserToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BTreeMapStringClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientConfig
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DecodingOptions
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DecodingOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PathBuf
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Performance
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PerformanceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientConfig
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientConfig
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner.toInt());
  }

  @protected
  BTreeMapStringClientEndpoint
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BTreeMapStringClientEndpointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BTreeMapStringClientUserToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BTreeMapStringClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ClientConfig
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientConfigImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DecodingOptions
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DecodingOptionsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PathBuf
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Performance
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PerformanceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PathBuf
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        deserializer));
  }

  @protected
  ClientEndpoint sse_decode_box_autoadd_client_endpoint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_client_endpoint(deserializer));
  }

  @protected
  ClientUserToken sse_decode_box_autoadd_client_user_token(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_client_user_token(deserializer));
  }

  @protected
  ClientEndpoint sse_decode_client_endpoint(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_securityPolicy = sse_decode_String(deserializer);
    var var_securityMode = sse_decode_String(deserializer);
    var var_userTokenId = sse_decode_String(deserializer);
    return ClientEndpoint(
        url: var_url,
        securityPolicy: var_securityPolicy,
        securityMode: var_securityMode,
        userTokenId: var_userTokenId);
  }

  @protected
  ClientUserToken sse_decode_client_user_token(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_user = sse_decode_String(deserializer);
    var var_password = sse_decode_opt_String(deserializer);
    var var_certPath = sse_decode_opt_String(deserializer);
    var var_privateKeyPath = sse_decode_opt_String(deserializer);
    return ClientUserToken(
        user: var_user,
        password: var_password,
        certPath: var_certPath,
        privateKeyPath: var_privateKeyPath);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PathBuf?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  SecurityPolicy sse_decode_security_policy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return SecurityPolicy.values[inner];
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint(
          BTreeMapStringClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BTreeMapStringClientEndpointImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken(
          BTreeMapStringClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BTreeMapStringClientUserTokenImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          ClientConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientConfigImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions(
          DecodingOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DecodingOptionsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PathBufImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance(
          Performance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PerformanceImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          ClientConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          ClientConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientConfigImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.inMicroseconds), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientEndpoint(
          BTreeMapStringClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BTreeMapStringClientEndpointImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBTreeMapStringClientUserToken(
          BTreeMapStringClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BTreeMapStringClientUserTokenImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
          ClientConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ClientConfigImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecodingOptions(
          DecodingOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DecodingOptionsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PathBufImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPerformance(
          Performance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PerformanceImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_client_endpoint(
      ClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_client_endpoint(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_client_user_token(
      ClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_client_user_token(self, serializer);
  }

  @protected
  void sse_encode_client_endpoint(
      ClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.securityPolicy, serializer);
    sse_encode_String(self.securityMode, serializer);
    sse_encode_String(self.userTokenId, serializer);
  }

  @protected
  void sse_encode_client_user_token(
      ClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.user, serializer);
    sse_encode_opt_String(self.password, serializer);
    sse_encode_opt_String(self.certPath, serializer);
    sse_encode_opt_String(self.privateKeyPath, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          PathBuf? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
          self, serializer);
    }
  }

  @protected
  void sse_encode_security_policy(
      SecurityPolicy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class BTreeMapStringClientEndpointImpl extends RustOpaque
    implements BTreeMapStringClientEndpoint {
  // Not to be used by end users
  BTreeMapStringClientEndpointImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BTreeMapStringClientEndpointImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BTreeMapStringClientEndpoint,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BTreeMapStringClientEndpoint,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BTreeMapStringClientEndpointPtr,
  );
}

@sealed
class BTreeMapStringClientUserTokenImpl extends RustOpaque
    implements BTreeMapStringClientUserToken {
  // Not to be used by end users
  BTreeMapStringClientUserTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BTreeMapStringClientUserTokenImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_BTreeMapStringClientUserToken,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_BTreeMapStringClientUserToken,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_BTreeMapStringClientUserTokenPtr,
  );
}

@sealed
class ClientConfigImpl extends RustOpaque implements ClientConfig {
  // Not to be used by end users
  ClientConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ClientConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientConfigPtr,
  );

  String get applicationName => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetApplicationName(
        that: this,
      );

  String get applicationUri => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetApplicationUri(
        that: this,
      );

  PathBuf? get certificatePath => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetCertificatePath(
        that: this,
      );

  bool get createSampleKeypair => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetCreateSampleKeypair(
        that: this,
      );

  DecodingOptions get decodingOptions => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetDecodingOptions(
        that: this,
      );

  String get defaultEndpoint => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetDefaultEndpoint(
        that: this,
      );

  BTreeMapStringClientEndpoint get endpoints =>
      RustLib.instance.api.crateApiMinimalClientConfigAutoAccessorGetEndpoints(
        that: this,
      );

  Duration get keepAliveInterval => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetKeepAliveInterval(
        that: this,
      );

  BigInt get maxInflightPublish => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetMaxInflightPublish(
        that: this,
      );

  Duration get minPublishInterval => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetMinPublishInterval(
        that: this,
      );

  Performance get performance => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetPerformance(
        that: this,
      );

  PathBuf get pkiDir =>
      RustLib.instance.api.crateApiMinimalClientConfigAutoAccessorGetPkiDir(
        that: this,
      );

  List<String> get preferredLocales => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetPreferredLocales(
        that: this,
      );

  PathBuf? get privateKeyPath => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetPrivateKeyPath(
        that: this,
      );

  String get productUri =>
      RustLib.instance.api.crateApiMinimalClientConfigAutoAccessorGetProductUri(
        that: this,
      );

  Duration get publishTimeout => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetPublishTimeout(
        that: this,
      );

  Duration get requestTimeout => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetRequestTimeout(
        that: this,
      );

  String get sessionName => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetSessionName(
        that: this,
      );

  Duration get sessionRetryInitial => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetSessionRetryInitial(
        that: this,
      );

  int get sessionRetryLimit => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetSessionRetryLimit(
        that: this,
      );

  Duration get sessionRetryMax => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetSessionRetryMax(
        that: this,
      );

  int get sessionTimeout => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetSessionTimeout(
        that: this,
      );

  bool get trustServerCerts => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetTrustServerCerts(
        that: this,
      );

  BTreeMapStringClientUserToken get userTokens =>
      RustLib.instance.api.crateApiMinimalClientConfigAutoAccessorGetUserTokens(
        that: this,
      );

  bool get verifyServerCerts => RustLib.instance.api
          .crateApiMinimalClientConfigAutoAccessorGetVerifyServerCerts(
        that: this,
      );

  set applicationName(String applicationName) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetApplicationName(
          that: this, applicationName: applicationName);

  set applicationUri(String applicationUri) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetApplicationUri(
          that: this, applicationUri: applicationUri);

  set certificatePath(PathBuf? certificatePath) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetCertificatePath(
          that: this, certificatePath: certificatePath);

  set createSampleKeypair(bool createSampleKeypair) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetCreateSampleKeypair(
          that: this, createSampleKeypair: createSampleKeypair);

  set decodingOptions(DecodingOptions decodingOptions) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetDecodingOptions(
          that: this, decodingOptions: decodingOptions);

  set defaultEndpoint(String defaultEndpoint) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetDefaultEndpoint(
          that: this, defaultEndpoint: defaultEndpoint);

  set endpoints(BTreeMapStringClientEndpoint endpoints) =>
      RustLib.instance.api.crateApiMinimalClientConfigAutoAccessorSetEndpoints(
          that: this, endpoints: endpoints);

  set keepAliveInterval(Duration keepAliveInterval) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetKeepAliveInterval(
          that: this, keepAliveInterval: keepAliveInterval);

  set maxInflightPublish(BigInt maxInflightPublish) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetMaxInflightPublish(
          that: this, maxInflightPublish: maxInflightPublish);

  set minPublishInterval(Duration minPublishInterval) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetMinPublishInterval(
          that: this, minPublishInterval: minPublishInterval);

  set performance(Performance performance) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetPerformance(
          that: this, performance: performance);

  set pkiDir(PathBuf pkiDir) =>
      RustLib.instance.api.crateApiMinimalClientConfigAutoAccessorSetPkiDir(
          that: this, pkiDir: pkiDir);

  set preferredLocales(List<String> preferredLocales) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetPreferredLocales(
          that: this, preferredLocales: preferredLocales);

  set privateKeyPath(PathBuf? privateKeyPath) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetPrivateKeyPath(
          that: this, privateKeyPath: privateKeyPath);

  set productUri(String productUri) =>
      RustLib.instance.api.crateApiMinimalClientConfigAutoAccessorSetProductUri(
          that: this, productUri: productUri);

  set publishTimeout(Duration publishTimeout) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetPublishTimeout(
          that: this, publishTimeout: publishTimeout);

  set requestTimeout(Duration requestTimeout) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetRequestTimeout(
          that: this, requestTimeout: requestTimeout);

  set sessionName(String sessionName) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetSessionName(
          that: this, sessionName: sessionName);

  set sessionRetryInitial(Duration sessionRetryInitial) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetSessionRetryInitial(
          that: this, sessionRetryInitial: sessionRetryInitial);

  set sessionRetryLimit(int sessionRetryLimit) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetSessionRetryLimit(
          that: this, sessionRetryLimit: sessionRetryLimit);

  set sessionRetryMax(Duration sessionRetryMax) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetSessionRetryMax(
          that: this, sessionRetryMax: sessionRetryMax);

  set sessionTimeout(int sessionTimeout) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetSessionTimeout(
          that: this, sessionTimeout: sessionTimeout);

  set trustServerCerts(bool trustServerCerts) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetTrustServerCerts(
          that: this, trustServerCerts: trustServerCerts);

  set userTokens(BTreeMapStringClientUserToken userTokens) =>
      RustLib.instance.api.crateApiMinimalClientConfigAutoAccessorSetUserTokens(
          that: this, userTokens: userTokens);

  set verifyServerCerts(bool verifyServerCerts) => RustLib.instance.api
      .crateApiMinimalClientConfigAutoAccessorSetVerifyServerCerts(
          that: this, verifyServerCerts: verifyServerCerts);
}

@sealed
class DecodingOptionsImpl extends RustOpaque implements DecodingOptions {
  // Not to be used by end users
  DecodingOptionsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DecodingOptionsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DecodingOptions,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DecodingOptions,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DecodingOptionsPtr,
  );
}

@sealed
class PathBufImpl extends RustOpaque implements PathBuf {
  // Not to be used by end users
  PathBufImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PathBufImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PathBuf,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBuf,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBufPtr,
  );
}

@sealed
class PerformanceImpl extends RustOpaque implements Performance {
  // Not to be used by end users
  PerformanceImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PerformanceImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Performance,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Performance,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PerformancePtr,
  );
}
