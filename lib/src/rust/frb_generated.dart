// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/minimal.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMinimalInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.0';

  @override
  int get rustContentHash => 2137984558;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'opcua_ffi',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  WrapClientBuilder crateApiMinimalWrapClientBuilderApplicationName(
      {required WrapClientBuilder that, required String applicationName});

  WrapClientBuilder crateApiMinimalWrapClientBuilderApplicationUri(
      {required WrapClientBuilder that, required String applicationUri});

  WrapClientBuilder crateApiMinimalWrapClientBuilderCertificatePath(
      {required WrapClientBuilder that, required String certificatePath});

  WrapClient crateApiMinimalWrapClientBuilderClient(
      {required WrapClientBuilder that});

  WrapClientBuilder crateApiMinimalWrapClientBuilderCreateSampleKeypair(
      {required WrapClientBuilder that, required bool createSampleKeypair});

  WrapClientBuilder crateApiMinimalWrapClientBuilderDefaultEndpoint(
      {required WrapClientBuilder that, required String defaultEndpoint});

  WrapClientBuilder crateApiMinimalWrapClientBuilderEndpoint(
      {required WrapClientBuilder that,
      required String endpointId,
      required WrapClientEndpoint endpoint});

  WrapClientBuilder crateApiMinimalWrapClientBuilderEndpoints(
      {required WrapClientBuilder that,
      required List<(String, WrapClientEndpoint)> endpoints});

  WrapClientBuilder crateApiMinimalWrapClientBuilderFromConfig(
      {required String path});

  WrapClientBuilder crateApiMinimalWrapClientBuilderIgnoreClockSkew(
      {required WrapClientBuilder that});

  bool crateApiMinimalWrapClientBuilderIsValid(
      {required WrapClientBuilder that});

  WrapClientBuilder crateApiMinimalWrapClientBuilderKeepAliveInterval(
      {required WrapClientBuilder that, required Duration keepAliveInterval});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxArrayLength(
      {required WrapClientBuilder that, required BigInt maxArrayLength});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxByteStringLength(
      {required WrapClientBuilder that, required BigInt maxByteStringLength});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxChunkCount(
      {required WrapClientBuilder that, required BigInt maxChunkCount});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxChunkSize(
      {required WrapClientBuilder that, required BigInt maxChunkSize});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxIncomingChunkSize(
      {required WrapClientBuilder that, required BigInt maxIncomingChunkSize});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxInflightMessages(
      {required WrapClientBuilder that, required BigInt maxInflightMessages});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxInflightPublish(
      {required WrapClientBuilder that, required BigInt maxInflightPublish});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxMessageSize(
      {required WrapClientBuilder that, required BigInt maxMessageSize});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxStringLength(
      {required WrapClientBuilder that, required BigInt maxStringLength});

  WrapClientBuilder crateApiMinimalWrapClientBuilderMinPublishInterval(
      {required WrapClientBuilder that, required Duration minPublishInterval});

  WrapClientBuilder crateApiMinimalWrapClientBuilderNew();

  WrapClientBuilder crateApiMinimalWrapClientBuilderPkiDir(
      {required WrapClientBuilder that, required String pkiDir});

  WrapClientBuilder crateApiMinimalWrapClientBuilderPreferredLocales(
      {required WrapClientBuilder that,
      required List<String> preferredLocales});

  WrapClientBuilder crateApiMinimalWrapClientBuilderPrivateKeyPath(
      {required WrapClientBuilder that, required String privateKeyPath});

  WrapClientBuilder crateApiMinimalWrapClientBuilderProductUri(
      {required WrapClientBuilder that, required String productUri});

  WrapClientBuilder crateApiMinimalWrapClientBuilderPublishTimeout(
      {required WrapClientBuilder that, required Duration publishTimeout});

  WrapClientBuilder crateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunk(
      {required WrapClientBuilder that,
      required BigInt recreateMonitoredItemsChunk});

  WrapClientBuilder crateApiMinimalWrapClientBuilderRequestTimeout(
      {required WrapClientBuilder that, required Duration requestTimeout});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionName(
      {required WrapClientBuilder that, required String sessionName});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryInitial(
      {required WrapClientBuilder that, required Duration sessionRetryInitial});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryLimit(
      {required WrapClientBuilder that, required int sessionRetryLimit});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryMax(
      {required WrapClientBuilder that, required Duration sessionRetryMax});

  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionTimeout(
      {required WrapClientBuilder that, required int sessionTimeout});

  WrapClientBuilder crateApiMinimalWrapClientBuilderTrustServerCerts(
      {required WrapClientBuilder that, required bool trustServerCerts});

  WrapClientBuilder crateApiMinimalWrapClientBuilderUserToken(
      {required WrapClientBuilder that,
      required String userTokenId,
      required WrapClientUserToken userToken});

  WrapClientBuilder crateApiMinimalWrapClientBuilderVerifyServerCerts(
      {required WrapClientBuilder that, required bool verifyServerCerts});

  WrapClientEndpoint crateApiMinimalWrapClientEndpointNew(
      {required String url});

  bool crateApiMinimalWrapClientUserTokenIsValid(
      {required WrapClientUserToken that});

  WrapClientUserToken crateApiMinimalWrapClientUserTokenUserPass(
      {required String user, required String password});

  WrapClientUserToken crateApiMinimalWrapClientUserTokenX509(
      {required String user,
      required String certPath,
      required String privateKeyPath});

  Future<(WrapSession, WrapSessionEventLoop)>
      crateApiMinimalWrapClientConnectToEndpointId(
          {required WrapClient that, String? endpointId});

  Future<String> crateApiMinimalWrapSessionEventLoopRun(
      {required WrapSessionEventLoop that});

  Future<JoinHandleString> crateApiMinimalWrapSessionEventLoopSpawn(
      {required WrapSessionEventLoop that});

  Future<void> crateApiMinimalWrapSessionDisconnect(
      {required WrapSession that});

  Future<int> crateApiMinimalWrapSessionSessionId({required WrapSession that});

  Future<bool> crateApiMinimalWrapSessionWaitForConnection(
      {required WrapSession that});

  Future<void> crateApiMinimalInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinHandleString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinHandleString;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_JoinHandleStringPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WrapClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapClientBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientEndpoint;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientEndpoint;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapClientEndpointPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientUserToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientUserToken;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapClientUserTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WrapSessionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapSessionEventLoop;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapSessionEventLoop;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_WrapSessionEventLoopPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderApplicationName(
      {required WrapClientBuilder that, required String applicationName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(applicationName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderApplicationNameConstMeta,
      argValues: [that, applicationName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderApplicationNameConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_application_name",
        argNames: ["that", "applicationName"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderApplicationUri(
      {required WrapClientBuilder that, required String applicationUri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(applicationUri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderApplicationUriConstMeta,
      argValues: [that, applicationUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderApplicationUriConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_application_uri",
        argNames: ["that", "applicationUri"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderCertificatePath(
      {required WrapClientBuilder that, required String certificatePath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(certificatePath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderCertificatePathConstMeta,
      argValues: [that, certificatePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderCertificatePathConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_certificate_path",
        argNames: ["that", "certificatePath"],
      );

  @override
  WrapClient crateApiMinimalWrapClientBuilderClient(
      {required WrapClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderClientConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_client",
        argNames: ["that"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderCreateSampleKeypair(
      {required WrapClientBuilder that, required bool createSampleKeypair}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_bool(createSampleKeypair, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderCreateSampleKeypairConstMeta,
      argValues: [that, createSampleKeypair],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderCreateSampleKeypairConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_create_sample_keypair",
            argNames: ["that", "createSampleKeypair"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderDefaultEndpoint(
      {required WrapClientBuilder that, required String defaultEndpoint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(defaultEndpoint, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderDefaultEndpointConstMeta,
      argValues: [that, defaultEndpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderDefaultEndpointConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_default_endpoint",
        argNames: ["that", "defaultEndpoint"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderEndpoint(
      {required WrapClientBuilder that,
      required String endpointId,
      required WrapClientEndpoint endpoint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(endpointId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
            endpoint, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderEndpointConstMeta,
      argValues: [that, endpointId, endpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderEndpointConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_endpoint",
        argNames: ["that", "endpointId", "endpoint"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderEndpoints(
      {required WrapClientBuilder that,
      required List<(String, WrapClientEndpoint)> endpoints}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
            endpoints, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderEndpointsConstMeta,
      argValues: [that, endpoints],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderEndpointsConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_endpoints",
        argNames: ["that", "endpoints"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderFromConfig(
      {required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderFromConfigConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderFromConfigConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_from_config",
        argNames: ["path"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderIgnoreClockSkew(
      {required WrapClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderIgnoreClockSkewConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderIgnoreClockSkewConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_ignore_clock_skew",
        argNames: ["that"],
      );

  @override
  bool crateApiMinimalWrapClientBuilderIsValid(
      {required WrapClientBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderIsValidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderIsValidConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_is_valid",
        argNames: ["that"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderKeepAliveInterval(
      {required WrapClientBuilder that, required Duration keepAliveInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(keepAliveInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderKeepAliveIntervalConstMeta,
      argValues: [that, keepAliveInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderKeepAliveIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_keep_alive_interval",
            argNames: ["that", "keepAliveInterval"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxArrayLength(
      {required WrapClientBuilder that, required BigInt maxArrayLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxArrayLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxArrayLengthConstMeta,
      argValues: [that, maxArrayLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxArrayLengthConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_array_length",
        argNames: ["that", "maxArrayLength"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxByteStringLength(
      {required WrapClientBuilder that, required BigInt maxByteStringLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxByteStringLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxByteStringLengthConstMeta,
      argValues: [that, maxByteStringLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMaxByteStringLengthConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_max_byte_string_length",
            argNames: ["that", "maxByteStringLength"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxChunkCount(
      {required WrapClientBuilder that, required BigInt maxChunkCount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxChunkCount, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxChunkCountConstMeta,
      argValues: [that, maxChunkCount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxChunkCountConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_chunk_count",
        argNames: ["that", "maxChunkCount"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxChunkSize(
      {required WrapClientBuilder that, required BigInt maxChunkSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxChunkSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxChunkSizeConstMeta,
      argValues: [that, maxChunkSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxChunkSizeConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_chunk_size",
        argNames: ["that", "maxChunkSize"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxIncomingChunkSize(
      {required WrapClientBuilder that, required BigInt maxIncomingChunkSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxIncomingChunkSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxIncomingChunkSizeConstMeta,
      argValues: [that, maxIncomingChunkSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMaxIncomingChunkSizeConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_max_incoming_chunk_size",
            argNames: ["that", "maxIncomingChunkSize"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxInflightMessages(
      {required WrapClientBuilder that, required BigInt maxInflightMessages}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxInflightMessages, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxInflightMessagesConstMeta,
      argValues: [that, maxInflightMessages],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMaxInflightMessagesConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_max_inflight_messages",
            argNames: ["that", "maxInflightMessages"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxInflightPublish(
      {required WrapClientBuilder that, required BigInt maxInflightPublish}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxInflightPublish, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxInflightPublishConstMeta,
      argValues: [that, maxInflightPublish],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMaxInflightPublishConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_max_inflight_publish",
            argNames: ["that", "maxInflightPublish"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxMessageSize(
      {required WrapClientBuilder that, required BigInt maxMessageSize}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxMessageSize, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxMessageSizeConstMeta,
      argValues: [that, maxMessageSize],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxMessageSizeConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_message_size",
        argNames: ["that", "maxMessageSize"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMaxStringLength(
      {required WrapClientBuilder that, required BigInt maxStringLength}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(maxStringLength, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMaxStringLengthConstMeta,
      argValues: [that, maxStringLength],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderMaxStringLengthConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_max_string_length",
        argNames: ["that", "maxStringLength"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderMinPublishInterval(
      {required WrapClientBuilder that, required Duration minPublishInterval}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(minPublishInterval, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderMinPublishIntervalConstMeta,
      argValues: [that, minPublishInterval],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderMinPublishIntervalConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_min_publish_interval",
            argNames: ["that", "minPublishInterval"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderNewConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_new",
        argNames: [],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderPkiDir(
      {required WrapClientBuilder that, required String pkiDir}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(pkiDir, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderPkiDirConstMeta,
      argValues: [that, pkiDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderPkiDirConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_pki_dir",
        argNames: ["that", "pkiDir"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderPreferredLocales(
      {required WrapClientBuilder that,
      required List<String> preferredLocales}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_list_String(preferredLocales, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderPreferredLocalesConstMeta,
      argValues: [that, preferredLocales],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderPreferredLocalesConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_preferred_locales",
            argNames: ["that", "preferredLocales"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderPrivateKeyPath(
      {required WrapClientBuilder that, required String privateKeyPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(privateKeyPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderPrivateKeyPathConstMeta,
      argValues: [that, privateKeyPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderPrivateKeyPathConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_private_key_path",
        argNames: ["that", "privateKeyPath"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderProductUri(
      {required WrapClientBuilder that, required String productUri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(productUri, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderProductUriConstMeta,
      argValues: [that, productUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderProductUriConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_product_uri",
        argNames: ["that", "productUri"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderPublishTimeout(
      {required WrapClientBuilder that, required Duration publishTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(publishTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderPublishTimeoutConstMeta,
      argValues: [that, publishTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderPublishTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_publish_timeout",
        argNames: ["that", "publishTimeout"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunk(
      {required WrapClientBuilder that,
      required BigInt recreateMonitoredItemsChunk}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_usize(recreateMonitoredItemsChunk, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunkConstMeta,
      argValues: [that, recreateMonitoredItemsChunk],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunkConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_recreate_monitored_items_chunk",
            argNames: ["that", "recreateMonitoredItemsChunk"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderRequestTimeout(
      {required WrapClientBuilder that, required Duration requestTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(requestTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderRequestTimeoutConstMeta,
      argValues: [that, requestTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderRequestTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_request_timeout",
        argNames: ["that", "requestTimeout"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionName(
      {required WrapClientBuilder that, required String sessionName}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(sessionName, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionNameConstMeta,
      argValues: [that, sessionName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderSessionNameConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_session_name",
        argNames: ["that", "sessionName"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryInitial(
      {required WrapClientBuilder that,
      required Duration sessionRetryInitial}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(sessionRetryInitial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionRetryInitialConstMeta,
      argValues: [that, sessionRetryInitial],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderSessionRetryInitialConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_session_retry_initial",
            argNames: ["that", "sessionRetryInitial"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryLimit(
      {required WrapClientBuilder that, required int sessionRetryLimit}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_i_32(sessionRetryLimit, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionRetryLimitConstMeta,
      argValues: [that, sessionRetryLimit],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderSessionRetryLimitConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_session_retry_limit",
            argNames: ["that", "sessionRetryLimit"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionRetryMax(
      {required WrapClientBuilder that, required Duration sessionRetryMax}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_Chrono_Duration(sessionRetryMax, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionRetryMaxConstMeta,
      argValues: [that, sessionRetryMax],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderSessionRetryMaxConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_session_retry_max",
        argNames: ["that", "sessionRetryMax"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderSessionTimeout(
      {required WrapClientBuilder that, required int sessionTimeout}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_u_32(sessionTimeout, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderSessionTimeoutConstMeta,
      argValues: [that, sessionTimeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderSessionTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_session_timeout",
        argNames: ["that", "sessionTimeout"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderTrustServerCerts(
      {required WrapClientBuilder that, required bool trustServerCerts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_bool(trustServerCerts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderTrustServerCertsConstMeta,
      argValues: [that, trustServerCerts],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderTrustServerCertsConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_trust_server_certs",
            argNames: ["that", "trustServerCerts"],
          );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderUserToken(
      {required WrapClientBuilder that,
      required String userTokenId,
      required WrapClientUserToken userToken}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_String(userTokenId, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
            userToken, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderUserTokenConstMeta,
      argValues: [that, userTokenId, userToken],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientBuilderUserTokenConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientBuilder_user_token",
        argNames: ["that", "userTokenId", "userToken"],
      );

  @override
  WrapClientBuilder crateApiMinimalWrapClientBuilderVerifyServerCerts(
      {required WrapClientBuilder that, required bool verifyServerCerts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
            that, serializer);
        sse_encode_bool(verifyServerCerts, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientBuilderVerifyServerCertsConstMeta,
      argValues: [that, verifyServerCerts],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiMinimalWrapClientBuilderVerifyServerCertsConstMeta =>
          const TaskConstMeta(
            debugName: "WrapClientBuilder_verify_server_certs",
            argNames: ["that", "verifyServerCerts"],
          );

  @override
  WrapClientEndpoint crateApiMinimalWrapClientEndpointNew(
      {required String url}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientEndpointNewConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientEndpointNewConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientEndpoint_new",
        argNames: ["url"],
      );

  @override
  bool crateApiMinimalWrapClientUserTokenIsValid(
      {required WrapClientUserToken that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientUserTokenIsValidConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientUserTokenIsValidConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientUserToken_is_valid",
        argNames: ["that"],
      );

  @override
  WrapClientUserToken crateApiMinimalWrapClientUserTokenUserPass(
      {required String user, required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientUserTokenUserPassConstMeta,
      argValues: [user, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientUserTokenUserPassConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientUserToken_user_pass",
        argNames: ["user", "password"],
      );

  @override
  WrapClientUserToken crateApiMinimalWrapClientUserTokenX509(
      {required String user,
      required String certPath,
      required String privateKeyPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(user, serializer);
        sse_encode_String(certPath, serializer);
        sse_encode_String(privateKeyPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapClientUserTokenX509ConstMeta,
      argValues: [user, certPath, privateKeyPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientUserTokenX509ConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClientUserToken_x509",
        argNames: ["user", "certPath", "privateKeyPath"],
      );

  @override
  Future<(WrapSession, WrapSessionEventLoop)>
      crateApiMinimalWrapClientConnectToEndpointId(
          {required WrapClient that, String? endpointId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
            that, serializer);
        sse_encode_opt_String(endpointId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_event_loop,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalWrapClientConnectToEndpointIdConstMeta,
      argValues: [that, endpointId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapClientConnectToEndpointIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapClient_connect_to_endpoint_id",
        argNames: ["that", "endpointId"],
      );

  @override
  Future<String> crateApiMinimalWrapSessionEventLoopRun(
      {required WrapSessionEventLoop that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapSessionEventLoopRunConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionEventLoopRunConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSessionEventLoop_run",
        argNames: ["that"],
      );

  @override
  Future<JoinHandleString> crateApiMinimalWrapSessionEventLoopSpawn(
      {required WrapSessionEventLoop that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapSessionEventLoopSpawnConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionEventLoopSpawnConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSessionEventLoop_spawn",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiMinimalWrapSessionDisconnect(
      {required WrapSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMinimalWrapSessionDisconnectConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionDisconnectConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSession_disconnect",
        argNames: ["that"],
      );

  @override
  Future<int> crateApiMinimalWrapSessionSessionId({required WrapSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapSessionSessionIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionSessionIdConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSession_session_id",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiMinimalWrapSessionWaitForConnection(
      {required WrapSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalWrapSessionWaitForConnectionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalWrapSessionWaitForConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "WrapSession_wait_for_connection",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiMinimalInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMinimalInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMinimalInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_JoinHandleString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_JoinHandleString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientEndpoint => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientEndpoint => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapClientUserToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapClientUserToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapSession => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapSession => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WrapSessionEventLoop => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WrapSessionEventLoop => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  JoinHandleString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientEndpoint
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientUserToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSession
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSessionEventLoop
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionEventLoopImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSession
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientBuilder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientUserToken
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSession
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Duration dco_decode_Chrono_Duration(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeDuration(dco_decode_i_64(raw).toInt());
  }

  @protected
  JoinHandleString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinHandleStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientEndpoint
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientEndpointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapClientUserToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSession
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WrapSessionEventLoop
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WrapSessionEventLoopImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, WrapClientEndpoint)>
      dco_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint)
        .toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  (
    WrapSession,
    WrapSessionEventLoop
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_event_loop(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          arr[1]),
    );
  }

  @protected
  (
    String,
    WrapClientEndpoint
  ) dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  JoinHandleString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientEndpoint
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientEndpointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientUserToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSession
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSessionEventLoop
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionEventLoopImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSession
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientBuilder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientUserToken
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSession
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Duration sse_decode_Chrono_Duration(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return Duration(microseconds: inner.toInt());
  }

  @protected
  JoinHandleString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinHandleStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientEndpoint
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientEndpointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapClientUserToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapClientUserTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSession
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WrapSessionEventLoop
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WrapSessionEventLoopImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, WrapClientEndpoint)>
      sse_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, WrapClientEndpoint)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
              deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (
    WrapSession,
    WrapSessionEventLoop
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_event_loop(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
            deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    String,
    WrapClientEndpoint
  ) sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString(
          JoinHandleString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinHandleStringImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          WrapClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          WrapClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          WrapClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientEndpointImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          WrapClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientUserTokenImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          WrapSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          WrapSessionEventLoop self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionEventLoopImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          WrapClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          WrapSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          WrapClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientBuilderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          WrapClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientUserTokenImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          WrapSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void sse_encode_Chrono_Duration(Duration self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(PlatformInt64Util.from(self.inMicroseconds), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinHandleString(
          JoinHandleString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as JoinHandleStringImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClient(
          WrapClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientBuilder(
          WrapClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
          WrapClientEndpoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientEndpointImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientUserToken(
          WrapClientUserToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapClientUserTokenImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
          WrapSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
          WrapSessionEventLoop self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WrapSessionEventLoopImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          List<(String, WrapClientEndpoint)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_session_event_loop(
          (WrapSession, WrapSessionEventLoop) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSession(
        self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapSessionEventLoop(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_wrap_client_endpoint(
          (String, WrapClientEndpoint) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWrapClientEndpoint(
        self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class JoinHandleStringImpl extends RustOpaque implements JoinHandleString {
  // Not to be used by end users
  JoinHandleStringImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JoinHandleStringImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_JoinHandleString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_JoinHandleString,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_JoinHandleStringPtr,
  );
}

@sealed
class WrapClientBuilderImpl extends RustOpaque implements WrapClientBuilder {
  // Not to be used by end users
  WrapClientBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapClientBuilderImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapClientBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapClientBuilder,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapClientBuilderPtr,
  );

  /// Sets the application name.
  WrapClientBuilder applicationName(String applicationName) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderApplicationName(
          that: this, applicationName: applicationName);

  /// Sets the application uri.
  WrapClientBuilder applicationUri(String applicationUri) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderApplicationUri(
          that: this, applicationUri: applicationUri);

  /// Sets a custom client certificate path. The path is required to be provided as a partial
  /// path relative to the PKI directory. If set, this path will be used to read the client
  /// certificate from disk. The certificate can be in either the .der or .pem format.
  WrapClientBuilder certificatePath(String certificatePath) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderCertificatePath(
          that: this, certificatePath: certificatePath);

  /// Yields a [`Client`] from the values set by the builder. If the builder is not in a valid state
  /// it will return `None`.
  ///
  /// [`Client`]: client/struct.Client.html
  WrapClient client() =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderClient(
        that: this,
      );

  /// Sets whether the client should generate its own key pair if there is none found in the pki
  /// directory.
  WrapClientBuilder createSampleKeypair(bool createSampleKeypair) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderCreateSampleKeypair(
          that: this, createSampleKeypair: createSampleKeypair);

  /// Sets the id of the default endpoint to connect to.
  WrapClientBuilder defaultEndpoint(String defaultEndpoint) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderDefaultEndpoint(
          that: this, defaultEndpoint: defaultEndpoint);

  /// Adds an endpoint to the list of endpoints the client knows of.
  WrapClientBuilder endpoint(
          {required String endpointId, required WrapClientEndpoint endpoint}) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderEndpoint(
          that: this, endpointId: endpointId, endpoint: endpoint);

  /// Adds multiple endpoints to the list of endpoints the client knows of.
  WrapClientBuilder endpoints(List<(String, WrapClientEndpoint)> endpoints) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderEndpoints(
          that: this, endpoints: endpoints);

  /// Sets whether the client should ignore clock skew so the client can make a successful
  /// connection to the server, even when the client and server clocks are out of sync.
  WrapClientBuilder ignoreClockSkew() =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderIgnoreClockSkew(
        that: this,
      );

  bool isValid() =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderIsValid(
        that: this,
      );

  /// Time between making simple Read requests to the server to check for liveness
  /// and avoid session timeouts.
  WrapClientBuilder keepAliveInterval(Duration keepAliveInterval) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderKeepAliveInterval(
          that: this, keepAliveInterval: keepAliveInterval);

  /// Maximum number of array elements. 0 actually means 0, i.e. no array permitted
  WrapClientBuilder maxArrayLength(BigInt maxArrayLength) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxArrayLength(
          that: this, maxArrayLength: maxArrayLength);

  /// Maximum length in bytes of a byte string. 0 actually means 0, i.e. no byte strings permitted.
  WrapClientBuilder maxByteStringLength(BigInt maxByteStringLength) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxByteStringLength(
          that: this, maxByteStringLength: maxByteStringLength);

  /// Sets the maximum number of chunks in an outgoing message. 0 means no limit.
  WrapClientBuilder maxChunkCount(BigInt maxChunkCount) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxChunkCount(
          that: this, maxChunkCount: maxChunkCount);

  /// Maximum size of each individual outgoing message chunk.
  WrapClientBuilder maxChunkSize(BigInt maxChunkSize) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxChunkSize(
          that: this, maxChunkSize: maxChunkSize);

  /// Maximum size of each incoming chunk.
  WrapClientBuilder maxIncomingChunkSize(BigInt maxIncomingChunkSize) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxIncomingChunkSize(
          that: this, maxIncomingChunkSize: maxIncomingChunkSize);

  /// Maximum number of inflight messages.
  WrapClientBuilder maxInflightMessages(BigInt maxInflightMessages) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxInflightMessages(
          that: this, maxInflightMessages: maxInflightMessages);

  /// Maximum number of pending publish requests.
  WrapClientBuilder maxInflightPublish(BigInt maxInflightPublish) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxInflightPublish(
          that: this, maxInflightPublish: maxInflightPublish);

  /// Sets the maximum outgoing message size in bytes. 0 means no limit.
  WrapClientBuilder maxMessageSize(BigInt maxMessageSize) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxMessageSize(
          that: this, maxMessageSize: maxMessageSize);

  /// Maximum length in bytes of a string. 0 actually means 0, i.e. no string permitted.
  WrapClientBuilder maxStringLength(BigInt maxStringLength) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMaxStringLength(
          that: this, maxStringLength: maxStringLength);

  /// Set the lowest allowed publishing interval by the client.
  /// The server may also enforce its own minimum.
  WrapClientBuilder minPublishInterval(Duration minPublishInterval) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderMinPublishInterval(
          that: this, minPublishInterval: minPublishInterval);

  /// Sets the pki directory where client's own key pair is stored and where `/trusted` and
  /// `/rejected` server certificates are stored.
  WrapClientBuilder pkiDir(String pkiDir) => RustLib.instance.api
      .crateApiMinimalWrapClientBuilderPkiDir(that: this, pkiDir: pkiDir);

  /// Sets the preferred locales of the client. These are passed to the server during session
  /// creation to ensure localized strings are in the preferred language.
  WrapClientBuilder preferredLocales(List<String> preferredLocales) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderPreferredLocales(
          that: this, preferredLocales: preferredLocales);

  /// Sets a custom private key path. The path is required to be provided as a partial path
  /// relative to the PKI directory. If set, this path will be used to read the private key
  /// from disk.
  WrapClientBuilder privateKeyPath(String privateKeyPath) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderPrivateKeyPath(
          that: this, privateKeyPath: privateKeyPath);

  /// Sets the product uri.
  WrapClientBuilder productUri(String productUri) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderProductUri(
          that: this, productUri: productUri);

  /// Set the timeout on publish requests sent to the server.
  WrapClientBuilder publishTimeout(Duration publishTimeout) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderPublishTimeout(
          that: this, publishTimeout: publishTimeout);

  /// When a session is recreated on the server, the client will attempt to
  /// transfer monitored subscriptions from the old session to the new.
  /// This is the maximum number of monitored items to create per request.
  WrapClientBuilder recreateMonitoredItemsChunk(
          BigInt recreateMonitoredItemsChunk) =>
      RustLib.instance.api
          .crateApiMinimalWrapClientBuilderRecreateMonitoredItemsChunk(
              that: this,
              recreateMonitoredItemsChunk: recreateMonitoredItemsChunk);

  /// Set the timeout on requests sent to the server.
  WrapClientBuilder requestTimeout(Duration requestTimeout) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderRequestTimeout(
          that: this, requestTimeout: requestTimeout);

  /// Session name - the default name to use for a new session
  WrapClientBuilder sessionName(String sessionName) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionName(
          that: this, sessionName: sessionName);

  /// Initial time between retries when backing off on session reconnects.
  WrapClientBuilder sessionRetryInitial(Duration sessionRetryInitial) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionRetryInitial(
          that: this, sessionRetryInitial: sessionRetryInitial);

  /// Sets the session retry limit.
  ///
  /// # Panics
  ///
  /// Panics if `session_retry_limit` is less -1.
  WrapClientBuilder sessionRetryLimit(int sessionRetryLimit) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionRetryLimit(
          that: this, sessionRetryLimit: sessionRetryLimit);

  /// Maximum time between retries when backing off on session reconnects.
  WrapClientBuilder sessionRetryMax(Duration sessionRetryMax) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionRetryMax(
          that: this, sessionRetryMax: sessionRetryMax);

  /// Sets the session timeout period, in milliseconds.
  WrapClientBuilder sessionTimeout(int sessionTimeout) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderSessionTimeout(
          that: this, sessionTimeout: sessionTimeout);

  /// Sets whether the client should automatically trust servers. If this is not set then
  /// the client will reject the server upon first connect and the server's certificate
  /// must be manually moved from pki's `/rejected` folder to the `/trusted` folder. If it is
  /// set, then the server cert will automatically be stored in the `/trusted` folder.
  WrapClientBuilder trustServerCerts(bool trustServerCerts) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderTrustServerCerts(
          that: this, trustServerCerts: trustServerCerts);

  /// Adds a user token to the list supported by the client.
  WrapClientBuilder userToken(
          String userTokenId, WrapClientUserToken userToken) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderUserToken(
          that: this, userTokenId: userTokenId, userToken: userToken);

  /// Sets whether the client should verify server certificates. Regardless of this setting,
  /// server certificates are always checked to see if they are trusted and have a valid key
  /// length. In addition (if `verify_server_certs` is unset or is set to `true`) it will
  /// verify the hostname, application uri and the not before / after values to ensure validity.
  WrapClientBuilder verifyServerCerts(bool verifyServerCerts) =>
      RustLib.instance.api.crateApiMinimalWrapClientBuilderVerifyServerCerts(
          that: this, verifyServerCerts: verifyServerCerts);
}

@sealed
class WrapClientEndpointImpl extends RustOpaque implements WrapClientEndpoint {
  // Not to be used by end users
  WrapClientEndpointImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapClientEndpointImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapClientEndpoint,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapClientEndpoint,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapClientEndpointPtr,
  );
}

@sealed
class WrapClientImpl extends RustOpaque implements WrapClient {
  // Not to be used by end users
  WrapClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapClientPtr,
  );

  /// Connects to a named endpoint that you have defined in the `ClientConfig`
  /// and creates a [`Session`] for that endpoint. Note that `GetEndpoints` is first
  /// called on the server and it is expected to support the endpoint you intend to connect to.
  ///
  /// # Returns
  ///
  /// * `Ok((Arc<AsyncSession>, SessionEventLoop))` - Session and event loop.
  /// * `Err(StatusCode)` - Request failed, [Status code](StatusCode) is the reason for failure.
  ///
  Future<(WrapSession, WrapSessionEventLoop)> connectToEndpointId(
          {String? endpointId}) =>
      RustLib.instance.api.crateApiMinimalWrapClientConnectToEndpointId(
          that: this, endpointId: endpointId);
}

@sealed
class WrapClientUserTokenImpl extends RustOpaque
    implements WrapClientUserToken {
  // Not to be used by end users
  WrapClientUserTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapClientUserTokenImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_WrapClientUserToken,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapClientUserToken,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapClientUserTokenPtr,
  );

  bool isValid() =>
      RustLib.instance.api.crateApiMinimalWrapClientUserTokenIsValid(
        that: this,
      );
}

@sealed
class WrapSessionEventLoopImpl extends RustOpaque
    implements WrapSessionEventLoop {
  // Not to be used by end users
  WrapSessionEventLoopImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapSessionEventLoopImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_WrapSessionEventLoop,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapSessionEventLoop,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_WrapSessionEventLoopPtr,
  );

  /// Convenience method for running the session event loop until completion,
  /// this method will return once the session is closed manually, or
  /// after it fails to reconnect.
  ///
  /// # Returns
  ///
  /// * `StatusCode` - [Status code](StatusCode) indicating how the session terminated.
  Future<String> run() =>
      RustLib.instance.api.crateApiMinimalWrapSessionEventLoopRun(
        that: this,
      );

  /// Convenience method for running the session event loop until completion on a tokio task.
  /// This method will return a [`JoinHandle`](tokio::task::JoinHandle) that will terminate
  /// once the session is closed manually, or after it fails to reconnect.
  ///
  /// # Returns
  ///
  /// * `JoinHandle<StatusCode>` - Handle to a tokio task wrapping the event loop.
  Future<JoinHandleString> spawn() =>
      RustLib.instance.api.crateApiMinimalWrapSessionEventLoopSpawn(
        that: this,
      );
}

@sealed
class WrapSessionImpl extends RustOpaque implements WrapSession {
  // Not to be used by end users
  WrapSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WrapSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_WrapSession,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapSession,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WrapSessionPtr,
  );

  /// Disconnect from the server and wait until disconnected.
  Future<void> disconnect() =>
      RustLib.instance.api.crateApiMinimalWrapSessionDisconnect(
        that: this,
      );

  /// Send a message and wait for response, using the default configured timeout.
  ///
  /// In order to set a different timeout, call `send` on the inner channel instead.
  /// Create a subscription by sending a [`CreateSubscriptionRequest`] to the server.
  ///
  /// See OPC UA Part 4 - Services 5.13.2 for complete description of the service and error responses.
  ///
  /// # Arguments
  ///
  /// * `publishing_interval` - The requested publishing interval defines the cyclic rate that
  ///   the Subscription is being requested to return Notifications to the Client. This interval
  ///   is expressed in milliseconds. This interval is represented by the publishing timer in the
  ///   Subscription state table. The negotiated value for this parameter returned in the
  ///   response is used as the default sampling interval for MonitoredItems assigned to this
  ///   Subscription. If the requested value is 0 or negative, the server shall revise with the
  ///   fastest supported publishing interval in milliseconds.
  /// * `lifetime_count` - Requested lifetime count. The lifetime count shall be a minimum of
  ///   three times the keep keep-alive count. When the publishing timer has expired this
  ///   number of times without a Publish request being available to send a NotificationMessage,
  ///   then the Subscription shall be deleted by the Server.
  /// * `max_keep_alive_count` - Requested maximum keep-alive count. When the publishing timer has
  ///   expired this number of times without requiring any NotificationMessage to be sent, the
  ///   Subscription sends a keep-alive Message to the Client. The negotiated value for this
  ///   parameter is returned in the response. If the requested value is 0, the server shall
  ///   revise with the smallest supported keep-alive count.
  /// * `max_notifications_per_publish` - The maximum number of notifications that the Client
  ///   wishes to receive in a single Publish response. A value of zero indicates that there is
  ///   no limit. The number of notifications per Publish is the sum of monitoredItems in
  ///   the DataChangeNotification and events in the EventNotificationList.
  /// * `priority` - Indicates the relative priority of the Subscription. When more than one
  ///   Subscription needs to send Notifications, the Server should de-queue a Publish request
  ///   to the Subscription with the highest priority number. For Subscriptions with equal
  ///   priority the Server should de-queue Publish requests in a round-robin fashion.
  ///   A Client that does not require special priority settings should set this value to zero.
  /// * `publishing_enabled` - A boolean parameter with the following values - `true` publishing
  ///   is enabled for the Subscription, `false`, publishing is disabled for the Subscription.
  ///   The value of this parameter does not affect the value of the monitoring mode Attribute of
  ///   MonitoredItems.
  ///
  /// # Returns
  ///
  /// * `Ok(u32)` - identifier for new subscription
  /// * `Err(StatusCode)` - Request failed, [Status code](StatusCode) is the reason for failure.
  ///
  /// The internal ID of the session, used to keep track of multiple sessions in the same program.
  Future<int> sessionId() =>
      RustLib.instance.api.crateApiMinimalWrapSessionSessionId(
        that: this,
      );

  /// Convenience method to wait for a connection to the server.
  ///
  /// You should also monitor the session event loop. If it ends, this method will never return.
  Future<bool> waitForConnection() =>
      RustLib.instance.api.crateApiMinimalWrapSessionWaitForConnection(
        that: this,
      );
}
