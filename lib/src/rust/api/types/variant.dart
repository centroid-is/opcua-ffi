// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'byte_string.dart';
import 'date_time.dart';
import 'guid.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'status_code.dart';
import 'string.dart';
part 'variant.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`, `from`

Future<void> wrapvariant({required Variant a}) =>
    RustLib.instance.api.crateApiTypesVariantWrapvariant(a: a);

@freezed
sealed class Variant with _$Variant {
  const Variant._();

  /// Empty type has no value. It is equivalent to a Null value (part 6 5.1.6)
  const factory Variant.empty() = Variant_Empty;

  /// Boolean
  const factory Variant.boolean(
    bool field0,
  ) = Variant_Boolean;

  /// Signed byte
  const factory Variant.sByte(
    int field0,
  ) = Variant_SByte;

  /// Unsigned byte
  const factory Variant.byte(
    int field0,
  ) = Variant_Byte;

  /// Signed 16-bit int
  const factory Variant.int16(
    int field0,
  ) = Variant_Int16;

  /// Unsigned 16-bit int
  const factory Variant.uInt16(
    int field0,
  ) = Variant_UInt16;

  /// Signed 32-bit int
  const factory Variant.int32(
    int field0,
  ) = Variant_Int32;

  /// Unsigned 32-bit int
  const factory Variant.uInt32(
    int field0,
  ) = Variant_UInt32;

  /// Signed 64-bit int
  const factory Variant.int64(
    PlatformInt64 field0,
  ) = Variant_Int64;

  /// Unsigned 64-bit int
  const factory Variant.uInt64(
    BigInt field0,
  ) = Variant_UInt64;

  /// Float
  const factory Variant.float(
    double field0,
  ) = Variant_Float;

  /// Double
  const factory Variant.double(
    double field0,
  ) = Variant_Double;

  /// String
  const factory Variant.string(
    UaString field0,
  ) = Variant_String;

  /// DateTime
  const factory Variant.dateTime(
    BoxUaDateTime field0,
  ) = Variant_DateTime;

  /// Guid
  const factory Variant.guid(
    BoxUaGuid field0,
  ) = Variant_Guid;

  /// StatusCode
  const factory Variant.statusCode(
    StatusCode field0,
  ) = Variant_StatusCode;

  /// ByteString
  const factory Variant.byteString(
    ByteString field0,
  ) = Variant_ByteString;

  /// XmlElement
  const factory Variant.xmlElement(
    UaString field0,
  ) = Variant_XmlElement;
}
