// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `from`, `from`, `new`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WrapClient>>
abstract class WrapClient implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WrapClientBuilder>>
abstract class WrapClientBuilder implements RustOpaqueInterface {
  /// Sets the application name.
  WrapClientBuilder applicationName({required String applicationName});

  /// Sets the application uri.
  WrapClientBuilder applicationUri({required String applicationUri});

  /// Sets a custom client certificate path. The path is required to be provided as a partial
  /// path relative to the PKI directory. If set, this path will be used to read the client
  /// certificate from disk. The certificate can be in either the .der or .pem format.
  WrapClientBuilder certificatePath({required String certificatePath});

  /// Yields a [`Client`] from the values set by the builder. If the builder is not in a valid state
  /// it will return `None`.
  ///
  /// [`Client`]: client/struct.Client.html
  WrapClient client();

  /// Sets whether the client should generate its own key pair if there is none found in the pki
  /// directory.
  WrapClientBuilder createSampleKeypair({required bool createSampleKeypair});

  /// Sets the id of the default endpoint to connect to.
  WrapClientBuilder defaultEndpoint({required String defaultEndpoint});

  /// Adds an endpoint to the list of endpoints the client knows of.
  WrapClientBuilder endpoint(
      {required String endpointId, required ClientEndpoint endpoint});

  /// Adds multiple endpoints to the list of endpoints the client knows of.
  WrapClientBuilder endpoints(
      {required List<(String, ClientEndpoint)> endpoints});

  /// Creates a `ClientBuilder` using a configuration file as the initial state.
  static WrapClientBuilder fromConfig({required String path}) =>
      RustLib.instance.api
          .crateApiMinimalWrapWrapClientBuilderFromConfig(path: path);

  /// Sets whether the client should ignore clock skew so the client can make a successful
  /// connection to the server, even when the client and server clocks are out of sync.
  WrapClientBuilder ignoreClockSkew();

  bool isValid();

  /// Time between making simple Read requests to the server to check for liveness
  /// and avoid session timeouts.
  WrapClientBuilder keepAliveInterval({required Duration keepAliveInterval});

  /// Maximum number of array elements. 0 actually means 0, i.e. no array permitted
  WrapClientBuilder maxArrayLength({required BigInt maxArrayLength});

  /// Maximum length in bytes of a byte string. 0 actually means 0, i.e. no byte strings permitted.
  WrapClientBuilder maxByteStringLength({required BigInt maxByteStringLength});

  /// Sets the maximum number of chunks in an outgoing message. 0 means no limit.
  WrapClientBuilder maxChunkCount({required BigInt maxChunkCount});

  /// Maximum size of each individual outgoing message chunk.
  WrapClientBuilder maxChunkSize({required BigInt maxChunkSize});

  /// Maximum size of each incoming chunk.
  WrapClientBuilder maxIncomingChunkSize(
      {required BigInt maxIncomingChunkSize});

  /// Maximum number of inflight messages.
  WrapClientBuilder maxInflightMessages({required BigInt maxInflightMessages});

  /// Maximum number of pending publish requests.
  WrapClientBuilder maxInflightPublish({required BigInt maxInflightPublish});

  /// Sets the maximum outgoing message size in bytes. 0 means no limit.
  WrapClientBuilder maxMessageSize({required BigInt maxMessageSize});

  /// Maximum length in bytes of a string. 0 actually means 0, i.e. no string permitted.
  WrapClientBuilder maxStringLength({required BigInt maxStringLength});

  /// Set the lowest allowed publishing interval by the client.
  /// The server may also enforce its own minimum.
  WrapClientBuilder minPublishInterval({required Duration minPublishInterval});

  /// Creates a `ClientBuilder`
  factory WrapClientBuilder() =>
      RustLib.instance.api.crateApiMinimalWrapWrapClientBuilderNew();

  /// Sets the pki directory where client's own key pair is stored and where `/trusted` and
  /// `/rejected` server certificates are stored.
  WrapClientBuilder pkiDir({required String pkiDir});

  /// Sets the preferred locales of the client. These are passed to the server during session
  /// creation to ensure localized strings are in the preferred language.
  WrapClientBuilder preferredLocales({required List<String> preferredLocales});

  /// Sets a custom private key path. The path is required to be provided as a partial path
  /// relative to the PKI directory. If set, this path will be used to read the private key
  /// from disk.
  WrapClientBuilder privateKeyPath({required String privateKeyPath});

  /// Sets the product uri.
  WrapClientBuilder productUri({required String productUri});

  /// Set the timeout on publish requests sent to the server.
  WrapClientBuilder publishTimeout({required Duration publishTimeout});

  /// When a session is recreated on the server, the client will attempt to
  /// transfer monitored subscriptions from the old session to the new.
  /// This is the maximum number of monitored items to create per request.
  WrapClientBuilder recreateMonitoredItemsChunk(
      {required BigInt recreateMonitoredItemsChunk});

  /// Set the timeout on requests sent to the server.
  WrapClientBuilder requestTimeout({required Duration requestTimeout});

  /// Session name - the default name to use for a new session
  WrapClientBuilder sessionName({required String sessionName});

  /// Initial time between retries when backing off on session reconnects.
  WrapClientBuilder sessionRetryInitial(
      {required Duration sessionRetryInitial});

  /// Sets the session retry limit.
  ///
  /// # Panics
  ///
  /// Panics if `session_retry_limit` is less -1.
  WrapClientBuilder sessionRetryLimit({required int sessionRetryLimit});

  /// Maximum time between retries when backing off on session reconnects.
  WrapClientBuilder sessionRetryMax({required Duration sessionRetryMax});

  /// Sets the session timeout period, in milliseconds.
  WrapClientBuilder sessionTimeout({required int sessionTimeout});

  /// Sets whether the client should automatically trust servers. If this is not set then
  /// the client will reject the server upon first connect and the server's certificate
  /// must be manually moved from pki's `/rejected` folder to the `/trusted` folder. If it is
  /// set, then the server cert will automatically be stored in the `/trusted` folder.
  WrapClientBuilder trustServerCerts({required bool trustServerCerts});

  /// Adds a user token to the list supported by the client.
  WrapClientBuilder userToken(
      {required String userTokenId, required WrapClientUserToken userToken});

  /// Sets whether the client should verify server certificates. Regardless of this setting,
  /// server certificates are always checked to see if they are trusted and have a valid key
  /// length. In addition (if `verify_server_certs` is unset or is set to `true`) it will
  /// verify the hostname, application uri and the not before / after values to ensure validity.
  WrapClientBuilder verifyServerCerts({required bool verifyServerCerts});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<WrapClientUserToken>>
abstract class WrapClientUserToken implements RustOpaqueInterface {
  bool isValid();

  static WrapClientUserToken userPass(
          {required String user, required String password}) =>
      RustLib.instance.api.crateApiMinimalWrapWrapClientUserTokenUserPass(
          user: user, password: password);

  static WrapClientUserToken x509(
          {required String user,
          required String certPath,
          required String privateKeyPath}) =>
      RustLib.instance.api.crateApiMinimalWrapWrapClientUserTokenX509(
          user: user, certPath: certPath, privateKeyPath: privateKeyPath);
}

class ClientEndpoint {
  final ClientEndpoint field0;

  const ClientEndpoint.raw({
    required this.field0,
  });

  factory ClientEndpoint({required String url}) =>
      RustLib.instance.api.crateApiMinimalWrapClientEndpointNew(url: url);

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ClientEndpoint &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}
